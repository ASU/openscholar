<?php

/**
 * hook theme
 */
function vsite_layout_theme(){
  return array(
    'vsite_layout_layout' => array(
    	'template' => 'vsite_layout-layout', 
  		//'arguments' => array('vsite_layout_widgets' => NULL),
    	'path' => drupal_get_path('module', 'vsite_layout'). '/theme'
    ),
  
    'vsite_layout_layout_widgets' => array(
    	'template' => 'vsite_layout-layout-widgets', 
  		'arguments' => array('wgts' => NULL, 'wgts_id' => NULL, 'wgts_class' => NULL),
    	'path' => drupal_get_path('module', 'vsite_layout'). '/theme'
    ),
    
  );
}

/**
 * Implementation of hook_spaces_settings().
 */
function vsite_layout_spaces_settings(){
  return array(
    'layout' => array(
      //handled by scholar layout module
    ),
  );
}

/**
 * hook menu
 */
function vsite_layout_menu(){
  $items = array();
  
  $items["cp/settings/layout"] = array(
    'title' => 'Layout',
    'page callback' => 'vsite_layout_layout',
    'access arguments' => array('configure spaces features'),
    'menu_name' => 'cp', 
  );
  $items["cp/settings/layout/region_widgets_js"] = array(
    'page callback' => 'vsite_layout_region_widgets_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items["cp/settings/layout/top_widgets_js"] = array(
    'page callback' => 'vsite_layout_top_widgets_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * main entry point for "cp/settings/layout"
 */
function vsite_layout_layout(){
  jquery_ui_add(array('ui.draggable', 'ui.droppable', 'ui.sortable'));

  drupal_add_js(drupal_get_path('module', 'vsite_layout') . '/theme/vsite_layout.js');
  drupal_add_css(drupal_get_path('module', 'vsite_layout') . '/theme/vsite_layout.css');
  $space = scholar_get_scholar();
  
  //top
  $vsite_layout_widgets = vsite_layout_region_widgets();
  $wgts = array_key_exists('unused',$vsite_layout_widgets)?$vsite_layout_widgets['unused']:array();
  
  $top = theme('vsite_layout_layout_widgets', $wgts, 'scholarlayout-top-widgets', 'scholarlayout-widgets-list');
  
  // layout
  $layout = theme('vsite_layout_layout');
  return $top . $layout;
}

/**
 * preprocessor function for vsite_layout-layout.tpl.php
 * Introduces a variable for each region in the admin_base theme
 * e.g. $vsite_layout_header_left will contain a themed list of 
 * block names in the header_left
 */
function vsite_layout_preprocess_vsite_layout_layout(&$vars){

  $vsite_layout_widgets = array();
  
  $regions = array_keys(system_region_list('scholar_base'));

  foreach($regions as $region){
    $vsite_layout_widgets[$region] = array();
  }
  
  $vsite_layout_widgets = vsite_layout_region_widgets();
  
  foreach($regions as $region){
    $wgts_id = 'scholarlayout-' . str_replace('_','-', $region);
    $wgts = array_key_exists($region,$vsite_layout_widgets)?$vsite_layout_widgets[$region]:array();
    _check_for_overrides($wgts,$region);
    $vars['vsite_layout_' . $region] = theme('vsite_layout_layout_widgets',$wgts, $wgts_id, 'scholarlayout-widgets-list');
  }
  
  $vars['vsite_layout_form'] = drupal_get_form('vsite_layout_layoutsettings');
}

function vsite_layout_layoutsettings($form_state = NULL){
	
	$a = func_get_args();
	$regions = array_keys(system_region_list('scholar_base'));
  $form = array('#attributes' => array('onSubmit' => 'vsite_layout_afterdrag(null,null)'));
  $space = scholar_get_scholar();

  //$s_page_type = ($form_state && $form_state['post'])?'all':$form_state['post']['page_type']
  
  foreach($regions as $region){
    $r = str_replace('_','-', $region);
    $wgts_id = 'vsite_layout-' . $r;
    $form[$wgts_id] = array('#type' => 'hidden' );
    if(isset($space->settings['layout']) && array_key_exists($wgts_id,$space->settings['layout'])){
    	$form[$wgts_id]['#default'] = $space->settings['layout'][$wgts_id];
    }
  }
  
  $a_page_types = vsite_layout_get_pagetypes($space);
  
  $form['page_type'] = array(
	  '#type' => 'select',
	  '#title' => t('Page Type'),
	  '#default_value' =>'all',
	  '#options' => $a_page_types,
	  '#description' => t('Switch page type to view it\'s layout.'),
	  '#ahah' => array(
          'event' => 'go_ahah',
	        'path' => 'cp/settings/layout/region_widgets_js',
	        'wrapper' => 'vsite_layout-container',
	        'progress' => array('type' => 'throbber', 'message' => t('Loading Page...')),
          'effect' => 'fade',
          'method' => 'replaceWith',
    ),
	);
	
	$form['secret_hidden_ahah'] = array(
    '#type' => 'hidden',
	  '#value' =>'all',
    '#ahah' => array(
          'event' => 'go_ahah',
          'path' => 'cp/settings/layout/top_widgets_js',
          'wrapper' => 'vsite_layout-top-widgets',
          'effect' => 'fade',
	        'progress' => array('type' => 'none'),
	        'method' => 'replaceWith',
    ),
  );
  
  // add the submit button (not in the form definition yet)
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );
  
  return $form;
	
}

function vsite_layout_get_pagetypes($space){
	
	static $a_page_types;
	
	if($a_page_types) return $a_page_types;
	
  $features = spaces_features($space->type, TRUE);
  $a_page_types = array('all' => t('All Pages'), 'front' => t('Front Page'));
  foreach (array_keys($space->features) as $s_feature_key){
    if(!array_key_exists($s_feature_key,$features)) continue;
    $a_page_types[$s_feature_key] = $features[$s_feature_key]->info['name'];
  }
	
  return $a_page_types;
}

function vsite_layout_layoutsettings_validate($form, &$form_state){

}

function vsite_layout_layoutsettings_submit($form, &$form_state){
  // get the space and the settings we want to save
  $space = scholar_get_scholar();
  $setting = array();
  $regions = array_keys(system_region_list('scholar_base'));
  
  if (!empty($form_state['values'])) {
  	$s_page_type = $form_state['values']['page_type'];
  	
    foreach ($form_state['values'] as $field => $value) {
    	$field = str_replace('-','_',str_replace('vsite_layout-','',$field));
    	if(!in_array($field,$regions)) continue;
      $a_values = strlen($value)?split("\|",$value):array();
      foreach ($a_values as $val) $setting[$val] = $field;
    }
    
    if($s_page_type == 'all'){
    	$a_prev_settings = array();
    	if(is_array($space->settings['layout']) && array_key_exists('all',$space->settings['layout'])){
    	  $a_prev_settings = $space->settings['layout'][$s_page_type];
    	}else{
	    	$a_prev_settings = _vsite_layout_generate_default_settings_ary();
    	}//Use saved settings or default settings
    	$a_new_all_wgts = array_diff($setting,$a_prev_settings);
    	$a_rem_all_wgts = array_diff($a_prev_settings,$setting);
    	
    	foreach(array_keys(vsite_layout_get_pagetypes($space)) as $s_page_nm){
    		if($s_page_nm == 'all' || (!count($a_new_all_wgts) && !count($a_rem_all_wgts))) continue;
    		$a_new_settings = (is_array($space->settings['layout'][$s_page_nm]))?$space->settings['layout'][$s_page_nm]:_vsite_layout_generate_default_settings_ary($s_page_nm);
    		
    	 foreach ($a_new_all_wgts as $s_widget_name => $s_location) {
          if(!array_key_exists($s_widget_name,$a_new_settings) || $a_new_settings[$s_widget_name] === false){
            $a_new_settings[$s_widget_name] = $s_location;
          }//Already on this page?
        }//Add new widgets
        
        foreach ($a_rem_all_wgts as $s_widget_name => $s_location) {
          if(array_key_exists($s_widget_name,$a_new_settings) && $a_new_settings[$s_widget_name] == $s_location){
            unset($a_new_settings[$s_widget_name]);
          }//Already on this page?
        }//Remove widgets
    		
    		$space->settings['layout'][$s_page_nm] = $a_new_settings;
    	}//Check Each Page Type
    }//Add new all widgets to all templates
    
    $space->settings['layout'][$s_page_type] = $setting;
    spaces_save($space);
  }
}




/**
 * Callback to swap out the top widgets avalible for different pages
 * @param $s_region
 * @return string
 */
function vsite_layout_top_widgets_callback(){
  $scholar = scholar_get_scholar();
  $s_page_type = $_POST['page_type'];
  
  $a_region_wgts = vsite_layout_region_widgets($scholar,$s_page_type);
  //top
  $wgts = array_key_exists('unused',$a_region_wgts)?$a_region_wgts['unused']:array();
  
  $wgts_id = 'scholarlayout-top-widgets';
  $wgts_class = 'scholarlayout-widgets-list';
  
  $top = theme('vsite_layout_layout_widgets', $wgts, $wgts_id, $wgts_class);
  
  drupal_json(array('status' => TRUE, 'data' => $top));
}

/**
 * Callback to swap out the regions avalible for different pages
 * @param $s_region
 * @return string
 */
function vsite_layout_region_widgets_callback(){
  $scholar = scholar_get_scholar();
  $s_page_type = $_POST['page_type'];
  
  $a_region_wgts = vsite_layout_region_widgets($scholar,$s_page_type);
  $a_themed_regions = array();
  
  $regions = array_keys(system_region_list('scholar_base'));
  foreach($regions as $region){
  	$widgets = array_key_exists($region,$a_region_wgts)?$a_region_wgts[$region]:array();
    $wgts_id = 'scholarlayout-' . str_replace('_','-', $region);
    if($s_page_type == 'all') _check_for_overrides($widgets,$region,$scholar);
    $a_themed_regions[$region] = theme('vsite_layout_layout_widgets',$widgets, $wgts_id, 'scholarlayout-widgets-list');
  }
  
  $output= '<div id="vsite_layout-container" class="pad">'.
           $a_themed_regions['header_main'].
				   $a_themed_regions['header_left'].
				   $a_themed_regions['header_right'].
				   $a_themed_regions['navbar'].
				   $a_themed_regions['left'].
				   $a_themed_regions['right']."</div>";
				  
	drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Get the blocks that are avalible given a context
 * 
 * @param $page_type
 * @return array
 */
function vsite_layout_filtered_widgets($page_type='all'){
  
	$contexts = context_contexts();
  $a_widgets = $contexts['cp-section-layout']->block;
  
  $features = spaces_features($space->type, TRUE);
  if(array_key_exists($page_type,$features)){
  	foreach ($features[$page_type]->info['features']['context'] as $s_sub_context){
  		$a_widgets = array_merge($a_widgets,$contexts[$s_sub_context]->block);
  	}
  }
  
  return $a_widgets;
}

/**
 * Returns an associative array by region with the widgets sorted correctly
 * 
 * @param scholar $scolar
 * @param string $page_type
 * @return array
 */
function vsite_layout_region_widgets($scolar = false,$page_type='all'){
  if(!$scholar) $scholar = scholar_get_scholar();
  
  static $a_region_widgets;
  if($a_region_widgets) return $a_region_widgets;
  
  $a_widgets = vsite_layout_filtered_widgets($page_type);
  
  if(!$scholar) return $a_widgets;
  
  $a_site_settings = false;
  if(array_key_exists('layout',$scholar->settings) && array_key_exists($page_type,$scholar->settings['layout'])){
  	$a_site_settings = $scholar->settings['layout'][$page_type];
  	$a_order = array_keys($a_site_settings);
  }
  
  $a_region_widgets = array();
  foreach($a_widgets as $s_widget_key => $widget){
  	if(!$a_site_settings && $widget['region']){
      $a_region_widgets[$widget['region']][] = $widget;
  	}elseif ($a_site_settings && array_key_exists($s_widget_key,$a_site_settings)){
  		$a_region_widgets[$a_site_settings[$s_widget_key]][" ".array_search($s_widget_key,$a_order)] = $widget;
  	}else{
  		$a_region_widgets['unused'][] = $widget;
  	}
  }
  
  foreach ($a_region_widgets as $region => $a_widgets) ksort($a_region_widgets[$region]);
  
  return $a_region_widgets;
}


/**
 * Alter the blocks avalible on a given page,  Apply users saved settings
 * @param array(spaces_context) $contexts
 * @return boolean
 */
function vsite_layout_context_active_contexts_alter(&$contexts){
	if(!array_key_exists('cp-section-layout',$contexts)) return;
	$a_region_widgets = false;
	$o_feature = false;
	$space = scholar_get_scholar();
	
	$features = spaces_features();
  foreach ($features as $feature) {
  	$feature_contexts = drupal_map_assoc(spaces_features_items('context', $feature->name));
  	if(!array_intersect($feature_contexts,array_keys($contexts))) continue;
  	
  	$o_feature = $feature;
  	$a_region_widgets = vsite_layout_region_widgets($space,$feature->name);
  	break;
  }
  
  //@todo add call to scholar_get_front_page 
  if(!$a_region_widgets && scholar_is_front()) $a_region_widgets = vsite_layout_region_widgets($space,'front');
  
  if(!$a_region_widgets) $a_region_widgets = vsite_layout_region_widgets($space);
	
  $a_replacement_block = array();
  $a_feat_replacement_block = array();
  foreach ($a_region_widgets as $s_region => $a_region){
  	$n_weight = 0;
  	foreach ($a_region as $a_widget){
  		$a_widget['region'] = $s_region;
  		$a_widget['weight'] = $n_weight++;
  		if($o_feature && $o_feature->name == $a_widget['module']){
  			$a_feat_replacement_block[] = $a_widget;
  		}else{
  			$a_replacement_block[] = $a_widget;
  		}
  	}
  }
  
  $contexts['cp-section-layout']->block = $a_replacement_block;
  if($o_feature){
  	foreach (drupal_map_assoc(spaces_features_items('context', $feature->name)) as $s_context) {
  		if(array_key_exists($s_context,$contexts)){
  			$contexts[$s_context]->block = $a_feat_replacement_block;
  			$a_feat_replacement_block = array();
  		}
  	}
  }
  
	return true;	
}

/**
 * Create a default settings array from defaults
 * 
 * @param string $s_page_type
 * @return array
 */
function _vsite_layout_generate_default_settings_ary($s_page_type = 'all'){
  $a_default = array();
  
  $a_widgets = vsite_layout_filtered_widgets($s_page_type);
  foreach ($a_widgets as $s_setting_id => $widget) $a_default[$s_setting_id] = $widget['region'];
  
  return $a_default;
}

function _check_for_overrides(&$widgets,$s_region,$space = null){
	if(!$space) $space = scholar_get_scholar();
	
	foreach(vsite_layout_get_pagetypes($space) as $s_page_nm => $s_page_readable){
    if($s_page_nm == 'all' || !count($widgets)) continue;
    $a_page_settings = (is_array($space->settings['layout'][$s_page_nm]))?$space->settings['layout'][$s_page_nm]:_vsite_layout_generate_default_settings_ary($s_page_nm);
    
    foreach ($widgets as $key => $wgt){
    	$s_wgt_name = $wgt['module']."_".$wgt['delta'];
    	if(!array_key_exists($s_wgt_name,$a_page_settings) || $a_page_settings[$s_wgt_name] != $s_region){
    		$widgets[$key]['overides'][] = $s_page_readable;
    	}
    }
	}
}