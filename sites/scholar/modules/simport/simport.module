<?php


function simport_menu() {
  $items = array();

  $items['admin/settings/simport'] = array(
    'title' => 'Simport',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simport_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => '',
    'file' => 'simport.admin.inc',
     'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Initial function to begin import script
 * @return unknown
 */
function simport_import(){ 

  //PHASE 1 - load sites and settings

  vsite_include('vsiteapi');
  $roles = variable_get('scholar_manager_role', 'scholar admin');

  //test one node
 // $sql = db_query("SELECT * FROM {scholar_export_data} WHERE id = %d", 33);
  
  //first create the new vsites
  $sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s'", 'admin_scholar');
  while ($data = db_fetch_object($sql)) {

    //get the old site node object
    $old = unserialize($data ->data); 

    //define the domain for the new site
    $domain = $old -> title;

    //get old user object
    $user_old = unserialize(db_result(db_query("SELECT data from {scholar_export_data} WHERE type = '%s' AND id = %d", 'user', (int)$old ->uid)));

    //create new user based on the old user info
    $user = simport_create_user($user_old->name, $user_old->mail, $user_old->pass, $roles);

    //create new site
    $new_site_info = simport_create_site($user, $domain);

    //write to the simport table mapping old site to new site
    $sql_map_sites = db_query("INSERT INTO {simport} (old, new) VALUES (%d, %d)", (int)$old -> nid, (int)$new_site_info ->nid);

    //get a spaces object for new site so we can modify and save with the functions below
    $new = spaces_load ( 'og', $new_site_info ->nid, TRUE );

    //set theme
    simport_set_theme($old, $new);

    //set shield
    simport_set_shield($old, $new);

    //set logo
    simport_set_logo($old, $new);

    //just iterate once for testing purposes - REMOVE THIS WHEN DONE TESTING
    // return false;

    //save all the changes/additions to the space
    spaces_save($new);
  }
  //return false;

  //PHASE 2 - load content

  //load content for each type
  $types = _simport_map_content_types();

  foreach ($types as $oldtype => $newtype){
    $sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s'", $oldtype);
    while ($data = db_fetch_object($sql)) {
      $old = unserialize($data ->data);
      $new = new stdClass();

      //set generic values
      simport_set_generic($old, $new);
      
      //set taxonomy term values
      simport_set_terms($old, $new);

      //deal with any custom fields specific to the content type;
      switch ($old -> type){
        case 'scholar_announcement':
          simport_set_announcement($old, $new);
          break;

        case 'scholar_bio':
          simport_set_blog($old, $new);
          break;

        case 'scholar_blog':
          simport_set_link($old, $new);
          break;
          
        case 'scholar_link':
          simport_set_link($old, $new);
          break;  
          
       case 'scholar_class':
          simport_set_class($old, $new);
          break;    
          
          
      }
  
      //save the node
      $new_node = node_save($new);
    
        //if old site has front page set to specific node
      if ($old->scholar_admin_site_front_node){
        //set frontpage value after content created
        simport_set_frontpage($old, $new_node);
      }
    }
  }
}

/**
 * Create the user
 */
function simport_create_user($name, $mail, $password_hash, $roles){
  install_include(array( 'user' ));
  $password =  user_password();
  $user = install_add_user($name, $password, $mail, $roles = array($roles), $status = 1);

  if (!$user){
    //TODO: add watchdog message
    //watchdog();
  }

  else{
    //change the password back to the original
    $sql_revert_password = db_query("UPDATE {users} SET pass = '%s' WHERE uid = %d", $password_hash, (int)$user ->uid);
  }
  //return the new user object
  return $user;
}

/**
 * Create the site
 */
function simport_create_site($user, $domain){
  vsite_include('vsiteapi');
  //create the site
  return vsite_vsite_create($user->name, $user->mail, $domain);
}

/**
 * 
 * @param $old og node from the old site
 * @param $new the new vsite
 */
function simport_set_theme($old, &$new){

  $og_theme_map = array(
  'fac01' => 'scholar_theme_06',
  'fac02' => 'scholar_theme_01',
  'fac03' =>'scholar_theme_03',
  'fac04' => 'scholar_theme_06',
  'fac05' => 'scholar_theme_05',
  'fac06' => 'scholar_theme_04',
  'fac07' => 'scholar_theme_07',
  );
  //set the new theme
  $new->settings['theme'] = $og_theme_map[$old -> og_theme];
}

/**
 * Set the frontpage value
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_frontpage($old, &$new){
 //TODO: not finished yet
  //if true then, a node was set as front page on D5 scholar site
  if ($old->scholar_admin_site_front_node){
    $new->settings['front']['frontpage'] = 'bio';
    $new->settings['front']['frontpage']['nid'] = $new -> nid; // TODO: is the the right setting for frontpage nid?
  }
  else{
  //do something
  }
}

/**
 * Transfer the logo
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_logo($old, &$new){

  if (!empty($old->logo)){
    
    //match the "img src" part in the $old -> logo string
    $pattern = "/img[ ]+src=[\"' ]?([^\"' >]+)[\"' ]?[^>]*>/i";
    preg_match($pattern, $logo, $matches);
    $url = parse_url($matches[1]);

    $src_path = '/nfs/www/edu-harvard-iq-scholar/';
    
    //get path and remove slash at begining if present
    $src_path .= (strpos($url['path'], '/') == 0 ) ? substr($url['path'], 1) : $url['path'];
   
    //set destination path
    $dest_path = variable_get('simport_current_path', '') . '/' . variable_get('file_directory_path', '') .  '/' . $old -> title . '/';
    
    //make the new directory - trim off last slash
    mkdir(substr($dest_path, 0, -1));
    
    //copy the file to the new location
    file_copy(&$src_path, $dest_path, $replace = FILE_EXISTS_REPLACE);

    //replacing the file name but keeping file ext
    $filename = explode('.', basename($src_path));
    $new_filename = $old ->title . $filename[1];
    
    //define new file - absolute path
    $new_file = dirname($src_path . '/' . $new_filename);
    
    //rename the file
    rename($src_path, $new_file );
    
    //now set in the vsite settings
    $new->logo['current_logo'] = variable_get('file_directory_path', '') . '/vsite_design_logo/' . $old ->title . '/' . basename($new_file);
  }
}

/**
 * Set the shield selection
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_shield($old, &$new){
  //all D5 site themes use the same shield - TODO: maybe not shepsle and bates sites???
  //shield setting now offered on old site, so set sheild to default
  $new ->settings['sheild'] = drupal_get_path('module','vsite_design')."/theme/shields/harvard_shield.png";
}



function simport_set_terms($old, &$new){
  //check to see of any terms are set in old node
  if (count($old -> tags)){
    $vsite = simport_get_new_viste($old -> og_groups[0]);

    foreach($old -> tags as $vocab_id => $values){
      //NOTE: vocab id 6 is the global vocabularyon the D5 scholars site

      if ($vocab_id == '6'){
        //store the array information in a property called global_taxonomy for use later
        $new -> global_taxonomy == $values;
      }

      else{
        foreach($values as $old_term){
          $new_vocab = simport_get_site_vocabularies($sid, $new -> type);

          $term['vid'] = $new_vocab -> vid;
          $term['name'] = $old_term -> name;
          $term['description'] = empty($old_term -> description) ? NULL : $old_term -> description;
          //$term['weight'] = mt_rand(0,10);

          $status = taxonomy_save_term($term);
          if ($status){
            //get the newly created term id. TODO: is this the best way???
            $tid = db_last_insert_id('term_data', 'tid');
          }
          //now add the terms to the $new node object
          $new -> taxonomy .= array( $new_vocab -> vid =>array($tid));
        }
      }
    }
  }
}

/**
 * Pass it the old site nid and it returns current vsite object
 */
function simport_get_new_viste($old_site_nid){
  $space_new = db_result(db_query("SELECT new FROM {simport} WHERE old = %d", $old_site_nid));
  $vsite = spaces_load ( 'og', $space_new, TRUE );
  return $vsite;
}

function simport_set_generic($old, &$new){

 $vsite = simport_get_new_viste($old -> og_groups[0]);

  //set the generic node data
  $new -> title = $old -> title;
  $new -> status = $old -> status;
  $new -> created = $old -> created;
  $new -> changed = $old -> changed;
  $new -> uid = $vsite -> group -> uid;
  $new -> name = $vsite -> group -> name;
  $new -> og_groups [0] = $vsite -> group -> nid; //double check on this
  
}

function simport_set_announcement($old, &$new){  
  //no custom fields
  $new -> body = $old -> body;
}

function simport_set_bio($old, &$new){  
  //no custom fields
  $new -> body = $old -> body;
}


function simport_set_blog($old, &$new){ 
     
  
}

function simport_set_class($old, &$new){ 
  
    //check if images(s) exist
    if ($old -> field_image[0]['fid'] > 0){
      module_load_include('inc', 'simport', 'simport.api');
      $i=0;
      foreach($old -> field_image as $file){
      //define full path to file
      $source = variable_get('simport_remote_path', '') . '/' . $file['filepath'];
      simport_node_add_imagefield_image($source, 'field_image', &$node, $i);
      
      //call api function to import the file into the node object!
      //simport_import_filefield_file($new, $path, $file, $i);
      $i++;  
      }
   } 
   
      //check if files(s) exist
    if ($old -> field_image[0]['fid'] > 0){
      module_load_include('inc', 'simport', 'simport.api');
      $i=0;
      foreach($old -> field_image as $file){
      //define full path to file
      $source = variable_get('simport_remote_path', '') . '/' . $file['filepath'];
      simport_node_add_imagefield_image($source, 'field_image', &$node, $i);           
      $i++;  
      }
   } 
}

function simport_set_link($old, &$new){ 
  //set the link
  if (!empty($old -> field_link[0]['url'])){
    $new -> field_link_href[0]['url'] = $old -> field_link[0]['url'];
  }
  
  //check if file(s) exist
    if ($old -> field_image[0]['fid'] > 0){
      module_load_include('inc', 'simport', 'simport.api');
      $i=0;
      foreach($old -> field_image as $file){
      //define full path to file
      $source = variable_get('simport_remote_path', '') . '/' . $file['filepath'];
      simport_node_add_imagefield_image($source, 'field_link_image', &$node, $i);
      
      //call api function to import the file into the node object!
      //simport_import_filefield_file($new, $path, $file, $i);
      $i++;  
      }
   } 
}


/**
 * Returns vocabulary information specific to site and content type
 * @param $sid- site id
 * @param $type- content type
 */
function simport_get_site_vocabularies($sid, $type){
  $vocabs = taxonomy_get_vocabularies($type);
 return $vocabs[$sid];
}

/**
 * Correlate old content types to new content types
 * NOT INCLUDING biblio or scholar_admin (biblio nodes to be handled seperately)
 */
function _simport_map_content_types(){

  $types = array(
  'scholar_link' => 'link',
  'scholar_blog' => 'blog',
  'scholar_announcement' => 'announcement',
  'scholar_bio' => 'page',
  'scholar_class' => 'scholar_class',

 /* 'scholar_class' => '', //doesn't exist yet on new scholars
  'scholar_cv' => '', //doesn't exist yet on new scholars
  'scholar_bio' => '', //should be page???
  'scholar_photo' => '', //old web site logo*/
  );

  return $types;
}