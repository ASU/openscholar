<?php

/**
 * Implementation of hook_menu()
 */
function simport_menu() { 

  $items['admin/settings/simport'] = array(
    'title' => 'Simport',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simport_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Simport Settings',
    'file' => 'simport.admin.inc',
  );

  return $items;
}

/**
 * Initial function to begin import script
 * @return unknown
 */
function simport_import(){ 
  
  //for testing purposes setting these system vars manually  
  variable_set('simport_current_path', '/nfs/www/edu-harvard-iq-scholar-dev3');
  variable_set('simport_remote_path', '/nfs/www/edu-harvard-iq-test2');
  variable_set('file_directory_path', 'sites/scholar-dev3.iq.harvard.edu/files');

  //PHASE 1 - Load the VSITE And Settings
 $testing = db_query("TRUNCATE TABLE {simport}"); //empty the table each time
 
  vsite_include('vsiteapi');
  $roles = variable_get('scholar_manager_role', 'scholar admin');

  //test one node
 // $sql = db_query("SELECT * FROM {scholar_export_data} WHERE id = %d AND type = '%s'", 136, 'admin_scholar');
  
  //first create the new vsites
  $sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s'", 'admin_scholar');
  while ($data = db_fetch_object($sql)) {

    //get the old site node object
    $old = unserialize($data ->data); 
   
    //define the domain for the new site
    $domain = $old -> title;

    //get old user object
    $user_old = unserialize(db_result(db_query("SELECT data from {scholar_export_data} WHERE type = '%s' AND id = %d", 'user', (int)$old ->uid)));

    //create new user based on the old user info
    $user = simport_create_user($user_old->name, $user_old->mail, $user_old->pass, $roles);

    //create new site
    $new_site_info = simport_create_site($user, $domain);

    //write to the simport table mapping old site to new site
    $sql_map_sites = db_query("INSERT INTO {simport} (old, new) VALUES (%d, %d)", (int)$old -> nid, (int)$new_site_info ->nid);

    //get a spaces object for new site so we can modify and save with the functions below
    $new = spaces_load ( 'og', $new_site_info ->nid, TRUE );

    //set theme
    simport_set_theme($old, $new);

    //set shield
    simport_set_shield($old, $new);

    //save all the changes/additions to the space
    spaces_save($new);
  }

  //PHASE 2 - Load And Save The Content

  //load content for each type
  $types = _simport_map_content_types();

  foreach ($types as $oldtype => $newtype){
    $sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s'", $oldtype);
    while ($data = db_fetch_object($sql)) {
      $old = unserialize($data ->data);
      $new = new stdClass();
       
      //set generic values
      simport_set_generic($old, $new);     
         
      //set taxonomy term values
       simport_set_terms($old, $new);

      //deal with any custom fields specific to the content type;
      switch ($old -> type){       
              
        case 'scholar_announcement':
          simport_set_announcement($old, $new);
          break;

          case 'scholar_bio':
                simport_set_page($old, $new); //import to page
                break;
                
          case 'scholar_page':
                simport_set_page($old, $new); //import to page also
                break;      

         case 'scholar_blog':
            //no blogs to import
              break;
          
        case 'scholar_link':
            simport_set_link($old, $new);
            break;  
          
       case 'scholar_class':
          simport_set_class($old, $new);
          break;    
       }
  
      //save the node
      node_save($new);
      
      //load the new node (to get the nid)
      $new_node = node_load( array(
        'type' => $new-> type,
        'created' => $new -> created,
        'changed' => $new -> changed,
        'uid' => $new -> uid,
    ) ); 
     
      //insert new and old node ids into simport table 
     db_query("INSERT INTO {simport} (old, new) VALUES (%d, %d)", (int)$old -> nid, (int)$new_node -> nid);
    }    
  }
  
  //PHASE 3 - Set The logo
   //$sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s' AND id = %d", 'scholar_photo', 4);
  $sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s'", 'scholar_photo');
  while($data = db_fetch_object($sql)){
    $old = unserialize($data -> data);
    if($old -> field_photo[0]['fid'] > 0){
      simport_set_logo($old);
    }
  }
  
  //PHASE 4 - Set The Front Page
  //loop thorugh all the admin_scholar types now that all nodes have been imported
  
  $sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s'", 'admin_scholar');
  while($data = db_fetch_object($sql)){

    //get the old site node object
    $old = unserialize($data ->data);

    if ($old->scholar_admin_site_front_node){
      //load the new vsite
      $vsite = simport_get_new_vsite($old -> nid);

      //lget the new frontpage nid
      $new_front_nid =  simport_get_new_nid($old->scholar_admin_site_front_node);

      //set frontpage value after content created
      simport_set_frontpage($old, $vsite, $new_front_nid, $old->scholar_admin_site_front_node);

      //save the vsite settings for front page
      spaces_save($vsite);
    }
  }
  
  //PHASE 5 - import the files
 simport_get_files(); 
  
}

/**
 * Create the user
 */
function simport_create_user($name, $mail, $password_hash, $roles){
  install_include(array( 'user' ));
  $password =  user_password();
  $user = install_add_user($name, $password, $mail, $roles = array($roles), $status = 1);

  if (!$user){
    //TODO: add watchdog message
    //watchdog();
  }

  else{
    //change the password back to the original
    $sql_revert_password = db_query("UPDATE {users} SET pass = '%s' WHERE uid = %d", $password_hash, (int)$user ->uid);
  }
  //return the new user object
  return $user;
}

/**
 * Create the site
 */
function simport_create_site($user, $domain){
  vsite_include('vsiteapi');
  //create the site
  return vsite_vsite_create($user->name, $user->mail, $domain);
}

/**
 * 
 * @param $old og node from the old site
 * @param $new the new vsite
 */
function simport_set_theme($old, &$new){

  $og_theme_map = array(
  'fac01' => 'scholar_theme_06',
  'fac02' => 'scholar_theme_01',
  'fac03' =>'scholar_theme_03',
  'fac04' => 'scholar_theme_06',
  'fac05' => 'scholar_theme_05',
  'fac06' => 'scholar_theme_04',
  'fac07' => 'scholar_theme_07',
  );
  //set the new theme
  $new->settings['theme'] = $og_theme_map[$old -> og_theme];
}

/**
 * Set the frontpage value
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_frontpage($old, &$vsite, $new_front_nid, $old_front_nid){ 
  //get the old frontpage node
  $old_frontpage = simport_get_old_node($old_front_nid);

  if ( $old_frontpage  -> type == 'scholar_bio'){
  $vsite->settings['bio']['nid'] = $new_front_nid; 
  $vsite->settings['front']['frontpage']= 'bio'; 
  }
  else{
  $vsite->settings['front']['frontpage']= _simport_map_content_types($$old_frontpage  -> type);
  }
}

/**
 * Transfer the logo
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_logo($old){
  //get the corresponding vsite
  $vsite = simport_get_new_vsite($old -> og_groups[0]);
  
  //not sure if this is nessary, should always be true
    $file = $old -> field_photo[0];
    
    if ($file['filepath']){
    //define source and destination directories
    $source = variable_get('simport_remote_path', '') . '/' .  $file['filepath']; 
    }
    
    else{
      //no filepath defined means this will not work, so return
      watchdog('simport', 'logo filepath not present %title.', array('%title' => $file['title']), WATCHDOG_NOTICE);
      return;
    }
    
    if (file_exists($source)){
    
    $dest = variable_get('simport_current_path', '') . '/' . variable_get('file_directory_path', '') . '/vsite_design_logo/' . $vsite ->title;
    
      //create directory  
    file_check_directory($dest, $mode = 1, $form_item = NULL);
         
    //copy the file to the new location
    file_copy($source, $dest, $replace = FILE_EXISTS_REPLACE);

    //replacing the file name but keeping file ext
    $filename = explode('.', basename($source)); 
    $new_filename = $vsite ->title . '.' . $filename[1];
   
    //define new file - absolute path
    $new_file = $dest . '/' . $new_filename;
   
    //rename the file
    file_move($source, $new_file );    
    
    //define new path for logo
    $new_path = variable_get('file_directory_path', '') . '/vsite_design_logo/' . $vsite ->title . '/' . basename($new_file);
    
    $file = new stdClass();
    $file -> uid = $vsite-> group -> uid;
    $file -> filename = basename($new_file);
    $file -> filepath = dirname($new_path);
    $file -> filemime = file_get_mimetype($new_file);
    $file -> filesize = filesize($new_file);
    $file -> status =1;
    $file -> timestamp = filemtime($new_file);
    
    //write to the files table
    drupal_write_record('files', $file);
    
    
    //now set in the vsite settings
    $vsite ->settings['logo']['current_logo'] = $new_path;
    //save the vsite settings
    spaces_save($vsite);
    }
    else{
      watchdog('simport', 'logo file does not exist in source location:  %title.', array('%title' => $file['title']), WATCHDOG_NOTICE);
    }
    return;
}

/**
 * Set the shield selection
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_shield($old, &$new){
  //all D5 site themes use the same shield - TODO: maybe not shepsle and bates sites???
  //shield setting now offered on old site, so set sheild to default
  $new ->settings['sheild'] = drupal_get_path('module','vsite_design')."/theme/shields/harvard_shield.png";
}

/**
 * Import the terms to the proper vocabulary and set them in the node object
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_terms($old, &$new){ 
  vsite_include('vsiteapi');
  //check to see of any terms are set in old node
  if (count($old -> tags)){
    $vsite = simport_get_new_vsite($old -> og_groups[0]);

    foreach($old -> tags as $vocab_id => $values){
      //NOTE: vocab id 6 is the global vocabularyon the D5 scholars site

      if ($vocab_id == '6'){
        //store the array information in a property called global_taxonomy for use later
        $new -> global_taxonomy = $values;
      }

      else{
        foreach($values as $old_term){
          //get vocab(s) for the vsite
          $vocab_list = vsite_get_vocabs($vsite, $new -> type);

          foreach($vocab_list as $vocab){
    
          $term['vid'] = $vocab -> vid;
          $term['name'] = $old_term -> name;
          $term['description'] = empty($old_term -> description) ? NULL : $old_term -> description;
          //$term['weight'] = mt_rand(0,10);
         
          $status = taxonomy_save_term($term);
         
          if ($status){
            //get the newly created term id. TODO: is this the best way???
            $tid = db_last_insert_id('term_data', 'tid');
          }
          //now add the terms to the $new node object
          $new -> taxonomy[$vocab -> vid] = array($tid);
          }
        }
      }
    }
  }
}

/**
 * Pass it the old site nid and it returns current vsite object
 */
function simport_get_new_vsite($old_site_nid){
  $space_new = db_result(db_query("SELECT new FROM {simport} WHERE old = %d", $old_site_nid));
  $vsite = spaces_load ( 'og', $space_new, TRUE );
  return $vsite;
}


/**
 * Pass it the old nid and it returns current nid
 */
function simport_get_new_nid($old_nid){
  return db_result(db_query("SELECT new FROM {simport} WHERE old = %d", $old_nid));
}

/**
 * Returns old NODE information
 *
 * @param unknown_type $nid
 * @return unknown
 */
function simport_get_old_node($nid){
  $data = db_result(db_query("SELECT data FROM {scholar_export_data} WHERE id  = %d AND type != '%s'", (int)$nid, 'user'));
  return unserialize($data);
}

/**
 * Returns old USER information
 *
 * @param unknown_type $nid
 * @return unknown
 */
function simport_get_old_user($uid){
  $data = db_result(db_query("SELECT data FROM {scholar_export_data} WHERE id  = %d AND type = '%s'", (int)$uid, 'user'));
  return unserialize($data);
}


function simport_set_generic($old, &$new){

 $vsite = simport_get_new_vsite($old -> og_groups[0]);

  //set the generic node data
  $new -> title = $old -> title;
  $new -> type = _simport_map_content_types($old -> type);
  $new -> status = $old -> status;
  $new -> created = $old -> created;
  $new -> changed = $old -> changed;
  $new->promote = $old ->promote;
  $new->sticky = $old ->sticky;
  $new->format = isset($old ->format)? $old ->format : 0; // Filtered HTML . check d5
  $new->language = 'en';
  $new -> uid = $vsite -> group -> uid;
  $new -> name = $vsite -> group -> name;
  $new -> og_groups[$vsite -> group -> nid] = $vsite -> group -> nid; //double check on this
  $new -> og_groups_both[$vsite -> group -> nid] = $vsite -> group -> name;
}

function simport_set_announcement($old, &$new){  
  //no custom fields
  $new -> body = $old -> body;
}

function simport_set_page($old, &$new){  
  //no custom fields
  $new -> body = $old -> body;
}

function simport_set_class($old, &$new){ 
  
   $new -> body = $old -> body;
  
  //TODO: These 3 fields do NOT EXIST YET. Change them accordinly once they are created.
  //set year
  if(!empty($old ->field_scholar_year[0]['value'])){
    $new -> field_class_year[0]['value'] = $old ->field_scholar_year[0]['value'];
  }

  //set semester
  if(!empty($old ->field_scholar_semester[0]['value'])){
    $new -> field_class_semester[0]['value'] = $old ->field_scholar_semester[0]['value'];
  }
}

function simport_set_link($old, &$new){ 
  //set the link
  if (!empty($old -> field_link[0]['url'])){
    $new -> field_link_href[0]['url'] = $old -> field_link[0]['url'];
  }  
}

/**
 * Save files after nodes have been saved
 */
function simport_get_files(){
  module_load_include('inc', 'simport', 'simport.api');

  //list of old types => filefield that have files
  $types = array(
  'scholar_link',
  );

  foreach ($types as $type) {
    $sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s'", $type);
    //$sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s' AND id = %d", $type, 26);
    while ($data = db_fetch_object($sql)){
      //get the old site node object
      $old = unserialize($data ->data);

      switch($data -> type){

        case 'scholar_link':
          //check if file(s) exist
          if ($old -> field_image[0]['fid'] > 0){
            
            //load the new node
            $node = node_load(simport_get_new_nid(array('nid' => $old -> nid)));
            //load the vsite
            $vsite =  spaces_load ( 'og', key($node -> og_groups), TRUE );

            foreach($old -> field_image as $old_file){
              //define full path to file
              $source = variable_get('simport_remote_path', '') . '/' . $old_file['filepath'];
              
              //unset old info for fid and nid
              unset($old_file['nid']);
              unset($old_file['fid']);

             //call api function to import file
              $file = simport_import_file(&$node, $source, (object)$old_file, $vsite);
              
              //If file had description text add it here
             $file->description =  isset($old_file -> description) ? $old_file -> description : $file -> filename; 
             $file->list = 1;
                  
              // upload_save($node);
               
              //taken from upload_save()
              db_query("INSERT INTO {upload} (fid, nid, vid, list, description, weight) VALUES (%d, %d, %d, %d, '%s', %d)", $file->fid, $node->nid, $node->vid, $file->list, $file->description, $file->weight);
      file_set_status($file, FILE_STATUS_PERMANENT);
      
      
              //not using filefield anymore - no longer called
             // simport_node_add_imagefield_image($source, 'field_link_image', $node);
            }
          }
          break;
      }
    }
  }
}

/**
 * Returns vocabulary information specific to site and content type
 * @param $sid- site id
 * @param $type- content type
 */
function simport_get_site_vocabularies($sid, $type){
  $vocabs = taxonomy_get_vocabularies($type);
 return $vocabs[$sid];
}

/**
 * Correlate old content types to new content types
 * NOT INCLUDING biblio or scholar_admin (biblio nodes to be handled seperately)
 */
function _simport_map_content_types($old_type = NULL){

  $types = array(
  'scholar_link' => 'link',
  'scholar_announcement' => 'announcement',
  'scholar_bio' => 'page',
  'scholar_class' => 'class',
  'scholar_page' => 'page',  //both scholar_bio and scholar_page import to page
 
/*
  'scholar_cv' => '', //ONLY 1 Submit it manually
  'scholar_photo' => '', //already dealt with in simport_set_logo()
 */
  ); 
  
  if ($old_type){    
    return $types[$old_type];
  }
  return $types;
}

