<?php


/**
 * Initial function to being import script
 * @return unknown
 */
function simport_import(){
  vsite_include('vsiteapi');
  $roles = variable_get('scholar_manager_role', 'scholar admin');
  $old_sites_table = 'node_export_admin_scholar';

  //first create the new vsites
  $sql = db_query("SELECT * FROM {scholar_export_data} WHERE type = '%s'", 'admin_scholar');
  while ($data = db_fetch_object($sql)) {
   
      //get the old site node object
      $old = unserialize($data ->data); dpm($old); 
      return false;
  
    
      //set the domain for the new site
  	$domain = $old -> title;
  
 	//get old user object
  	$user_old = unserialize(db_result(db_query("SELECT data from {scholar_export_data} WHERE type = '%s' AND id = %d", 'user', (int)$old ->uid)));
  
  	//create new user based on the old user info
  	$user = simport_create_user($user_old->name, $user_old->mail, $user_old->pass, $roles);
  	 	 	
  	//create new site 
  	$new_site_info = simport_create_site($user, $domain);
  	
  	//write to the simport table mapping old site to new site
  	$sql_map_sites = db_query("INSERT INTO {simport} (old, new) VALUES (%d, %d)", (int)$old -> nid, (int)$new_site_info ->nid);
  	
  	//get a spaces object for new site so we can modify and save with the functions below
  	$new = spaces_load ( 'og', $new_site_info ->nid, TRUE );
  	
  	dpm($old);
   	
  	//set theme
  	simport_set_theme($old, $new);
  	 	 	
      //set logo
  	simport_set_logo($old, $new);
  	
  	
  	
      //just iterate once for testing purposes - REMOVE THIS WHEN DONE TESTING
     // return false;
      
      //save all the changes/additions to the space
      spaces_save($new);
  }
  return false;
  
  $types = simport_map_types();  
  
    //loading each content type
    /*$types =vsite_content_types();
       //temp to test - should be removed
       $types = array('link');
      foreach ($types as $type){
        $table = 'node_export_scholar_' . $type;
        $sql = db_query("SELECT * FROM {$table}");
        while ($data = db_fetch_object($sql)) {
           $old = unserialize($data ->data);
           $new = new stdClass();    	
        }
      }*/
    
    
    
    //set frontpage last
  	simport_set_frontpage($old, $new);
}

/**
 * Correlate old content types to new content types
 * NOT INCLUDING biblio (biblio nodes to be handled seperately)
 */
function simport_map_types(){

  $type_map = array(
  'admin_scholar' => 'scholarsite',
  'scholar_link' => 'link',
  'scholar_blog' => 'blog',
  'scholar_announcement' => 'announcement',

  'scholar_class' => '', //doesn't exist yet on new scholars
  'scholar_cv' => '', //doesn't exist yet on new scholars
  'scholar_bio' => '', //should be page???
  'scholar_photo' => '', //old web site logo
  );

  return $type_map;
}

/**
 * Create the user
 */
function simport_create_user($name, $mail, $password_hash, $roles){
  install_include(array( 'user' ));  
  $password =  user_password();
  $user = install_add_user($name, $password, $mail, $roles = array($roles), $status = 1);

  if (!$user){
    //TODO: add watchdog message
    //watchdog();
    }
    
  else{
    //change the password back to the original
    $sql_revert_password = db_query("UPDATE {users} SET pass = '%s' WHERE uid = %d", $password_hash, (int)$user ->uid);
  } 
  //return the new user object
  return $user;
}

/**
 * Create the site
 */
function simport_create_site($user, $domain){
  vsite_include('vsiteapi');
  //create the site
  return vsite_vsite_create($user->name, $user->mail, $domain);
}

/**
 * 
 * @param $old og node from the old site
 * @param $new the new vsite
 */
function simport_set_theme($old, &$new){
  
  $og_theme_map = array(
  'fac01' => 'scholar_theme_06',
  'fac02' => 'scholar_theme_01',
  'fac03' =>'scholar_theme_03',
  'fac04' => 'scholar_theme_06',
  'fac05' => 'scholar_theme_05',
  'fac06' => 'scholar_theme_04',
  'fac07' => 'scholar_theme_07',  
  );
  //set the new theme
  $new->settings['theme'] = $og_theme_map[$old -> og_theme];
}

/**
 * Set the frontpage value
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_frontpage($old, &$new){

  //if true then, a node was set as front page on D5 scholar site
if ($old->scholar_admin_site_front_node){
  $new->settings['front']['frontpage'] = 'bio';
  
  }

else{
    
}
 //TODO: Not sure yet how to deal with this???
 $new->settings['front']['frontpage'] =  '';  //$frontpage;
}

/**
 * Transfer the logo
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_logo($old, &$new){

  if (!empty($old->logo)){
    
    //match the "img src" part in the $old -> logo string
    $pattern = "/img[ ]+src=[\"' ]?([^\"' >]+)[\"' ]?[^>]*>/i";
    preg_match($pattern, $logo, $matches);
    $url = parse_url($matches[1]);

    $src_path = '/nfs/www/edu-harvard-iq-scholar/';
    
    //get path and remove slash at begining if present
    $src_path .= (strpos($url['path'], '/') == 0 ) ? substr($url['path'], 1) : $url['path'];
   
    //set destination path -- TODO: FIND THE DEST CORRECT PATH LOCATION / CONVENTION
    $dest_path = '/nfs/www/edu-harvard-iq-scholar-dev3/' . variable_get('file_directory_path', '') .  '/' . $old -> title . '/';
    
    //copy the file to the new location
    file_copy(&$src_path, $dest_path, $replace = FILE_EXISTS_REPLACE);

    //define new file - absolute path
    $new_file = dirname($src_path . '/' . $old -> title . '.' . 'jpg');
    
    //rename the file
    rename($src_path, $new_file );
    
    //now set in the vsite settings
    $new->logo['current_logo'] = variable_get('file_directory_path', '') . '/vsite_design_logo/' . $old ->title . '/' . basename($new_file);
  }
}

/**
 * Set the shield selection
 *
 * @param unknown_type $old
 * @param unknown_type $new
 */
function simport_set_shield($old, &$new){
  //ALL OF THE D5 SITES ARE USING SAME SHEILD - TODO: maybe not shepsle and bates sites???
  //shield setting now offered on old site, so set sheild to default
  $new ->settings['sheild'] = drupal_get_path('module','vsite_design')."/theme/shields/harvard_shield.png";
}

function simport_set_vocabs($old, &$new){
  
  
}



