<?php

function scholarregister_menu(){
  $items = array();
  $items['site/register'] = array(
    'title' => 'Create your web site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholarregister_signup_form'),
    'file' => 'scholarregister.pages.inc',
    'access arguments' => array('access content'),
  );

  $items['scholarregister/domain_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_domain_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['scholarregister/mail_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_mail_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );


  $items['scholarregister/name_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_name_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * ajax callback for name
 */
function scholarregister_name_js() {
  $name = $_POST ['ctools_changed'];

  if ($error = scholarregister_validate_name($name)){
    scholarregister_ctools_message('#name-suffix', $error, 'error'); 
  }

  // username is available
  scholarregister_ctools_message('#name-suffix', "available", 'status'); 
}

/**
 * ajax callback for mail
 */
function scholarregister_mail_js() {
  $mail = $_POST['ctools_changed'];
  if ($error = scholarregister_validate_mail($mail)){
    scholarregister_ctools_message('#mail-suffix', $error, 'error'); 
  }

  scholarregister_ctools_message('#mail-suffix', $message, 'status'); 
}

/**
 * ajax callback for domain
 */
function scholarregister_domain_js() {
  $domain = $_POST['ctools_changed'];

  if ($error = scholarregister_validate_domain($domain)){
    scholarregister_ctools_message('#domain-suffix', $error, 'error'); 
  }
  // ok then .. it's good and available
  scholarregister_ctools_message('#domain-suffix', "available", 'status'); // exits
}



function scholarregister_validate_name($name){
  if ($error = user_validate_name($name)){
    return $error;
  }
  elseif (_scholarregister_domain_exists($name) || _scholarregister_name_exists($name)){
    return "username \"$name\" is taken";
  }
}

/**
 * email validation function
 * @param $mail
 */
function scholarregister_validate_mail($mail) {
  // Validate the e-mail address:
  if ($error = user_validate_mail($mail)) {
    return $error;
  }
  elseif (_scholarregister_mail_exists($mail)){
    return "e-mail \"$mail\" already exists";
  }
}

function scholarregister_validate_domain($domain){
  if ($error = user_validate_name($domain)){  // the same validation as the username
    return $error;
  }
  elseif (_scholarregister_domain_exists($domain) || _scholarregister_name_exists($domain)){
    return "domain \"$domain\" is taken";
  }
}


/**
 * wrapper function for executing ajax commands
 * @param $id  the html selector (id)
 * @param $message the message to insert on the div with id=$id
 * @param $class  the class to apply to the div
 */
function scholarregister_ctools_message($id, $message, $class = 'error'){
  ctools_include ( 'ajax' );
  ctools_add_js ( 'ajax-responder' );
  $commands = array ();
  $commands [] = ctools_ajax_command_html ( $id, $message);
  $commands [] = ctools_ajax_command_attr($id, 'class', $class);
  ctools_ajax_render ( $commands );
}

/**
 *  hook nodeapi 
 *  Need to take some actions when a new vsite is created
 */
function scholarregister_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      if ($node-> type == variable_get('scholar_content_type', 'scholarsite')) {
		// Features implement their own default taxonomies 
        $taxs = module_invoke_all('scholar_vocabulary_defaults');
        $new_taxs = $taxs;
        install_include(array('taxonomy'));
        foreach($taxs as $yindex => $tax) {
          // make the vocab name unique
          $new_taxs[$yindex]['name'] = $node -> purl['value'] . '_' . $tax['name'];
        }
        // create vocabs
        scholarvocab_taxonomy_import($node -> nid, $new_taxs);
      }
      break;
  }
}

function scholarregister_notify_user($vsite, $user){
  global $language;
  $params = array();
  $from = variable_get('site_mail', ini_get('sendmail_from'));
  
  $params['subject'] = t('[!site_name] We have created an account for you', array(
      '!site_name' => variable_get('site_name', 'Scholar\'s Web Sites Project') 
  ));
  $variables = array(
      '!name' => $user -> name, 
      '!site' => variable_get('site_name', 'Scholar\'s Web Sites Project'), 
      '!login_url' => user_pass_reset_url($user) . '/login', 
      '!url' => trim(url('<front>', array(
          'absolute' => TRUE 
      )), '/'), 
      '!password' => $user -> pass,
  );

    $body .= t("\nHello !name,\n", $variables);

  // @todo: Would love to use one time login link here - alas it is only valid for 24 hrs and needs to be renewed then.
  $body .= t("\nWe have created an account for you on !site\n!url.\n\nYou can log in to the site with the following username and password\n\n!name\n!password\n\nPlease change your password after the first time you log in.\n\nWelcome to !site", $variables);
  // Put the completed $body in the $params array for hook_mail
  $params['body'] = $body;
  if (! drupal_mail('scholarregister', 'scholar-register-notify', $user -> mail, $language, $params, $from)) {
    //drupal_set_message(t('Error sending notification mail to user.'), 'error');
  }

}


function scholarregister_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];
}


/** Private functions **/

function _scholarregister_domain_exists($domain){
  // check domain availability
  $query = "SELECT value FROM {purl} WHERE value='%s'";
  $existing_purl = db_result(db_query($query, $domain));

  return $existing_purl ? TRUE : FALSE;
}

function _scholarregister_name_exists($name){
  // check domain availability
  $query = "SELECT name FROM {users} WHERE name='%s'";
  $existing_name = db_result(db_query($query, $name));

  return $existing_name ? TRUE : FALSE;
}

function _scholarregister_mail_exists($mail){
  // check domain availability
  $query = "SELECT mail FROM {users} WHERE mail='%s'";
  $existing_mail = db_result(db_query($query, $mail));

  return $existing_mail ? TRUE : FALSE;
}

