<?php


function scholarregister_init(){
   drupal_add_css(drupal_get_path('module', 'scholarregister') .'/theme/scholarregister.css');
   }


function scholarregister_menu(){
  $items = array();
  $items['site/register'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_register',
    //'page arguments' => array('scholarregister_signup_form'),
    'file' => 'scholarregister.pages.inc',
    'access arguments' => array('access content'),
  );

  $items['scholarregister/domain_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_domain_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['scholarregister/mail_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_mail_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );


  $items['scholarregister/name_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_name_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * the callback for site/register menu
 */
function  scholarregister_register() {
  drupal_add_css ( drupal_get_path ( 'module', 'scholarregister' ) . '/scholarregister.css' );
  ctools_include('modal');
  ctools_include('form');
  ctools_include('ajax');
  $form_state = array(
    '#ajax' => TRUE,
    '#redirect' => FALSE,
  );
  $output .= ctools_modal_form_wrapper('scholarregister_signup_form', &$form_state);
  //$output .= drupal_get_form ( 'scholarregister_signup_form' );

  // we can just return the $output or, if we want to not print
  // blocks etc., use theme_page(..., FALSE) see phptemplate.engine


  //return $output;
  print theme ( 'page', $output, FALSE );
}

/**
 * ajax callback for username
 */
function scholarregister_name_js() {
  $name = $_POST ['ctools_changed'];

  scholarregister_validate_name_or_domain($name, $mode = 'username');
  //scholarregister_validate_name($name); // if it fails it will exit (ctools)

  // ok then .. it's good and available
  $message = 'available';
  scholarregister_ctools_message('#username-suffix', $message, 'status'); // exits
}

/**
 * ajax callback for email
 */
function scholarregister_mail_js() {
  $mail = $_POST['ctools_changed'];
  scholarregister_validate_mail($mail);

  // ok then .. it's good and available
  $message = 'available';
  scholarregister_ctools_message('#email-suffix', $message, 'status'); // exits
}

/**
 * ajax callback for domain
 */
function scholarregister_domain_js() {
  $domain = $_POST['ctools_changed'];

  scholarregister_validate_name_or_domain($domain, $mode = 'domain');
  // ok then .. it's good and available
  $message = 'available';
  scholarregister_ctools_message('#domain-suffix', $message, 'status'); // exits
}


/**
 * email validation function
 * @param $mail
 */
function scholarregister_validate_mail($mail) {
  // Validate the e-mail address:
  if ($error = user_validate_mail($mail)) {
    scholarregister_ctools_message('#email-suffix', $error); // exits
  }
}


/**
 * validation function for username and domain name (the same !)
 * @param $str
 * @param $mode
 */

function scholarregister_validate_name_or_domain($str, $mode = 'domain'){
  // first check if domain name / username is valid.
  // Use the user_validate_name function for convenience

  if ($error = user_validate_name($str)) {
    scholarregister_ctools_message("#$mode-suffix", $error, 'error'); // exits
  }

  // check domain availability
  $query = "SELECT value FROM {purl} WHERE value='%s'";
  $existing_purl = db_result(db_query($query, $str));

  if ($existing_purl) {
     scholarregister_ctools_message("#$mode-suffix", "$mode taken", 'error'); // exits
  }

}


/**
 * wrapper function for executing ajax commands
 * @param $id  the html selector (id)
 * @param $message the message to insert on the div with id=$id
 * @param $class  the class to apply to the div
 */
function scholarregister_ctools_message($id, $message, $class = 'error'){
  ctools_include ( 'ajax' );
  ctools_add_js ( 'ajax-responder' );
  $commands = array ();
  $commands [] = ctools_ajax_command_html ( $id, $message);
  $commands [] = ctools_ajax_command_attr($id, 'class', $class);
  ctools_ajax_render ( $commands );
}


function scholarregister_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      if ($node-> type == variable_get('scholar_content_type', 'scholarsite')) {
		// categories
        $taxs = module_invoke_all('scholar_vocabulary_defaults');
        $new_taxs = $taxs;
       // $index = 0;
        install_include(array('taxonomy'));
        foreach($taxs as $yindex => $tax) {
          // make the vocab name unique
          $new_taxs[$yindex]['name'] = $node -> purl['value'] . '_' . $tax['name'];
        }
        // create vocabs
        scholarvocab_taxonomy_import($node -> nid, $new_taxs);
      }
      break;
  }
}


