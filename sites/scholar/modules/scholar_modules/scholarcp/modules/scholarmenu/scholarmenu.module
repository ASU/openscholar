<?php

function scholarmenu_init(){
   drupal_add_css(drupal_get_path('module', 'scholarmenu') .'/theme/scholarmenu.css');
   }

/**
 * Implements hook_menu_node_insert().
 */
function scholarmenu_menu_node_insert($item, $node) {
  require_once(drupal_get_path('module', 'scholarmenu') .'/scholarmenu.menus.inc');
  scholar_include('scholarapi');
  $site = scholar_get_scholar();
  $a_scholar_types = scholar_content_types();
  
  if($site && array_key_exists($node->type,$a_scholar_types) && ($item->menu_name == variable_get('scholar_primary_menu',false) || $item->menu_name == variable_get('scholar_secondary_menu',false))){
    
    $s_menu_key = $item->menu_name == variable_get('scholar_primary_menu',false)?'primary':'secondary';
    
    $site->settings['menus']['menu_items'][$item->mlid] = array('menu' => $s_menu_key, 'weight' => $item->weight);
    
    $site->settings['menus'] = scholarmenu_menus::create_menus($site->settings['menus']); 
    
    spaces_save($site);
  }elseif ($site && array_key_exists($item->mlid,$site->settings['menus']['menu_items'])){
    unset($site->settings['menus']['menu_items'][$item->mlid]);
    $site->settings['menus'] = scholarmenu_menus::create_menus($site->settings['menus']); 
    spaces_save($site);
  }
}

/**
 * Implements hook_menu_node_update().
 */
function scholarmenu_menu_node_update($item, $node) {
  scholarmenu_menu_node_insert($item,$node);
}

/**
 * Implements hook_menu_node_delete().
 */
function scholarmenu_menu_node_delete($item, $node) {
  require_once(drupal_get_path('module', 'scholarmenu') .'/scholarmenu.menus.inc');
  scholar_include('scholarapi');
  $site = scholar_get_scholar();
  $a_scholar_types = scholar_content_types();
  
  if ($site && array_key_exists($node->type,$a_scholar_types) && array_key_exists($item->mlid,$site->settings['menus']['menu_items'])){
    unset($site->settings['menus']['menu_items'][$item->mlid]);
    $site->settings['menus'] = scholarmenu_menus::create_menus($site->settings['menus']); 
    spaces_save($site);
  }
}

/**
 * Return the menu tree object for a scholar site, adapted for the current page
 *
 * @param string $s_menu  (primary / secondary)
 * @param boolean $b_html (return formated html?)
 * @param boolean $b_check_expanded (allow expanded menus? slightly slower)
 */
function scholarmenu_get_menu_tree($s_menu = 'primary', $b_html = true, $b_check_expanded = false){
  $space = scholar_get_scholar();
  
  if(!$space) return ($b_html)?"":false;
  
  switch ($s_menu){
    case 'secondary':
      $a_settings_menu = array_key_exists('menus',$space->settings)?$space->settings['menus']['secondary']:false;
      $s_def_menu = 'scholar_secondary_menu';
    break;
    case 'primary':
    default:
      $a_settings_menu = array_key_exists('menus',$space->settings)?$space->settings['menus']['primary']:false;
      $s_def_menu = 'scholar_primary_menu';
  }
  
  if(!$a_settings_menu) return menu_tree( variable_get( $s_def_menu ,false) );
  $n_found = 0;   
  
  if($b_check_expanded){
    $a_full_page_expanded = array_merge( menu_tree_page_data(variable_get('scholar_primary_menu',false)), 
                                         menu_tree_page_data(variable_get('scholar_secondary_menu',false)));
                                        
    //We must unfortunatly loop through the page data once to get the
    //correct expanded trees, the menu module does not provide an easy
    //way of retrieving a individual menu_node's tree (expanded)
    foreach ($a_full_page_expanded as $a_tree) {
      if(!in_array($a_tree['link']['mlid'],$a_settings_menu)) continue;
      $n_found++;
      $a_settings_menu[array_search($a_tree['link']['mlid'],$a_settings_menu)] = $a_tree;
      if($n_found >= count($a_settings_menu)) break;
      break;
    }
  }
  
  if($n_found < count($a_settings_menu)){
    foreach ($a_settings_menu as $n_key => $n_mlid) {
      if(!is_int($n_mlid)) continue;
      $a_settings_menu[$n_key] = array('link' => menu_link_load($n_mlid), 'below' => false);
    }
  }
  
  
  if(!$b_html) return $a_settings_menu;
  
  return menu_tree_output($a_settings_menu);
}

/**
 * Implementation of hook_theme().
 */
function scholarmenu_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'scholarmenu') ;
  
  $items['scholarmenu_radios'] = array(
    'arguments' => array('element' => NULL),
    'path' => $path,
    'file' => 'menu_theme.inc',
  );
  
  return $items;
}

function scholarmenu_form_alter(&$form, $form_state, $form_id){
  scholar_include('scholarapi');
  $a_scholar_types = scholar_content_types();
  $o_scholar = scholar_get_scholar();
  
  if($o_scholar && array_key_exists($form['type']['#value'],$a_scholar_types)){
    $a_primary = menu_load(variable_get('scholar_primary_menu',false));
    $a_secondary = menu_load(variable_get('scholar_secondary_menu',false));
      
    $form['menu']['parent']['#options'] = array(
      variable_get('scholar_primary_menu',false).":0" => t($a_primary['title']),
      variable_get('scholar_secondary_menu',false).":0" => t($a_secondary['title']),
    );
    unset($form['menu']['hidden']);
  }
}

/**
 * Iplementation of hook block
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 */
function scholarmenu_block($op = 'list', $delta = 0, $edit = array()) {
  if(!user_access('access content')) return;
  
  $blocks = array();
  if ($op == 'list') {
    $blocks[] = array('info' => t('Scholar primary menu'),
                      'cache' => BLOCK_CACHE_PER_PAGE); 
    $blocks[] = array('info' => t('Scholar secondary menu'),
                      'cache' => BLOCK_CACHE_PER_PAGE);  
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        return scholarmenu_get_menu_tree('primary');
      case 1:
        return scholarmenu_get_menu_tree('secondary');
    }
  }
}

