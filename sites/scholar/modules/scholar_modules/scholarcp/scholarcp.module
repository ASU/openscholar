<?php
define('CPTHEME', 'scholar_admin');

function scholarcp_init(){
   // TODO We can get the active space here. 
   // add this only if in active space + user is admin of space + users wants the toolbar anywhere
   drupal_add_css(drupal_get_path('module', 'scholarcp') .'/theme/scholarcp-toolbar.css');

  // initialize the scholarcp theme.
  if (arg(0) == 'scholarcp'){
  	_scholarcp_init_theme();
  } else {
  	$space = spaces_get_space();
  	if ($space -> type == 'og'){
  		og_set_theme($space -> group);
  	}
  }
}


/**
 * Implementation of hook_spaces_settings().
 */
function scholarcp_spaces_settings() {
  return array(
    'theme' => array(
      'class' => 'scholarcp_setting_theme',
      'file' => drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.theme.inc',
    ),
    'front' => array(
      'class' => 'scholarcp_setting_front',
      'file' => drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.front.inc',
    ),
    'bio' => array(
      'class' => 'scholarcp_setting_bio',
      'file' => drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.bio.inc',
    ),
    'menus' => array(
      'class' => 'scholarmenu_menus',
      'file' => drupal_get_path('module', 'scholarmenu') .'/scholarmenu.menus.inc',
    ),
  );
}

/**
 * Implementation of hook_views_api().
 */
function scholarcp_views_api() {
  return array(
    'api' => 2,
  );
}


function scholarcp_menu(){
	$spaces_path = drupal_get_path('module', 'spaces');
  //$items = spaces_active_space_menu('og', FALSE, 'scholarcp/settings');

  $items = array();
  
  $items['scholarcp/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'scholarcp_cp',
  );

    
  $items["scholarcp/settings/features"] = array(
    'title' => 'Features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_features_form'),
    //'access callback' => 'spaces_admin_access',
    //'access arguments' => array('og', 'features'),
    'file' => 'spaces_admin.inc',
    'file path' => $spaces_path,
    'weight' => 1,
  );
  
  $items["scholarcp/settings/features/%"] = array(
    'title' => 'Features',
    'page callback' => 'schlarcp_feature_customize',
    'page arguments' => array(3),
    //'page callback' => 'drupal_get_form',
    //'page arguments' => array('spaces_customize_form', NULL, 3),
    'file' => 'spaces_admin.inc',
    'file path' => $spaces_path,
    'weight' => 1,
  );

  // content
  // TODO fix its not working: trying to make the children menu as local task
  $items['scholarcp/content'] = array(
    'title' => 'Content',
	'page callback' => 'scholarcp_content', 	 
    'file' => 'scholarcp.content.inc',
    'file path' => drupal_get_path('module', 'scholarcp'). '/includes', 
  );

  $items['scholarcp/content/all'] = array( 	 
    'title' => 'All',
    'type' => MENU_DEFAULT_LOCAL_TASK,	 
    'file' => 'scholarcp.content.inc',
    'file path' => drupal_get_path('module', 'scholarcp'). '/includes', 	 
	);
  
  // a menu entry for each content type
  scholar_include('scholarapi');
  $content_types = scholar_content_types();
  foreach($content_types as $type => $name){
    $items['scholarcp/content/'.$type] = array(
      'title' => $name,
    	'type' => MENU_LOCAL_TASK,	
      'page callback' => 'scholarcp_content',
      'page arguments' => array($type, $name),
    );    
  }
  
  $items['scholarcp/users'] = array(
    'title' => 'Users',
    'page callback' => 'scholarcp_cp',
    'file' => 'scholarcp.users.inc',
    'file path' => drupal_get_path('module', 'scholarcp'). '/includes', 
  );
  
  $items['scholarcp/users/members'] = array(
    'title' => 'Members',
    'page callback' => 'scholarcp_user_members',
    'access arguments' => array('access content'),
    'file' => 'scholarcp.users.inc',
    'file path' => drupal_get_path('module', 'scholarcp'). '/includes', 
  );

  $items['scholarcp/news'] = array(
    'title' => 'News',
    'page callback' => 'scholarcp_cp',
  ); 
  
  $items['scholarcp/support'] = array(
    'title' => 'Support',
    'page callback' => 'scholarcp_cp',
  );
  
  // other setting by classess
  $space = spaces_get_space();

  // we go on all settings and make a menu entry for all of them
  foreach (spaces_settings($space->type, TRUE) as $setting) {
    $setting_value = isset($space->settings[$setting->id]) ? $space->settings[$setting->id] : NULL;
    $setting_form = $setting->form($space, $setting_value);
    if (!empty($setting_form)) {
      $items['scholarcp/settings/'. $setting -> id] = array(
        'title' => $setting_form['#title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('scholarcp_settings_form', $setting -> id),
        'file' => 'scholarcp.settings.inc',
        'file path' => drupal_get_path('module', 'scholarcp'). '/includes', 
      );
    }
  }
  
  
  // make them all part of 'scholarcp' menu
  foreach($items as $path => $item) {
    $items[$path]['menu_name'] = 'scholarcp';
    $items[$path]['access arguments'] = array('access content'); //TODO fix this 
  }

  return $items;
}


function scholarcp_cp(){
  return '(tbd)';
}


/**
 * callback function for our popup forms
 */
function schlarcp_feature_customize($feature_name){
  ctools_include('ajax');
  ctools_include('modal');
  
  $form_state = array(
    're_render' => TRUE,
    'ajax' => TRUE,
  );

  // pass all arguments needed by the callback function (ctools thing)
  $form_state['args'] = array(NULL, $feature_name);

  $output = ctools_modal_form_wrapper('spaces_customize_form', $form_state);

  if (empty($output)) {
    $output = array();
    $output[] = ctools_modal_command_dismiss();
  }
  
  ctools_ajax_render($output);
}


/**
 * hook form_alter
 */
function scholarcp_form_alter(&$form, $form_state, $form_id) {
  
  /*
   * we'd like to remove the space settings from 'spaces_features_form'
   * and make 'settings' link as a popup link
   */
  if (arg(0) == 'scholarcp' && $form_id == 'spaces_features_form'){

    // we dont need settings here
    unset($form['settings']);
    $site = $form['space']['#value'];
    
    // we would like to change the "customize" link to "settings" 
    // and display the form in the popup
    foreach (array_keys($site -> features) as $f_name){
      if (isset($form['customize'][$f_name])){ 
        ctools_include('ajax');
        ctools_include('modal');
        ctools_modal_add_js();
        $link = ctools_modal_text_button('settings', 'scholarcp/settings/features/'. $f_name, 'whatever');
        $form['customize'][$f_name]['#value'] = $link;
      }
    }
  }
}


/**
 * Implementation of hook_theme().
 */
function scholarcp_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'scholarcp') .'/theme';
  
  $items['scholarcp_toolbar'] = array(
    'arguments' => array('tree' => array()),
    'template' => 'scholarcp-toolbar',
    'path' => $path,
    'file' => 'theme.inc',
  );
  
  $items['scholarcp_theme_picker'] = array(
    'arguments' => array('info' => array()),
    'template' => 'scholarcp-theme-picker',
    'path' => $path,
    'file' => 'theme.inc',
  );
  
  return $items;
}



/**
 * Preprocess function for for intorducing "scholarcp_toolbar"
 * and "scholarcp_left" variables
 */
function scholarcp_preprocess_page(&$vars) {
  $vars['scholarcp_toolbar'] = 
  $vars['scholarcp_left'] = '';
  
  if (scholar_get_scholar() && user_access('configure spaces features')) { 
    $links = scholarcp_toolbar_menu_links();
    $links = theme('scholarcp_toolbar', $links);
    $vars['scholarcp_toolbar'] = $links;
    
    $links = scholarcp_left_menu_links();
    $vars['scholarcp_left'] = theme('links', $links);
  }
}

/**
 * return links for the toolbar menu
 */
function scholarcp_toolbar_menu_links(){
  $links = array();
  // Retrieve the admin menu from the database.

  $tree = menu_tree_all_data('scholarcp');
  $links[0]['toolbar'] = scholarcp_menu_navigation_links($tree);

  // Add user-specific links
  global $user;
  $user_links = array();
  $user_links[] = array(
    'title' => t('Hello <strong>!username</strong>', array('!username' => $user->name)),
    'href' => 'user',
    'html' => TRUE
  );
  $user_links[] = array('title' => t('Logout'), 'href' => "logout");
  $links[0]['user'] = $user_links;

  return $links;
}

/**
 * Return links for the left side menu
 */
function scholarcp_left_menu_links(){
  return menu_navigation_links('scholarcp',1);
  
  /**
  $tree = menu_tree_page_data('scholarcp');

  print_r($tree);
    foreach ($tree as $item) {
      if (scholarcp_in_active_trail($item['link']['href']) && !empty($item['below'])) {
        return scholarcp_menu_navigation_links($item['below']);
      }
    }
  */
}



/**
 * Generate a links array from a menu tree array.
 */
function scholarcp_menu_navigation_links($tree) {
  $links = array();
  foreach ($tree as $item) {
      $class = '';
      $id = str_replace('/', '-', $item['link']['href']);

      $l = $item['link']['localized_options'];
      $l['href'] = $item['link']['href'];
      $l['title'] = "<span class='icon'></span>". $item['link']['title'];
      $l['attributes'] = array('id' => 'admin-link-'. $id);
      $l['html'] = TRUE;

      $class = ' path-'. $id;
      if (scholarcp_in_active_trail($item['link']['href'])) {
        $class .= ' active-trail';
      }

      $links['menu-'. $item['link']['mlid'] . $class] = $l;
    }
  return $links;
}


/**
 * Checks whether an item is in the active trail. 
 */
function scholarcp_in_active_trail($path, $reset = FALSE) {
  // Gather active paths
  static $active_paths;
  if (!isset($active_paths) || $reset) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if(is_array($item['map'])){
        $path_makup = "";
        foreach ($item['map'] as $path_component) {
        	$path_makup = trim($path_makup."/".$path_component,"/");
        	if(!in_array($path_makup,$active_paths)) $active_paths[] = $path_makup;
        }
      }elseif (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}

/**** Helper function ****/

/**
 * initialize admin theme
 */
function _scholarcp_init_theme(){
	global $custom_theme;
  $custom_theme = CPTHEME;
}



