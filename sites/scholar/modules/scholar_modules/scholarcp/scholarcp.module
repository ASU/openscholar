<?php
define('CPTHEME', 'scholar_admin');

function scholarcp_init(){
   drupal_add_css(drupal_get_path('module', 'scholarcp') .'/theme/scholarcp-toolbar.css');
   drupal_add_css(drupal_get_path('module', 'scholarcp') .'/theme/scholarcp-theme-picker.css');
   drupal_add_css(drupal_get_path('module', 'scholarcp') .'/theme/scholarcp-layout.css');
   drupal_add_js(drupal_get_path('module', 'scholarcp') . '/theme/scholarcp-theme-picker.js');
   drupal_add_js(drupal_get_path('module', 'scholarcp') . '/theme/jQuery.RSC.js');
   
  if (arg(0) == 'scholarcp'){
  	_scholarcp_init_theme();
  } else {
  	$space = spaces_get_space();
  	if ($space -> type == 'og'){
  		og_set_theme($space -> group);
  	}
  }
}

/**
 * Implementation of hook_spaces_settings().
 */
function scholarcp_spaces_settings() {
  return array(
    'theme' => array(
      'class' => 'scholarcp_setting_theme',
      'file' => drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.theme.inc',
    ),
    'front' => array(
      'class' => 'scholarcp_setting_front',
      'file' => drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.front.inc',
    ),
    'bio' => array(
      'class' => 'scholarcp_setting_bio',
      'file' => drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.bio.inc',
    ),
    'menus' => array(
      'class' => 'scholarcp_setting_menus',
      'file' => drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.menus.inc',
    ),
  );
}

/**
 * Implementation of hook_views_api().
 */
function scholarcp_views_api() {
  return array(
    'api' => 2,
  );
}


function scholarcp_menu(){
	$spaces_path = drupal_get_path('module', 'spaces');
  //$items = spaces_active_space_menu('og', FALSE, 'scholarcp/settings');

  $items = array();
  
  $items['scholarcp/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'scholarcp_cp',
    'access arguments' => array('administer site configuration'),
  );

    
  $items["scholarcp/settings/features"] = array(
    'title' => 'Features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_features_form'),
    'access callback' => 'spaces_admin_access',
    'access arguments' => array('og', 'features'),
    //'access arguments' => array('access content'),
    'file' => 'spaces_admin.inc',
    'file path' => $spaces_path,
    'weight' => 1,
  );
  
  $items["scholarcp/settings/features/%"] = array(
    'title' => 'Features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_customize_form', NULL, 3),
    'access callback' => 'spaces_admin_access',
    'access arguments' => array('og', 'features'),
    'file' => 'spaces_admin.inc',
    'file path' => $spaces_path,
    'weight' => 1,
  );

  // content
  
  $items['scholarcp/content'] = array(
    'title' => 'Content',
    'page callback' => 'scholarcp_cp',
    'access arguments' => array('access content'),
  );

  $items['scholarcp/content/all'] = array( 	 
	     'title' => 'All', 	 
	     'page callback' => 'scholarcp_content', 	 
	     'page arguments' => array('all'), 	 
	     'access arguments' => array('access content'), 	 
	);
  
 $items['scholarcp/content/all'] = array( 	 
	     'title' => 'All', 	 
	     'page callback' => 'scholarcp_content', 	 
	     'page arguments' => array('all'), 	 
	     'access arguments' => array('access content'), 	 
	   );
  
  // a menu entry for each content type
  scholar_include('scholarapi');
  $content_types = scholar_content_types();
  foreach($content_types as $type => $name){
    $items['scholarcp/content/'.$type] = array(
      'title' => $name,
      'page callback' => 'scholarcp_content',
      'page arguments' => array($name),
      'access arguments' => array('access content'),
    );    
  }
  
  $items['scholarcp/users'] = array(
    'title' => 'Users',
    'page callback' => 'scholarcp_cp',
    'access arguments' => array('access content'),
  );

  $items['scholarcp/news'] = array(
    'title' => 'News',
    'page callback' => 'scholarcp_cp',
    'access arguments' => array('access content'),
  ); 
  
  $items['scholarcp/support'] = array(
    'title' => 'Support',
    'page callback' => 'scholarcp_hello',
    'access arguments' => array('access content'),
  );
  
  // other setting by classess
  $space = spaces_get_space();

  // we go on all settings and make a menu entry for all of them
  foreach (spaces_settings($space->type, TRUE) as $setting) {
    $setting_value = isset($space->settings[$setting->id]) ? $space->settings[$setting->id] : NULL;
    $setting_form = $setting->form($space, $setting_value);
    if (!empty($setting_form)) {
      $items['scholarcp/settings/'. $setting -> id] = array(
        'title' => $setting_form['#title'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('scholarcp_settings_form', $setting -> id),
        'access arguments' => array('access content'),
      );
    }
  }
  
  
  // make them all part of 'scholarcp' menu
  foreach($items as $path => $item) {
    $items[$path]['menu_name'] = 'scholarcp';
  }

  return $items;
}

function scholarcp_hello(){
  return '234';
}

/**
 * Function to return output on cp content page
 */
function scholarcp_content($type, $name = NULL, $filter=array()){
  $plural = ($type == 'all') ? 'All' : 's';
  
  $filter_form_classes = 'filter-form ' . 'filter-form-' . $type;
  $add_new_classes = 'add-new ' . 'add-new-' . $type;  
  $output = '<div class="' . $filter_form_classes. '">' . l(t('Filter '. $name . $plural), 'content') . '</div>'; 
   $output .= drupal_get_form('scholarcp_content_filter_form', $type, $name);
   $output .= ($type == 'all') ? '' :  '<div class="' . $add_new_classes . '">' . l(t('+ add new '. $name), 'node/add/' . strtolower($type)) . '</div>';

  //initialize view to generate sessions output when viewing a conference
  $display_id = 'default';
  $view = views_get_view('scholarcp_content');
  $view->init();
  $view->set_display('default');
  $view -> set_items_per_page(15);
  
  //if $filter array is passed then load those arguments into the view result, otherwise just filter by type
  //$args = count($filter) ? $view->set_arguments(array($type, $filter['pubstatus'], $filter['taxonomy'])): $view->set_arguments(array($type));
  $view->set_arguments(array($type)); 
  $view -> execute();
  $output .= $view -> render();
  
  return $output;
}

function scholarcp_content_filter_form($form_state, $type, $name){

  $pub_options =  array(
  '2' => 'Any',
  '1' => 'Yes',
  '0' => 'No',
  );

  $form['scholarfilter'] = array(
  '#type' => 'fieldset',
  '#collapsible' => FALSE,
  '#collapsed' => FALSE,
  '#weight' => 0,
  );

  $form['scholarfilter']['pubstatus'] = array(
  '#title' => t('Published'),
  '#type' => 'radios',
  '#options' => $pub_options,
  '#default_value'  => 'test1',
  '#weight' => 1,
  // '#required' => TRUE,
  '#prefix' => '<div id="pubstatus">',
  '#suffix' => '</div>',
  );

  $form['scholarfilter']['taxonomy'] = array(
  '#title' => t('Category'),
  '#type' => 'radios',
  '#options' => _scholarcp_taxonomy_fillter_options($type),
  //  '#default_value'  => 'category3',
  '#weight' => 2,
  // '#required' => TRUE,
  '#prefix' => '<div id="category">',
  '#suffix' => '</div>',
  );
  
  $form['scholarfilter']['type'] = array(
  '#type' => 'hidden',
  '#value' => $type,
   );
   
  $form['scholarfilter']['name'] = array(
  '#type' => 'hidden',
  '#value' => $name,
   );

  $form['scholarfilter']['submit'] = array(
  '#type' => 'submit',
  '#value' => t('Submit'),
  '#weight' => 3,
  );

  return $form;
}

/**
 * scholarcp_content_filter_form_submit()
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function scholarcp_content_filter_form_submit($form, &$form_state){  
  
  //TODO: need to return the filter array to the form below
  
  $filter = array(
  'pubstatus' => $form_state['values']['pubstatus'],
  'term' => $form_state['values']['taxonomy'],
 );
 //return scholarcp_content($form_state['values']['type'], $form_state['values']['name'], $filter);
 }

function _scholarcp_taxonomy_fillter_options($type){

  //For testing purposes only - remove this after testing
  $options = array(
  'category1' => 'category1',
  'category2' => 'category2',
  'category3' => 'category3',
  );
   return $options;

  // TODO: are we using more than one Vocabulary per content type????
  $c = db_result(db_query(db_rewrite_sql("SELECT vid FROM {vocabulary} v
  INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = '%s' 
  ORDER BY v.weight, v.name", 'v', 'vid'), $type));
  while ($data= db_fetch_object($c)) {
    $term_tree =taxonomy_get_tree($data->vid);
  }

  foreach($term_tree as $term){
    $options[$term->tid] = $term->name;
  }
  
  return $options;
}

/**
 * Enter description here...
 */
function scholarcp_settings_form($form_id, $setting_id){
  // get the space
  $space = spaces_get_space();
  
  // all space settings (classes)
  $settings = spaces_settings($space -> type, TRUE);

  //$form = array('#tree' => TRUE);
  
  $form = array();
  
  // just do have distinct id for each setting form
  $form['#prefix'] = '<div id = "scholarcp-settings-'. $setting_id . '" class="pad">';
  $form['#suffix'] = '</div>';
  
  // the form definition for this particular setting (we know setting_id)
  // 'settings' is important here (see the submit function)
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#tree' => TRUE,
  );
  $form['settings'][$setting_id] = $settings[$setting_id] -> form($space, $space -> settings[$setting_id]);
  
  // add the $space object to the form (so that we have it on submit);
  $form['space'] = array(
    '#type' => 'value',
    '#value' => $space,
  );
  // pass the settingid too
  $form['setting'] = array(
    '#type' => 'value',
    '#value' => $setting_id,
  );
  
  // add the submit button (not in the form definition yet)
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

function scholarcp_settings_form_submit($form, &$form_state){
  // get the space and the settings we want to save
  $space = $form_state['values']['space'];
  $setting = $form_state['values']['setting'];
  
  // Set setting values
  $settings = spaces_settings();
  if (!empty($form_state['values']['settings'])) {
    foreach ($form_state['values']['settings'] as $setting => $value) {
      $space->settings[$setting] = $settings[$setting]->submit($space, $value);
    }
  }
  spaces_save($space);
}

/**
 * Validate handler for spaces features form
 */
function scholarcp_settings_form_validate($form, &$form_state) {
  dpm('im validating');
  $space = $form_state['values']['space'];
  $settings = spaces_settings();

  if (is_array($form_state['values']['settings'])) {
    foreach ($form_state['values']['settings'] as $setting => $value) {
      $settings[$setting]->validate($space, $value);
    }
  }
}


function scholarcp_cp(){
  return '(tbd)';
}

/**
 * Implementation of hook_theme().
 */
function scholarcp_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'scholarcp') .'/theme';
  
  $items['scholarcp_toolbar'] = array(
    'arguments' => array('tree' => array()),
    'template' => 'scholarcp-toolbar',
    'path' => $path,
    'file' => 'theme.inc',
  );
  
  $items['scholarcp_theme_picker'] = array(
    'arguments' => array('info' => array()),
    'template' => 'scholarcp-theme-picker',
    'path' => $path,
    'file' => 'theme.inc',
  );
  
  $items['scholarcp_menu_radios'] = array(
    'arguments' => array('element' => NULL),
  'path' => $path,
    'file' => 'theme.inc',
  );
  
  return $items;
}


/**
 * initialize admin theme
 */
function _scholarcp_init_theme(){
	global $custom_theme;
  $custom_theme = CPTHEME;
}


/**
 * Preprocess function for for intorducing "scholarcp_toolbar"
 * and "scholarcp_left" variables
 */
function scholarcp_preprocess_page(&$vars) {
  $vars['scholarcp_toolbar'] = 
  $vars['scholarcp_left'] = '';
  
  if (scholar_get_scholar() && user_access('configure spaces features')) { 
    $links = scholarcp_toolbar_menu_links();
    $links = theme('scholarcp_toolbar', $links);
    $vars['scholarcp_toolbar'] = $links;
    
    $links = scholarcp_left_menu_links();
    $vars['scholarcp_left'] = theme('links', $links);
  }
}

/**
 * return links for the toolbar menu
 */
function scholarcp_toolbar_menu_links(){
  $links = array();
  // Retrieve the admin menu from the database.

  $tree = menu_tree_all_data('scholarcp');
  $links[0]['toolbar'] = scholarcp_menu_navigation_links($tree);

  // Add user-specific links
  global $user;
  $user_links = array();
  $user_links[] = array(
    'title' => t('Hello <strong>!username</strong>', array('!username' => $user->name)),
    'href' => 'user',
    'html' => TRUE
  );
  $user_links[] = array('title' => t('Logout'), 'href' => "logout");
  $links[0]['user'] = $user_links;

  return $links;
}

/**
 * Return links for the left side menu
 */
function scholarcp_left_menu_links(){
  return menu_navigation_links('scholarcp',1);
  
  /**
  $tree = menu_tree_page_data('scholarcp');

  print_r($tree);
    foreach ($tree as $item) {
      if (scholarcp_in_active_trail($item['link']['href']) && !empty($item['below'])) {
        return scholarcp_menu_navigation_links($item['below']);
      }
    }
  */
}



/**
 * Generate a links array from a menu tree array.
 */
function scholarcp_menu_navigation_links($tree) {
  $links = array();
  foreach ($tree as $item) {
      $class = '';
      $id = str_replace('/', '-', $item['link']['href']);

      $l = $item['link']['localized_options'];
      $l['href'] = $item['link']['href'];
      $l['title'] = "<span class='icon'></span>". $item['link']['title'];
      $l['attributes'] = array('id' => 'admin-link-'. $id);
      $l['html'] = TRUE;

      $class = ' path-'. $id;
      if (scholarcp_in_active_trail($item['link']['href'])) {
        $class .= ' active-trail';
      }

      $links['menu-'. $item['link']['mlid'] . $class] = $l;
    }
  return $links;
}


/**
 * Checks whether an item is in the active trail. 
 */
function scholarcp_in_active_trail($path, $reset = FALSE) {
  // Gather active paths
  static $active_paths;
  if (!isset($active_paths) || $reset) {
    $active_paths = array();
    $trail = menu_get_active_trail();
    foreach ($trail as $item) {
      if (!empty($item['href'])) {
        $active_paths[] = $item['href'];
      }
    }
  }
  return in_array($path, $active_paths);
}

/**
 * Implements hook_menu_node_insert().
 */
function scholarcp_menu_node_insert($item, $node) {
  require_once(drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.menus.inc');
  $site = scholar_get_scholar();
  
  if($site && ($item->menu_name == variable_get('scholar_primary_menu',false) || $item->menu_name == variable_get('scholar_secondary_menu',false))){
    
    $site->settings['menus']['menu_items'][$item->mlid] = array('menu' => $item->menu_name, 'weight' => $item->weight);
    
    $site->settings['menus'] = scholarcp_setting_menus::create_menus($site->settings['menus']); 
    
    spaces_save($site);
  }elseif ($site && array_key_exists($item->mlid,$site->settings['menus']['menu_items'])){
    unset($site->settings['menus']['menu_items'][$item->mlid]);
    $site->settings['menus'] = scholarcp_setting_menus::create_menus($site->settings['menus']); 
    spaces_save($site);
  }
}

/**
 * Implements hook_menu_node_update().
 */
function scholarcp_menu_node_update($item, $node) {
  scholarcp_menu_node_insert($item,$node);
}

/**
 * Implements hook_menu_node_delete().
 */
function scholarcp_menu_node_delete($item, $node) {
  require_once(drupal_get_path('module', 'scholarcp') .'/settingsinc/scholarcp.setting.menus.inc');
  $site = scholar_get_scholar();
  
  if ($site && array_key_exists($item->mlid,$site->settings['menus']['menu_items'])){
    unset($site->settings['menus']['menu_items'][$item->mlid]);
    $site->settings['menus'] = scholarcp_setting_menus::create_menus($site->settings['menus']); 
    spaces_save($site);
  }
}



