<?php

/**
 * MODULE SETTINGS - CONSTANTS
 */
//set the date format for the  pop-up datepicker textfield
define(DATE_FORMAT, 'n/j/Y');
define(TIMEZONE, 'EDT');

/**
 * Returns an array of fieldsets to register with vertical tabs
 */
function scholarforms_fieldsets(){
  return array('menu', 'author', 'og_nodeapi' , 'revision_information' , 'path', 'comment_settings', 'scholartaxonomy', 'options');
}

/**
 * Implemenation of hook_init()
 */
function scholarforms_init(){
  drupal_add_js(drupal_get_path('module', 'scholarforms') .'/js/scholarforms.js');
}

/**
 * Integrates scholar forms fieldset with vertical tabs - should be called of a new content type is added
 */
function scholarforms_vertical_tabs_integration($type = NULL){
  //define the fieldsets
  $fieldsets =scholarforms_fieldsets();
  
  //if type is specified create vertical tabs system variable for only that type
  if($type){
    $var_name = check_plain('vertical_tabs_fieldsets_' . $type);
    variable_set($var_name, $fieldsets);
  }
  else{
  $types = array_keys(node_get_types());
  foreach($types as $type){
    $var_name = check_plain('vertical_tabs_fieldsets_' . $type);
    variable_set( $var_name, $fieldsets);
    }
  }
  return false;
}

/**
 * Implementation of hook_node_type
 *
 * @param unknown_type $op
 * @param unknown_type $info
 */
function scholarforms_node_type($op, $info){
  switch ($op){
    
    case 'delete':
      $var_name = check_plain('vertical_tabs_fieldsets_' . $info->type);
      variable_del('comment_'. $info->type);
      break;
    
    case 'insert':
      //add taxonomy and options to vertical tabs fieldsets for if new content type is createds
     scholarforms_vertical_tabs_integration($info->type);
      break;
     
     case 'update':
    $fieldsets = scholarforms_fieldsets(); 
    //if a vertical tabs system variable for this content type does not exist, then create one   
    if (!variable_get(check_plain('vertical_tabs_fieldsets_' . $info->type), $fieldsets)){
     scholarforms_vertical_tabs_integration($info->type);
    }
      break;
  }
}

/**
 * scholarforms_get_publishing_options() 
 * A set of rules that define radio button options and text for Publishing Options
 * @param unknown_type $options
 * @param unknown_type $node
 */
function scholarforms_get_publishing_options($options, $node = NULL){

  if ((!isset($node)) || ($node->pubstatus == 'save' || $node->pubstatus == 'pubondate')){
    unset($options['unpublish']);
  }

  if($node->status == '1'){
    $options['publish'] = t('Keep this post published');
  }

  if($node->status !== '1' && $node->pubstatus == 'unpublish'){
    $options['unpublish'] = t('Keep this post unpublished');
  }
  reset($options);
  return $options;
}

/**
 * Implementation of hook_form_alter
 */
function scholarforms_form_alter(&$form, $form_state, $form_id) {   //dpm($form);

  //$form['test'] = 'scholarforms_form_validate';
  $types = array_keys(node_get_types());

  //if editing an exisitng node, load the node
  $node = isset($form['#node']->nid) ? node_load(array('nid' => $form['#node']->nid)) : NULL;

  //create options for publishing status radios
  $default_options = array(
  'publish' => t('Publish now'),
  'save' => t('Save as draft (Unpublish this post)'),
  'pubondate' => t('Publish on another date'),
  );

  $options = scholarforms_get_publishing_options($default_options, $node);

  foreach($types as $type){
    if ($type . '_node_form' == $form_id) {
      
      //TODO: need to create a function to place file and image fields into this fieldset
      /***  Images & Files Section ***/
      $form['scholarfiles'] = array(
      '#type' => 'fieldset',
      '#title' => t('Images & Files'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 0,
      );

     /* $filefield = $form[FILE_CCK_FIELD];
      unset($form[FILE_CCK_FIELD]);
      $form['scholarfiles'][FILE_CCK_FIELD] = $filefield;
*/
      

      /*** Tags & Categories Section ***/

      $form['scholartaxonomy'] = array(
      '#type' => 'fieldset',
      '#title' => t('Tags & Categories'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 0,
      );
      
      //add a description or new title, etc.
      $form['taxonomy'][1]['#description'] = t('Select the appropriate category for this post');

      $scholartax =  $form['taxonomy'];
      unset($form['taxonomy']);
      $form['scholartaxonomy']['taxonomy'] =  $scholartax;

      // $form['scholartaxonomy']['taxonomy'] =  taxonomy_form($vid =1);
      // theme_filefield_widget($element);

      /*** Publishing Options Section ***/
     
      //unset 'Publish' checkbox
      unset($form['options']['status']);
          
      $form['options']['promote'] = array(
      '#type' => 'checkbox',
      '#title' => t(scholarforms_get_frontpage_text($node)),
      '#description' => t('This keeps the post on top of any list postings'),
      '#default_value' => $promote_val = isset($node) ? $node->promote : scholarforms_get_workflow($type, $keyword = 'promote'),
      '#weight' => 1,
      '#prefix' => '<div id="pub-options">',
      );
      $form['options']['sticky'] = array(
      '#type' => 'checkbox',
      '#title' => t('Make Prominant'),
      '#description' => t('This keeps the post on top of any list postings'),
      '#default_value' => $sticky_val = isset($node) ? $node->sticky : scholarforms_get_workflow($type, $keyword = 'sticky'),
      '#weight' => 2,
      '#suffix' => '</div>',
      );
      
      //this value sets pubstatus radio button value to last selected choice
      //for existing nodes and defaults 'publish' for new nodes
     // $pubstatus_value = isset($node) ?  scholarforms_get_pubstatus($node) : 'publish';
      
     $pubstatus_value = scholarforms_get_pubstatus($node, $type);
     
      $form['options']['pubstatus'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#default_value'  => $pubstatus_value,
      '#weight' => 3,
      '#required' => TRUE,
      '#prefix' => '<div id="pub-time">',
      '#suffix' => '</div>',    
      );
              
      //need to hide this field with jquery unless radio for pubdate is selected
      $form['options']['pubdate'] = array(

      '#title' => t('Publish on'),
      '#type' => 'date_popup',
      '#date_format' => DATE_FORMAT,
      '#default_value' => scholarforms_publishdate_value($node, $pubstatus_value),
      '#weight' => 4,
      '#prefix' => $node->pubstatus == 'pubondate' ? '' : '<div id="pubdate" class="hide-pubdate">',
      '#suffix' => $node->pubstatus == 'pubondate' ? '' : '</div>',
      );

      // adding validation function
      $form['#validate'][] = 'scholarforms_form_validate';

      //adding additional submit function - IS THIS NEEDED???
      $form['#submit'][] = 'scholarforms_form_submit';
      // dpm($form);
    }
  }
}

function scholarforms_publishdate_value($node = NULL, $pubstatus_value = NULL){
  //this is an existing node
  if (isset($node)){
    if($pubstatus_value == 'save' || $pubstatus_value == 'publish'){
      $value = '';
    }
    if($pubstatus_value == 'pubondate'){
     $value = format_date($node->pubdate, $type = 'custom', $format = "Y-m-d");
    }

    //this is a new node
    else{
      $value = '';
    }
    return $value;
  }
}


/**
 * Returns text for title and description for Make Prominant checkbox
 * depending on current status
 */
function scholarforms_get_frontpage_text($node = NULL){
  if($node){
    $title = ($node->promote == '1') ? 'Keep on Front Page' : 'Promote to front page';
  }
  else{
    $title = 'Promote to front page';
  }
  return $title;
}

/**
 * Validation logic here mainly used to convert $form_state values 
 * retrieved form 'pubstatus' option for core Drupal node form handler
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function scholarforms_form_validate($form, &$form_state){
  switch($form_state['values']['pubstatus']){

    case 'publish':
      //publish node
      $form_state['values']['status'] = 1;
      break;
      
   case 'save':
      //unpublish node
      $form_state['values']['status'] = 0;
      //need to save a revision
      $form_state['values']['revision'] = 1;
       break;
       
    case 'pubondate':
      
      $form_state['values']['status'] = 0;
      
      //if the form is set to "Publish on another date" and no date is selected
      if (!isset($form_state['values']['pubdate'])){   
      form_set_error('pubdate', t('A date needs to be selected for this node to be published.'));
      }
      
      //if the form is set to "Publish on another date" and the date selected is prior to today's date, return form error
       if (isset($form_state['values']['pubdate']) && (date_convert($form_state['values']['pubdate'], DATE_DATETIME, DATE_UNIX, TIMEZONE) < time() )) {   
      form_set_error('pubdate', t('When choosing "Publish on another date", you must select a date that occurs after today\'s date.'));
      }      
      break;
  }
}

/**
 * Implementation of hook_nodeapi
 *
 * @param unknown_type $node
 * @param unknown_type $op
 */
function scholarforms_nodeapi(&$node, $op){
  switch($op){

    case 'load':
      $pubstatus = scholarforms_get_pubstatus($node);
      $node->pubstatus = $pubstatus;
      
      if ($pubstatus == 'pubondate'){
      $node->pubdate = db_result(db_query("SELECT pubondate from {scholarforms} WHERE nid = %d", (int)$node->nid));
      }
      break;

    case 'insert':
      $pubdate = $node->pubstatus == 'pubondate' ? date_convert($node->pubdate, DATE_DATETIME, DATE_UNIX, TIMEZONE) : 0;
      
      $sql = db_query("INSERT INTO {scholarforms} (nid, pubstatus, pubondate) VALUES (%d, '%s', %d)",
      (int)$node->nid, $node->pubstatus, $pubdate);
      break;

    case 'update':

      $sql_delete = db_query("DELETE FROM {scholarforms} WHERE nid = %d", (int)$node->nid);

      if ($node->pubstatus == 'pubondate'){
        //convert $node->pubdate into unix timestamp
        $pubdate_timestamp = date_convert($node->pubdate, DATE_DATETIME, DATE_UNIX, TIMEZONE);

        $sql = db_query("INSERT INTO {scholarforms} (nid, pubstatus, pubondate) VALUES (%d, '%s', %d)",
        (int)$node->nid, $node->pubstatus,  $pubdate_timestamp );
      }

      else{
        $sql = db_query("INSERT INTO {scholarforms} (nid, pubstatus) VALUES (%d, '%s')",
        (int)$node->nid, $node->pubstatus);
      }
      break;
  }
}

/**
 * Additional submit function for node form
 */
function scholarforms_form_submit($form, &$form_state){
    //nothing here right now
}

/**
 * Promote to Front Page and Make Prominent options for new nodes
 * will used pre-defined settings if already defined by user
 */
function scholarforms_get_workflow($type, $keyword){
  //check to see if custom settings defined for this content type
  $type_settings = variable_get('node_options_' . $type,'');
  if ($type_settings && is_array($type_settings)){
    if (in_array($keyword, $type_settings)){
      return 1;
    }
    //if no custom node setting for these options then default to off for both settings
    return 0;
  }
}

/**
 * Function to return pubstatus radio button setting
 *
 * @param unknown_type $node
 * @return  $pub the returned setting to the form
 */
function scholarforms_get_pubstatus($node = NULL, $type = NULL){
  if (isset($node)){
    //editing an exisiting node, populate the choice that the user last selected
    return db_result(db_query("SELECT pubstatus from {scholarforms} WHERE nid = %d", (int)$node->nid));
  }
  else{
    //creating new node

    //check to see if custom settings defined for this content type
    $type_settings = variable_get('node_options_' . $type,'');
    if ($type_settings && is_array($type_settings)){
      //if status is a value in $type_settings array then content type has been set to 'publish now' by default
      if (in_array('status', $type_settings)){
        return 'publish';
      }
      //custom settings are set to not publish by default
      //TODO: maybe return 'save as draft' or should I not return any choice here ???
      else {
        return 'save';
      }
    }
    //if no custom settings are found for this content type, then make 'publish now' the default
    else{
      return 'publish';
    }
  }
}

/**
 * Implementation of hook_cron()
 */
function scholarforms_cron(){
  $today = format_date(time(), $type = 'custom', $format = "Y-m-d");

  $sql = db_query("SELECT * from {scholarforms} WHERE pubstatus = '%s' ", 'pubondate');
  while($data = db_fetch_object($sql)){
    if ($today == format_date($data->pubondate, $type = 'custom', $format = "Y-m-d") ){
      
      //set the node as published
      $sql_update = db_query("UPDATE {node} SET status = %d WHERE nid = %d", 1, $data->nid);      
     
      //now reset the row and mark it as published in the scholarforms table
      $sql_reset_row = db_query("UPDATE {scholarforms} SET pubondate = %d, pubstatus = '%s'
      WHERE nid = %d", 0, 'publish', $data->nid);      
    }
  }
}