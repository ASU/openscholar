<?php

include_once('scholar_book.features.inc');

/**
 * Implementation of hook_strongarm().
 */
function scholar_book_strongarm() {
  // only book pages can be used in books
  $conf['book_allowed_types'] = array('book');

  $conf['node_options_book'] = array('status', 'revision');

  $conf['upload_book'] = TRUE;

  // Comments
  $conf['comment_book'] = COMMENT_NODE_DISABLED;

  // Disable Diff button
  $conf["show_preview_changes_book"] = FALSE;
  $conf["show_diff_inline_book"] = TRUE;

  // Pathauto
  $conf["pathauto_node_book_pattern"] = "[space-og-path]/book/[title-raw]";

  // vertical tabs
  $conf['vertical_tabs_fieldsets_book'] =
  array (
    0 => 'menu',
    2 => 'author',
    3 => 'options',
    5 => 'path',
    6 => 'attachments',
  );
  
  return $conf;
}


/**
 * Implementation of hook_block().
 */
function scholar_book_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks['booktoc'] = array('info' => t('Scholar: Book'));
      return $blocks;
    case 'view':
      $function = "_scholar_book_block_{$delta}";
      if (function_exists($function)) {
        return call_user_func($function);
      }
      break;
  }
}

/**
 * callback function for "booktoc" block
 */
function _scholar_book_block_booktoc() {

  $block['subject'] = t('Documents');
  $space = spaces_get_space();  // doesnt have to be vsite
  $block = array();
  if ($space) {
  	$node = menu_get_object();
    if ($node && book_type_is_allowed($node->type)) {
      $output = '';
      $output .= menu_tree(book_menu_name($node->book['bid']));
      $block['content'] = $output;
    }
  }
  
  return $block;
}

/**
 * Implementation of hook_nodeapi().
 */
function scholar_book_nodeapi(&$node, $op, $teaser = NULL, $page = NULL){
  switch ($op) {
    case 'view' :
      // unset the book navigation links
      if (module_exists('book') && book_type_is_allowed($node->type)) {
        unset($node->content['book_navigation']);
      }
      
      if (menu_get_object() === $node) {
        // set the context to the roob book node
        if (! empty($node->book['bid'])) {
          $type = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $node->book['bid']));
          context_set_by_condition('node', $type, TRUE);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_spaces_settings().
 */
function scholar_book_spaces_settings() {
  return array(
    'scholar_book' => array(
      'class' => 'scholar_book_space_setting',
      'file' => drupal_get_path('module', 'scholar_book') .'/scholar_book.spaces.inc',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function scholar_book_form_alter(&$form, &$form_state, $form_id){
  
  // alter book forms
  if ($form['#id'] == 'node-form' && book_type_is_allowed($form['#node']->type)) {
    $node = $form['#node'];
    
    if (! empty($form['book'])) {
      // Fieldset mods
      $form['book']['#weight'] = ! empty($form['body_field']['#weight']) ? $form['body_field']['#weight'] : 0;
      $form['book']['#collapsible'] = $form['book']['#collapsed'] = FALSE;
      
      if (! empty($form['book']['bid']['#options'])) {
        // Remove "none" option -- do not allow book pages to be orphaned
        unset($form['book']['bid']['#options'][0]);
        // Filter book options by current space
        if ($view = views_get_view('scholar_book_list')) {
          $view->set_display();
          $view->set_items_per_page(0);
          $view->execute();
          
          // Collect books in this space into an array
          $books = array();
          $books[$node->nid] = 1;
          if (is_array($view->result) && count($view->result)) {
            foreach ( $view->result as $row ) {
              $books[$row->nid] = 1;
            }
          }
          
          // Use collected array to filter options
          foreach ( $form['book']['bid']['#options'] as $k => $v ) {
            if (is_numeric($k) && ! isset($books[$k])) {
              unset($form['book']['bid']['#options'][$k]);
            }
          }
        }
      }
    }
  }

}

/**
 *  Implementation of hook_vsite_sidgets().
 */
function scholar_book_vsite_widgets(){
  $items = array();
  $items['views_scholar_book-block_1'] = array(
        'module' => 'views',
        'delta' => 'scholar_book-block_1',
        'weight' => 20,
        'region' => false,
        'status' => '0',
        'label' => 'Documents',
        'type' => 'context_ui',
      );
  return $items;
}
