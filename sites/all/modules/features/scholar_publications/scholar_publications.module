<?php
include_once('scholar_publications.features.inc');

function scholar_publications_init(){
  
	static $init_run;
	
	if(!isset($init_run)){
		$init_run = true;
		$space = vsite_get_vsite();
	  
	  if($space){
	    global $conf;
	    require_once drupal_get_path('module', 'scholar_publications') .'/scholar_publications.settings.feature.inc';
	    
	    scholar_publications_settings_feature::customize($space, 'style',$conf['biblio_style']);
	    scholar_publications_settings_feature::customize($space,'bkn_contrib_lookup_allow_autocomplete',$conf['bkn_contrib_lookup_allow_autocomplete']);
	    scholar_publications_settings_feature::customize($space,'bkn_contrib_lookup_mode',$conf['bkn_contrib_lookup_mode']);
	    scholar_publications_settings_feature::customize($space,'sort',$conf['biblio_sort']);
	    scholar_publications_settings_feature::customize($space,'sort_tabs',$conf['biblio_sort_tabs']);
	    scholar_publications_settings_feature::customize($space,'order',$conf['biblio_order']);
	    scholar_publications_settings_feature::customize($space,'rowsperpage',$conf['rowsperpage']);
	    scholar_publications_settings_feature::customize($space,'export_links', $conf['biblio_export_links']);
	    scholar_publications_settings_feature::customize($space,'google_link', $conf['biblio_google_link']);
	    scholar_publications_settings_feature::customize($space,'no_publication_date', $conf['biblio_no_year_text']);
	    //scholar_publications_settings_feature::customize($space,'inlinemode_in_links', $conf['biblio_inlinemode_in_links']);
	    scholar_publications_settings_feature::customize($space,'link_title_url', $conf['biblio_link_title_url']);
	    scholar_publications_settings_feature::customize($space,'author_links', $conf['biblio_author_links']);
	      
	  }
	}
}

/**
 *  hook_strongarm().
 */
function scholar_publications_strongarm() {

 
  $conf['node_options_biblio'] = array('status', 'revision');
  $conf['upload_biblio'] = TRUE;
 
  $conf["show_preview_changes_biblio"] = FALSE;
  $conf["show_diff_inline_biblio"] = FALSE;

  // Comments
  $conf['comment_biblio'] = COMMENT_NODE_DISABLED;
 
  // Pathauto (optional) settings
  $conf["pathauto_node_biblio_pattern"] = "[space-og-path]/publications/[title-raw]";
 
  return $conf;
}


/**
 * Implementation of hook_context_links_alter().
 */
function scholar_publications_context_links_alter(&$links) {
  if (! empty ( $links ['biblio'] )) {
    $links ['importbiblio'] = array (
      'title' => 'Import publications', 
      'href' => 'publications/import', 
      'query' => drupal_get_destination(),
      'custom' => TRUE 
    );
    
    $links['biblio']['query'] = drupal_get_destination();
    $links ['biblio'] ['title'] = "publication";
    
    $links = array_reverse($links);
  }
}

function scholar_publications_menu(){
  $items["publications"] = array(
    'title' => 'Publications',
    'page callback' => 'scholar_publications_overview',
    'access callback' => 'spaces_feature_access',
    'access arguments' => array('scholar_publications'), 
    'menu_name' => 'features',
  );
  
  /*
  $items['publications/list'] = array(
    'title' => 'List publications',
    'page callback' => 'scholar_publications_overview',
    'page arguments' => array(1),
    'access arguments' => array('access biblio content'), 
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  */
  
  // import export
   $items['publications/import'] = array(
    'title'             => 'Import',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('biblio_import_form'),
    'file'              => 'biblio.import.export.inc',
    'file path'         => drupal_get_path('module', 'biblio'),
    'access callback'   => 'user_access',
    'access arguments'  => array('import from file'),
    //'type'              => MENU_LOCAL_TASK,
    'type'              => MENU_CALLBACK,
    'weight'            => 10,
   );
  
  return $items;
}

/**
 * Implementation of hook_spaces_settings().
 */
function scholar_publications_spaces_settings() {
  return array(
    'scholar_publications' => array(
      'class' => 'scholar_publications_settings_feature',
      'file' => drupal_get_path('module', 'scholar_publications') .'/scholar_publications.settings.feature.inc',
    ),
  );
}

/**
 * hook form_alter
 * Alter the import publications form
 */
function scholar_publications_form_alter(&$form, $form_state, $form_id){
  if ($form_id == 'biblio_import_form') {
    
    // the original form is asking to set the userID for these entries
    // Just the group admin for now. TODO list of users for this og
    
    $vsite = vsite_get_vsite();
    //$group_node = og_get_group_context();
    $uid = $vsite->group->uid;
    $form['userid'] = array(
      '#type' => 'value', 
      "#value" => $uid 
    );
    $form['batch_process'] = array(
      '#type' => 'value', 
      "#value" => 1 
    );
    $form['filetype']['#type'] = 'radios';
    unset($form['filetype']['#options']['0']);
    $form['filetype']['#default_value'] = 'bib';
    // just unset the taxonomy settings for now.
    unset($form['import_taxonomy']);
  }
  elseif (isset($form['#node']) && $form['#node']->type === 'biblio' && $form_id == $form['#node']->type .'_node_form') {
  	if($form_state['storage']['biblio_type'] || $form['#node']->biblio_type){
  		_scholar_publications_modify_contributor($form);
  	}else{
  	  scholar_publications_hide_form_value($form['biblio_doi_lookup']);
      scholar_publications_hide_form_value($form['biblio_cut_paste']);
    }
  	
  	if(array_key_exists('other_fields',$form)) scholar_publications_hide_form_value($form['other_fields']);
  	if(array_key_exists('biblio_keywords',$form)){
    	scholar_publications_hide_form_value($form['biblio_keywords']);
    	if(array_key_exists('taxonomy',$form) && array_key_exists('copy_to_biblio',$form['taxonomy'])){
    		$form['taxonomy']['copy_to_biblio']['#default'] = 1;
    		scholar_publications_hide_form_value($form['taxonomy']['copy_to_biblio']);
    	}
    } 
    $form['submit_type'] = array('#type' => 'submit', '#disabled' => true, '#access' => false, '#value' => t('Select Publication Type'));
  }
}

function scholar_publications_hide_form_value(&$element){
  foreach(element_children($element) as $s_key){
    $element[$s_key]['#type'] = 'value';
    vsite_users_hide_form_value($element[$s_key]);;
  }
  $element['#type'] = 'value';
}

function scholar_publications_overview(){
	$vsite = vsite_get_vsite();
  module_load_include('inc', 'biblio', 'biblio.pages');
  //page title = the name of the menu they have in settings or "Publications"
  $page_title = (is_array($vsite->customizer['menu']) && isset($vsite->customizer['menu']['publications'])) ? $vsite->customizer['menu']['publications'] : "Publications";
  variable_set('biblio_base_title', $page_title);
        
  $s_bib_out =  biblio_db_search();
  
  global $pager_total_items;
  if(is_array($pager_total_items) && $pager_total_items[0] > 0){
  	return $s_bib_out;
  }
  
  //Display Empty Result Text
  $contexts = context_enabled_contexts();
  $nodetype = null;
  if(array_key_exists('scholar-feature-publications',$contexts) && ($context = $contexts["scholar-feature-publications"])){
    if (!empty($context->node)) {
      reset($context->node);
      $nodetype = current($context->node);
    }
  }
  
  return vsite_empty_view_message($nodetype,$vsite);
}

/**
 * hook db_rewrite_sql
 *
 */
function scholar_publications_db_rewrite_sql($sql, $primary_table, $primary_field,  $args) {

  $vsite = vsite_get_vsite();
  $gid = $group_node -> nid;
  $base_url = 'publications'; //og_settings_variable_get($gid, 'og_biblio_base', 'biblio');
  if ($vsite  && arg(0) == $base_url && strstr($sql,"biblio") !== false){
    if ($primary_table == 'n' && strstr($sql, 'biblio')){
      $query['join'] = 'INNER JOIN {og_ancestry} oga ON n.nid = oga.nid';
      $query['where'] =  'oga.group_nid = '. $vsite -> sid;
      return $query;
	  }
  }
}

/**
 * hoook nodeapi
 */
function scholar_publications_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($node -> type != 'biblio') return;
  switch ($op) {
  	case 'load':	
  	  $s_orig_text = variable_get('biblio_no_year_text', t('Submitted'));
  	  scholar_publications_init(); //Run the customizations since they probably have not run by this point (they only run once anyway)
  			//rerun this since it was run before customization
 		  if($node->biblio_year){
  	  	if($node->biblio_year === $s_orig_text) $node->biblio_year = 9999;
  		  $node->biblio_year = _biblio_text_year($node->biblio_year);
  	  } 
  	break;
    case 'presave':
     
      $vsite = vsite_get_vsite();
      $gid = $vsite -> sid;
      $node -> og_groups = array($gid);
    break;
    case 'update':
      drupal_set_message('publication node updated');
    case 'insert':
    	//Associate biblio authors with site owners
      if(!empty($node->biblio_contributors)){
        $md5 = _loadMD5();
        foreach ($node->biblio_contributors as $cat => $authors) { 
          foreach ($authors as $key => $author) {
          	if(!$author['vsite_owner']) continue; //Is this the site owner
          	
            if (empty ($author['cid']) && !empty ($md5)) $author['cid'] = array_search($author['md5'], $md5);
            $vsite = vsite_get_vsite();
            
            if (empty($author['cid']) || !$author['cid'] || !$vsite) continue; //Do we have the CID
            
            db_query("UPDATE {biblio_contributor_data} SET drupal_uid = 0 WHERE drupal_uid = %d", $vsite->group->uid);
            db_query('UPDATE {biblio_contributor_data} set drupal_uid = %d WHERE cid = %d ', $vsite->group->uid, $author['cid']);
            break(2);//We are done
          }
        }
      }
    break;
  }
}


/**
 * hook vsite_sidgets

 */
function scholar_publications_vsite_widgets(){
  $items = array();
  $items['views_scholar_publications-block_1'] = array(
        'module' => 'views',
        'delta' => 'scholar_publications-block_1',
        'weight' => 20,
        'region' => false,
        'status' => '0',
        'label' => 'Recent publications',
        'type' => 'context_ui',
      );
  return $items;
}

/**
 * Adjust the "Recent Publications View" if there are no publications
 * 
 * @param $view view
 * @param $s_display_handler_output string
 * @param $cache
 * @return none
 */
function scholar_publications_views_post_render($view, &$s_display_handler_output, $cache){
	if($view->name == 'scholar_publications' && $view->current_display == 'block_1' && !count($view->result)){
		$s_display_handler_output = ''; //Do no display when there are no publications
	}
}


/**
 * hook theme_registry_alter
 */
function scholar_publications_theme_registry_alter(&$theme_registry){
  /*
   * Change the biblio theme to use ours so it can make the views consistent
   */
  $theme_registry['biblio_entry']['function'] = 'scholar_publications_biblio_entry';
  $theme_registry['biblio_author_link']['function'] = 'scholar_publications_biblio_author_link';
}

/**
 * Standardize the biblio entry look 
 * 
 * @param $node
 * @param $base
 * @param $style
 * @param $inline
 * @return unknown_type
 */
function scholar_publications_biblio_entry($node, $base = 'biblio', $style = 'classic', $inline = false) {
	$s_output = theme_biblio_entry($node, $base, $style, $inline);
	
	$links = module_invoke_all('link', 'node', $node, '');
  drupal_alter('link', $links, $node);
  
	$s_output .= theme('links', $links);
	
	return $s_output;
}

/**
 * Override function for the biblio author links
 * 
 * @param $author
 * @param $aid
 * @param $base
 * @param $inline
 * @return unknown_type
 */
function scholar_publications_biblio_author_link($author, $aid, $base='biblio', $inline = FALSE) {
  $db_result = db_query("SELECT n.nid as nid FROM {biblio_contributor_data} bcd INNER JOIN {node} n  ON n.uid = bcd.drupal_uid 
                         WHERE n.type = 'vsite' AND bcd.cid = %d", $aid);
  $a_node = db_fetch_array($db_result);
  $current_vsite = vsite_get_vsite();
	if(!$a_node || $current_vsite->group->nid == $a_node['nid']) return check_plain($author); //Return if there is no vsite
  
	$vsite = new vsite('og',$a_node['nid'],false);
	
	$options = array('attributes' => array('target' => '_blank'),'purl' => array('provider' => $vsite->purl_provider, 'id' => $vsite->group->nid));
  $html = l(trim($author), "publications", $options );

  return $html;
}

/**
 * Theme the biblio nodes the same in views as elsewhere
 * @param $vars array
 */
function scholar_publications_preprocess_views_view_row_node(&$vars){
  
  $nid = $vars['row']->{$vars['field_alias']};
  if (!is_numeric($nid) || (array_key_exists('build_mode',$vars['options']) && $vars['options']['build_mode'] != 'teaser')) {
    return;
  }//Can't find the node or this is not in the teaser view

  $node = node_load($nid);

  if (empty($node) || $node->type != 'biblio') {
    return;
  }

  $vars['node'] = scholar_publications_biblio_entry($node,'biblio',biblio_get_style());
}

/**
 * Modify a contributor array to unclude a checkbox to identify a author as yourself or add yourself
 * @param $form_element
 */
function _scholar_publications_modify_contributor(&$form){
	$vsite = vsite_get_vsite();
	if(!$vsite) return;
	
  $db_result = db_query("SELECT cid,name FROM {biblio_contributor_data} WHERE drupal_uid = %d", $vsite->group->uid);
  $author = db_fetch_array($db_result);
  
	if(!$author){
		_scholar_publications_add_owner_checkbox($form['contributors1_wrapper']['biblio_contributors']);
	}elseif(!$form['nid']['#value']){
		$form['contributors1_wrapper']['biblio_contributors'][1][0]['name']['#default_value'] = $author['name'];
		$form['contributors1_wrapper']['biblio_contributors'][1][0]['cid']['#default_value'] = $author['cid'];
	}
}

/**
 * Add the checkboxes
 * @param $form_element
 * @return unknown_type
 */
function _scholar_publications_add_owner_checkbox(&$form_element){
	
	//Add the checkboxes
	foreach ($form_element as $key => $element){
		$form_element[$key]['#col1Title'] = 'Site Owner';
    $form_element[$key]['#col1Data'] = 'vsite_owner';
    $form_element[$key]['#col1Class'] = 'contributor_vsite_owner';
		foreach(element_children($form_element[$key]) as $n_sub_element){
			$a_parents = $form_element[$key][$n_sub_element]['name']['#parents'];
      array_pop($a_parents); //Get rid of the name			  
		  $form_element[$key][$n_sub_element]['vsite_owner'] = array(
	  	  '#type' => 'checkbox',
			  '#title' => t(''),
		    '#parents' => array_merge($a_parents,array('vsite_owner')),
		    '#attributes' => array('onClick' => " if(this.checked){ $('input.contributor_vsite_owner').attr('checked', false); this.checked = true; }", 'class' => 'contributor_vsite_owner'),
			);
	  }
	}
}


