<?php
include_once('scholar_publications.features.inc');

function scholar_publications_init(){
  $space = vsite_get_vsite();
  
  if($space){
    global $conf;
    require_once drupal_get_path('module', 'scholar_publications') .'/scholar_publications.settings.feature.inc';
    
    scholar_publications_settings_feature::customize($space, 'style',$conf['biblio_style']);
    scholar_publications_settings_feature::customize($space,'bkn_contrib_lookup_allow_autocomplete',$conf['bkn_contrib_lookup_allow_autocomplete']);
    scholar_publications_settings_feature::customize($space,'bkn_contrib_lookup_mode',$conf['bkn_contrib_lookup_mode']);
    scholar_publications_settings_feature::customize($space,'sort',$conf['biblio_sort']);
    scholar_publications_settings_feature::customize($space,'sort_tabs',$conf['biblio_sort_tabs']);
    scholar_publications_settings_feature::customize($space,'order',$conf['biblio_order']);
    scholar_publications_settings_feature::customize($space,'rowsperpage',$conf['rowsperpage']);
    scholar_publications_settings_feature::customize($space,'export_links', $conf['biblio_export_links']);
    scholar_publications_settings_feature::customize($space,'google_link', $conf['biblio_google_link']);
    //scholar_publications_settings_feature::customize($space,'links_target_new_window', $conf['biblio_links_target_new_window']);
    //scholar_publications_settings_feature::customize($space,'inlinemode_in_links', $conf['biblio_inlinemode_in_links']);
    scholar_publications_settings_feature::customize($space,'link_title_url', $conf['biblio_link_title_url']);
    scholar_publications_settings_feature::customize($space,'author_links', $conf['biblio_author_links']);
      
  }
}


function scholar_publications_menu(){
  $items["publications"] = array(
    'title' => 'Publications',
    'page callback' => 'scholar_publications_overview',
    //'page arguments' => array(1),
    'access arguments' => array('access biblio content'), 
    //'type' => MENU_CALLBACK,
    'menu_name' => 'features',
  );

  /*
  $items['publications/list'] = array(
    'title' => 'List publications',
    'page callback' => 'scholar_publications_overview',
    'page arguments' => array(1),
    'access arguments' => array('access biblio content'), 
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  */
  
  // import export
   $items['publications/import'] = array(
    'title'             => 'Import',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('biblio_import_form'),
    'file'              => 'biblio.import.export.inc',
    'file path'         => drupal_get_path('module', 'biblio'),
    'access callback'   => 'user_access',
    'access arguments'  => array('import from file'),
    //'type'              => MENU_LOCAL_TASK,
    'type'              => MENU_CALLBACK,
    'weight'            => 10,
   );
  
  return $items;
}

/**
 * Implementation of hook_spaces_settings().
 */
function scholar_publications_spaces_settings() {
  return array(
    'scholar_publications' => array(
      'class' => 'scholar_publications_settings_feature',
      'file' => drupal_get_path('module', 'scholar_publications') .'/scholar_publications.settings.feature.inc',
    ),
  );
}


/**
 * hook form_alter
 * Alter the import publications form
 */
function scholar_publications_form_alter(&$form, $form_state, $form_id){
  if ($form_id == 'biblio_import_form'){
    // the original form is asking to set the userID for these entries
    // Just the group admin for now. TODO list of users for this og
		
    $vsite = vsite_get_vsite();
    //$group_node = og_get_group_context();
    $uid = $vsite -> group -> uid;
	$form['userid'] = array('#type' => 'value', "#value" => $uid);

    // just unset the taxonomy settings for now.
    unset($form['import_taxonomy']);
  }
}

function scholar_publications_overview(){
  $output = '';
  $links = array();
  $links[] = array(
    'title' => 'publication',
    'href' => 'node/add/biblio',
  );
  
  $links[] = array(
    'title' => 'import',
    'href' => 'publications/import',
  );
  
  $output .= theme('context_links', $links);
  module_load_include('inc', 'biblio', 'biblio.pages');
  return $output . biblio_db_search('inline');
}

/**
 * hook db_rewrite_sql
 *
 */
function scholar_publications_db_rewrite_sql($sql, $primary_table, $primary_field,  $args) {
  $vsite = vsite_get_vsite();
  $gid = $group_node -> nid;
  $base_url = 'publications'; //og_settings_variable_get($gid, 'og_biblio_base', 'biblio');
  if ($vsite  && arg(0) == $base_url){
    if ($primary_table == 'n'){
      $query['join'] = 'INNER JOIN {og_ancestry} oga ON n.nid = oga.nid';
      $query['where'] =  'oga.group_nid = '. $vsite -> sid;
      return $query;
	}
  }
}