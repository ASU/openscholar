<?php

include_once('scholar_software.features.inc');


/**
 * Implementation of hook_views_api().
 */
function scholar_software_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'scholar_software') .'/views',
  );
}

/**
 * Implementation of hook_scholar_admin_link() on behalf of the node module.
 */
function scholar_software_vsite_admin_link($type, $object) {
  $links = array();
  if ($type == 'node' && $object->type == 'scholar_software_project' && empty($object->field_scholar_software_method[0]['value'])) {

    $item = menu_get_item('node/add/scholar-software-release');
    if ($item && $item['access']) {
      $links['scholar-software-add-release'] = array(
        'title' => t('Add new Release'),
        'href' => 'node/add/scholar-software-release',
        'query' => array('software_name' => $object->field_scholar_software_name[0]['value']),
      );
    }
  }
  return $links;
}

/**
 * Implementation of hook_nodeapi().
 */
function scholar_software_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  
	if ($op == 'presave' && $node->type == 'scholar_software_project') {
    if (!$node->field_scholar_software_method[0]['value']) {
      $node->field_scholar_software_repository[0]['value'] = '';
    }else{
	    $a_handlers = scholar_software_get_handlers();
	    if(array_key_exists($node->field_scholar_software_method[0]['value'],$a_handlers)){
	      $a_handler_info = $a_handlers[$node->field_scholar_software_method[0]['value']];
	      if($a_handler_info['path']) require_once($a_handler_info['path']);
	      $o_handler = new $a_handler_info['class']($node->field_scholar_software_repo[0]['value'], $node->field_scholar_software_name[0]['value']);
	      $o_handler->alterProject($node);
	    }
	  }
  }
  else if ($op == 'presave' && $node->type == 'scholar_software_release') {
    $node->title = scholar_software_generate_version($node);

    // If this release is recommended, set all other ones to not recommended.
    if ($node->field_scholar_software_recommend[0]['value'] == 1) {
      $view = views_get_view('scholar_software_releases');
      $view->set_arguments(array($node->field_scholar_software_project[0]['nid']));
      $view->execute('block_1');
      foreach ($view->result as $data) {
        if (!isset($node->nid) || $data->nid != $node->nid) {
          $release = node_load($data->nid);
          $release->field_scholar_software_recommend[0]['value'] = 0;
          node_save($release);
        }
      }
    }
  }
  else if ($op == 'view' && $node->type == 'scholar_software_release') {
    drupal_add_css(drupal_get_path('module', 'scholar_software') . '/scholar_software.css');
    
    $download_url = file_create_url($node->field_scholar_software_file[0]['filepath']);
    $contents = file_exists($node->field_scholar_software_file[0]['filepath']) ? file_get_contents($node->field_scholar_software_file[0]['filepath']) : '';
    $info = array();
    $info[] = t('Download: !url', array('!url' => l($download_url, $download_url, array('absolute' => TRUE))));
    $info[] = t('md5 hash: !md5', array('!md5' => md5($contents)));
    $info[] = t('Size: !size', array('!size' => format_size($node->field_scholar_software_file[0]['filesize'])));
    $node->content['scholar_software_info'] = array(
      '#type' => 'fieldset',
      'content' => array(
        '#type' => 'markup',
        '#value' => theme('item_list', $info, NULL, 'ul', array('id' => 'scholar_software-release-info')),
      ),
      '#weight' => -10,
    );
    
    $project = node_load($node->field_scholar_software_project[0]['nid']);
    $node->content['scholar_software_project'] = array(
      '#type' => 'item',
      '#title' => 'Software Project',
      '#value' => l($project->title, 'node/' . $project->nid),
      '#weight' => -11,
    );
  } else if ($op == 'insert' && $node->type == 'scholar_software_project'){
    if ($node->field_scholar_software_method[0]['value']) {
      $a_handlers = scholar_software_get_handlers();
      if(array_key_exists($node->field_scholar_software_method[0]['value'],$a_handlers)){
        $a_handler_info = $a_handlers[$node->field_scholar_software_method[0]['value']];
        if($a_handler_info['path']) require_once($a_handler_info['path']);
        $o_handler = new $a_handler_info['class']($node->field_scholar_software_repo[0]['value'], $node->field_scholar_software_name[0]['value']);
        $o_handler->initReleases($node);
      }
    }//Add the initial releases
  }
}

/**
 * Option field callback for version options.
 */
function scholar_software_cck_options($type = 'major') {
  switch ($type) {
    case 'major':
      $major = range(0, 50);
      unset($major[0]);
      return $major;

    case 'method':
    	$a_handlers = scholar_software_get_handlers();
    	$a_methods = array(0 => t('Manual upload'));
    	foreach ($a_handlers as $s_key => $a_info){
    		$a_methods[$s_key] = $a_info['name'];
    	}
    	
      return $a_methods;
    case 'patch':
      return range(0, 50);

    case 'recommended':
      return array(t('Not recommended'), t('Recommended'));

    case 'security':
      return array(t('Not a security release'), t('Security release'));

  }
}


/**
 * Implementation of hook_form_alter() for scholar_software_project_node_form.
 */
function scholar_software_form_scholar_software_project_node_form_alter(&$form, $form_state) {
  drupal_add_js(drupal_get_path('module', 'scholar_software') . '/scholar_software.js');
  $form['#validate'][] = 'scholar_software_project_node_form_validate';
}

/**
 * Validate handler for scholar_software_project_node_form.
 */
function scholar_software_project_node_form_validate($form, &$form_state) {
  // Ensure repository URL is set if using a non-manual method.
  if (!empty($form_state['values']['field_scholar_software_method'][0]['value']) && empty($form_state['values']['field_scholar_software_repository'][0]['value'])) {
    form_set_error($form_state['values']['field_scholar_software_repository'][0]['_error_element'], t('Please provide a valid repository URL for this project.'));
  }
}

/**
 * Implementation of hook_form_alter() for scholar_software_release_node_form.
 */
function scholar_software_form_scholar_software_release_node_form_alter(&$form, $form_state) {
  drupal_add_css(drupal_get_path('module', 'scholar_software') . '/scholar_software.css');
  $form['title'] = array(
    '#type' => 'value',
    '#value' => 'VOID',
  );
  $form['#submit'][] = 'scholar_software_release_node_form_submit';
}

/**
 * Submit handler for scholar_software_release_node_form.
 */
function scholar_software_release_node_form_submit($form, &$form_state) {
  // Only do something, if the user clicked the preview button.
  if (isset($form_state['clicked_button']['#submit']) && in_array('node_form_build_preview', $form_state['clicked_button']['#submit'])) {
    $node = node_submit($form_state['values']);
    $node->title = scholar_software_generate_version($node);
    $form_state['values'] = (array) $node;
  }
}

/**
 * Generate a standard version string from a node object.
 * @TODO: Merge this or make use of it in scholar_software_handler_field_release_tag::render().
 */
function scholar_software_generate_version($node, $raw = FALSE) {
  $project = node_load($node->field_scholar_software_project[0]['nid']);
  $major = $node->field_versionmajor[0]['value'];
  $patch = $node->field_versionpatch[0]['value'];
  $extra = $node->field_versionextra[0]['value'];
  $version = "{$major}.{$patch}" . (!empty($extra) ? "-{$extra}" : '');
  return $raw ? $version : "{$project->title} $version";
}

/**
 * Return the valid package handlers
 */
function scholar_software_get_handlers() {
  
  $handlers = module_invoke_all('scholar_software_handlers');
  drupal_alter('scholar_software_handlers', $handlers);
  
  return $handlers;
}

/**
 * Implementation of hook_scholar_software_handlers()
 */
function scholar_software_scholar_software_handlers() {
  return array(
    //Add default handlers here if any in the future
  );
}
