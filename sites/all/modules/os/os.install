<?php

/**
 * Implementation of hook_install().
 */
function os_install(){
  // Add type,nid index to node table. Allows for more efficient joins to
  // og_ancestry when limiting a view by a certain node type.
  if (db_table_exists('node')) {
    db_query("ALTER TABLE {node} ADD KEY type_node (type, nid)");
  }
}

/*
 * hook_update_N
 * installs 'views_content_cache','os_views_content_cache','os_blocks_content_cache','os_wysiwyg_fields', 'citation_dsitribute'.
 * removes 'cite_distribute'
 *
 * update hook for beta11 -> beta12
 */
function os_update_6001(&$sandbox){

  $res = array();
  module_rebuild_cache();

  $modules = array('views_content_cache','os_views_content_cache','os_blocks_content_cache','os_wysiwyg_fields', 'citation_distribute', 'pathauto_extra');

  foreach ($modules as $mod) {
    if(!module_exists($mod)){
      include_once('includes/install.inc');
      drupal_install_modules(array($mod));
    }
  }

  $res[] = array(
    'success' => true,
    'query' => 'Installed modules: ' . implode(', ', $modules),
  );

  //remove cite_distribute and its plugins
  $remove = array('cs_meta', 'googlescholar_meta', 'repec_meta', 'sword_meta', 'cite_distribute');
  $remove = array_filter($remove, 'module_exists');
  foreach ($remove as $module) {
    module_disable(array($module), TRUE);
    drupal_uninstall_module($module);
  }

  if (count($remove) > 0) {
    $res[0]['query'] .= '.  Uninstalled modules: ' . implode(', ', $remove);
  }

  return $res;

}

/*
 * hook_update_N
 *
 * update hook for beta12 => beta13
 *
 * installs new $modules
 */
function os_update_6002(&$sandbox) {
  $res = array();
  $modules = array('boxes', 'vsite_controllers', 'os_boxes', 'spaces_simpleviews', 'vsite_contextual', 'os_modalframe', 'os_books');
  include_once('includes/install.inc');
  drupal_install_modules($modules);

  $failed = array();
  foreach($modules as $mod) {
    if (!module_exists($mod)) {
      $failed[] = $mod;
    }
  }

  if (count($failed)) {
    $res = array('#abort' => array('success' => FALSE, 'query' => 'Failed to install modules: ' . implode(', ', $failed)));
  } else {
    $res[] = array('success' => TRUE, 'query' => 'Installed modules: ' . implode(', ', $modules));
  }

  return $res;
}

/*
 * hook_update_N
 *
 * update hook for beta12 => beta13
 *
 * Updates block ids that are not going to use boxes
 */
function os_update_6003(&$sandbox) {
  $res = array();
  
  $a_changes = array(
    'vsite_widgets-3' => 'vsite-site_search',
    'vsite_widgets-5' => 'vsite-google_translate',
  );

  // Multi-part update.
  if (!isset($_SESSION['os_update_6003'])) {
    // initialize our variables
    $_SESSION['os_update_6003'] = 0;
    $_SESSION['os_update_6003_max'] = db_result(db_query("SELECT COUNT(*) FROM {spaces_overrides} WHERE object_type = 'context' "));
  }

  $result = db_query("SELECT * FROM {spaces_overrides} WHERE object_type = 'context' ORDER BY id ASC LIMIT %d,100 ",$_SESSION['os_update_6003']);
  $_SESSION['os_update_6003'] += 100;

  while ($row = db_fetch_object($result)) {
      $value = unserialize($row->value);

      foreach ($a_changes as $old => $new) {
        if (array_key_exists($old,$value['blocks'])) {
          $block = $value['blocks'][$old];
          unset($value['blocks'][$old]);

          list($new_module,$new_delta) = explode("-",$new,2);
          $block['module'] = $new_module;
          $block['delta'] = $new_delta;

          $value['blocks'][$new] = $block;
        }
      }

      db_query("UPDATE {spaces_overrides} SET value = '%s' WHERE type LIKE '%s' AND id = %d AND object_type LIKE 'context' AND object_id LIKE '%s' ",serialize($value), $row->type, $row->id, $row->object_id);
  }

  if($_SESSION['os_update_6003'] >= $_SESSION['os_update_6003_max']){
    $res[] = array(
      'success' => true,
      'query' => 'Block settings migrated.'
    );
  }else{
    // Report how much is left to complete.
    $res['#finished'] = $_SESSION['os_update_6003'] / $_SESSION['os_update_6003_max'];
  }

  return $res;
}

/*
 * Update blocks to boxes
 */
function os_update_6004(&$sandbox){
	
  // Multi-part update.
  if (!isset($_SESSION['os_update_6004'])) {
    //Keep track of which block we are migrating
    $_SESSION['os_update_6004'] = 0;
  }
	
  // migrate existing blocks to new boxes
  module_load_include('module', 'boxes');
  module_load_include('inc', 'os_boxes', 'os_boxes.newbox_api');

  $a_migrate_info = array(
    "scholar-0" => "site_info",
    "scholar-1" => "site_logo",
    'vsite_widgets-1' => 'site_info',
    'vsite_widgets-0' => 'site_logo',
    'vsite_widgets_1' => 'site_info', //Few iterations of these block id's thats why there are multiple logo/info here, this unifies them
    'vsite_widgets_0' => 'site_logo',
    'vsite_widgets-2' => 'shield_default',
    "views-scholar_announcements-block_1" => "scholar_announcements_latest",
    "scholar_biocv-bio_blurb" => "scholar_biocv_bio_blurb",
    'views-scholar_book-block_1' => 'scholar_book_recent_docs',
    'views-scholar_image_gallery-block_1' => 'image_gallery_recent_images',
    'views-scholar_publications-block_1' => 'scholar_publications_recent',
    "vsite_taxonomy-0" => 'vsite_taxonomy_fltr_cat',
    'vsite_widgets-4' => 'os_addthis',
    'scholar_book-booktoc' => 'scholar_book_current_toc',
    'scholar_blog-rss' =>  'scholar_blog-blog_rss' ,
    'vsite_widgets-6' => 'vsite_rss',
    'vsite_widgets_6' => 'vsite_rss',
  );

  $index = -1;
  foreach ($a_migrate_info as $block_id => $box_delta) {
  	$index++;
  	if($index < $_SESSION['os_update_6004']) continue;
  	$max = db_result(db_query("SELECT COUNT(*) FROM {spaces_overrides} WHERE type = 'og' AND object_type = 'context' AND object_id LIKE '%%reaction:block%%' AND value LIKE '%%%s%%' ", $block_id));
    $o_box = boxes_load($box_delta);
    replace_boxes($block_id, $o_box, false, false, 500);
    
    if($max < 500){
    	//Run updates on the next block
    	$_SESSION['os_update_6004']++;
    }
    break;
  }
  
  
  if($_SESSION['os_update_6004'] >= count($a_migrate_info)){
    $res[] = array(
      'success' => true,
      'query' => 'New Box settings migrated.'
    );
  }else{
    // Report how much is left to complete.
    $res['#finished'] = $_SESSION['os_update_6004'] / count($a_migrate_info);
  }
  
  return $res;
}

function os_update_6005(&$sandbox) {
  $res = array();

  if(!module_exists('boxes')){
    return array("#abort" => array('success' => FALSE, 'query' => 'Boxes module was not installed when this update ran, please run update.php again.'));
  }

  module_load_include('inc', 'os_boxes', 'os_boxes.newbox_api');
  module_load_include('module', 'boxes');

  // Multi-part update.
  if (!isset($_SESSION['os_update_6005'])) {
    // initialize our variables
    $_SESSION['os_update_6005'] = array(
      'views-publication_years-block_1' => 'year',
      'views-publication_contributors-block_1' => 'contributors',
      'scholar_publications-pub_by_type' => 'type'
    );
  }

  foreach ($_SESSION['os_update_6005'] as $block => $type) {
    $box = (object)(array)boxes_factory('os_boxes_pub_grps', array('type' => $type));
    switch ($type) {
      case 'year':
        $box->title = $box->description = "Publications By Year";
      break;
      case 'contributors':
        $box->title = $box->description = "Publications By Co-Author";
      break;
      case 'type':
        $box->title = $box->description = "Publications By Type";
      break;
    }
    $s = "SELECT DISTINCT(id) AS sid, type FROM {spaces_overrides} WHERE object_type='context' AND value LIKE '%%%s%%'";
    $q = db_query($s, $block);
    // for each vsite that uses this block, we need to create a new box instance
    // and by new instance, we mean delta
    while ($r = db_fetch_array($q)) {
      $box->delta = os_boxes_create_delta($r['sid']);
      replace_boxes($block, $box, false, $r['sid']);
      $override = array(
        'type' => $r['type'],
        'id' => $r['sid'],
        'object_type' => 'boxes',
        'object_id' => $box->delta,
        'value' => $box,
      );

     drupal_write_record('spaces_overrides', $override);
    }
    
    break;
  }

  array_shift($_SESSION['os_update_6005']);
  
  if(!count($_SESSION['os_update_6005'])){
    $res[] = array(
      'success' => true,
      'query' => 'Publication blocks have been replaced with boxes.'
    );
  }else{
    // Report how much is left to complete.
    $res['#finished'] = count($_SESSION['os_update_6005']) / 3;
  }
  

  return $res;
}

/**
 * Update the twitter block to a box
 * @param array $sandbox
 */
function os_update_6006(&$sandbox){
  
  if(!module_exists('boxes')){
    return array("#abort" => array('success' => FALSE, 'query' => 'Boxes module was not installed when this update ran, please run update.php again.'));
  }
  
  module_load_include('inc', 'os_boxes', 'os_boxes.newbox_api');

  //Get all the sites with twitter blocks setup
  $q = db_query("SELECT * FROM {spaces_overrides} WHERE `object_type` LIKE 'variable' AND `object_id` LIKE 'scholar_reader_twitter_username' ");
  while ($res = db_fetch_object($q)) {
    $twitter_username = unserialize($res->value);
    if(strlen($twitter_username)){
      $twitter_box = boxes_factory('os_boxes_twitterfeed', array('twitter_username' => $twitter_username, 'title' => "Twitter Feed", 'description' => "Twitter Updates"));
      $twitter_box->delta = os_boxes_create_delta("{$res->type}-{$res->id}");

      unset($twitter_box->new);
      unset($twitter_box->export_type);
      $box = new stdClass();
      foreach ($twitter_box as $k => $v) $box->$k = $v; //convert to std class

      $override = array(
        'type' => $res->type,
        'id' => $res->id,
        'object_type' => 'boxes',
        'object_id' => $box->delta,
        'value' => $box,
      );
      drupal_write_record('spaces_overrides', $override);

      replace_boxes('scholar_reader-my_twitter_feed', $twitter_box, false, $res->id);
    }
  }

  $res[] = array(
    'success' => true,
    'query' => 'Updated twitter boxes for scholar reader',
  );

  return $res;
}