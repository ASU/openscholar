<?php 

/**
 * @file
 * 
 * os_simpleview_list module
 * Let's users provide settings to vsite_view_base view per content type
 * Accessible for creating a page or box
 **/

/**
 * Implements hook_menu()
 */
function os_simpleview_list_menu() {
  $items = array();
  $items['os_simpleview_list/%ctools_js'] = array(
    'type' => MENU_CALLBACK, 
    'title' => 'New List Items', 
    'page callback' => 'os_simpleview_list_page',
    'page arguments' => array(1), 
    'access callback' => 'cp_access_cp',
    //'access arguments' => array('access content'),
  );
  
  return $items;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function os_simpleview_list_ctools_plugin_api($module, $api) {
  if ($module == 'os_simpleview_list' && $api == 'plugins') {
    return array('version' => 1);
  } elseif ($module == 'boxes' && $api == 'plugins') {
    return array('version' => 1);
  }
}


/**
 * Implementation of hook_ctools_plugin_directory
 */
function os_simpleview_list_ctools_plugin_directory($module, $plugin) {
  if ($module == 'os_simpleview_list' && !empty($plugin)) {
    return "plugins/$plugin";
   }
}
 
/**
 * Implementation of hook_os_simpleview_list_plugins
 *
 * Array key (default in this case) informs simpleview about which content type to use
 * with the class specified in handler
 */
function os_simpleview_list_os_simpleview_list_plugin(){
	$path = drupal_get_path('module', 'os_simpleview_list') . '/plugins/';

	//$info = array('os_simpleview_list_default' => array( //change this name
	$info = array(
		'default' => array( // this key indicates which content type to use to get this class
  		'handler' => array(
  			'class' => 'os_simpleview_list_default',
  			'file'  => 'os_simpleview_list_default.inc',
  			'path'  => $path,
  	    'title' => t('List of Posts'),
  		)
	  )
	);
	
	return $info;
}



/**
 * @function os_simpleview_list_plugin_load
 *
 * Load one or more plugins
 */
function os_simpleview_list_plugin_load($type = NULL) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('os_simpleview_list', 'plugin');
  
  if (isset($type)) {
    return $plugins[$type];
  } else {
    return $plugins;
  }
}

/**
 * Implementation of hook_boxes_plugins().
 * 
 * Provides SV list plugins as a unified box widget
 */
function os_simpleview_list_boxes_plugins(){
  $info = array(); 
  //$css = drupal_get_path('module', 'os_sipmleview_list') . '/theme/os-mailchimp.css';

  $info['os_simpleview_list_box'] = array(
    'title' => '(New) Post List',
    'description' => 'Make a list of content by type',
    //'css' => $css,
    'tags' => array(
      'Content'
    ),
    'handler' => array(
      'class' => 'os_simpleview_list_box',
      'file' => 'os_simpleview_list_box.inc',
      'path' => drupal_get_path('module', 'os_simpleview_list') . '/plugins/boxes/',
      'parent' => 'os_boxes_modalframe'
    ),
    //'access' => 'cp_access_cp',
    'access' => TRUE,
    'factory_path' => 'os_simpleview_list/js',
  );

  return $info;
}


/**
 * @function os_simpleview_list_page
 *
 * Menu item shows wizard/form
 */
function os_simpleview_list_page($js = NULL, $step = NULL) { //ditch these args/defaults since they don't always get called?
  $js = (arg(1) == 'js') ? TRUE : $js;
  ctools_include('wizard');
  
 // ctools_include('ajax'); //required for modal
  $cache_name = 'os_simpleview_list';
 // $js = TRUE; //just for debug
  
  // Get cache, set up default form state with values from cache
  if (empty($step)) {
    os_simpleview_list_cache_clear($cache_name);
    $cached = NULL;
  } else {
    $cached = os_simpleview_list_cache_get($cache_name);
  }
  
  $form_state = array(
    'ajax' => $js,
    'cache_name' => $cache_name,
    'cached' => &$cached,  
 //   'modal' => TRUE,
//  	'rerender' => TRUE, //kills the blank form error, but no new form is drawn
  );
  
  //Get appropriate plugin/class
  $content_type = (isset($cached['content_type'])) ? $cached['content_type'] : 'default';   
  $plugins = os_simpleview_list_plugin_load(); 
  $plugin = (isset($plugins[$content_type])) ? $plugins[$content_type] : $plugins['default'];
  
  //Instantiate class, get definition for multi-page form
  $class = ctools_plugin_get_class($plugin, 'handler');
  $instance = new $class();
  $form_info = $instance->multiform_info($js);
  
  // Check the current step's form id.  If it isn't defined assume it's inside the content class.    
  $step = ($step) ? $step : array_shift(array_keys($form_info['forms']));
  if (isset($form_info['forms'][$step]) && !function_exists($form_info['forms'][$step]['form id'])) {
    $form_info['forms'][$step]['form method'] = $form_info['forms'][$step]['form id']; 
    $form_info['forms'][$step]['form id'] = 'os_simpleview_list_simpleview_class_form';
  } 
  
  //Now we're ready to build and return a form
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  
  return $form;
}

/**
 * @function os_simpleview_list_simpleview_class_form
 * 
 * Each form is fetched from an object.  That object's methods are not available globally.  
 * When using such a form, that form id is replaced with simpleview_class_form, which returns
 * the form in our object
 */
function os_simpleview_list_simpleview_class_form(&$form, &$form_state) {
  $step = $form_state['step'];
  $class = $form_state['form_info']['forms'][$step]['class'];
  $form_method = $form_state['form_info']['forms'][$step]['form method'];
  
  $plugin = os_simpleview_list_plugin_load($class); //y u no load?  plugin is just default.  not name of whole class
  $class_handler = ctools_plugin_get_class($plugin, 'handler');
  $instance = new $class(); //class_handler()
  
  $form += $instance->$form_method();
  
  
  //do we need ctools-use-ajax in the form or is that implid by wizard_submit?
  return $form;
}



/**
 * object_cache functions
 * os_simpleview_list_cache_{get,set,clear}
 */

function os_simpleview_list_cache_set($cache_name, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('os_simpleview_list', $cache_name, $object);
}

function os_simpleview_list_cache_get($cache_name) {
  ctools_include('object-cache');
  return ctools_object_cache_get('os_simpleview_list', $cache_name);
}

function os_simpleview_list_cache_clear($cache_name) {
  ctools_include('object-cache'); 
	ctools_object_cache_clear('os_simpleview_list', $cache_name); 
};


/**
 * multiform functions - next, cancel return
 * handle cases for user clicking next, cancel, or return.
 */
function os_simpleview_list_multiform_next(&$form_state) { 
  if (($cached = os_simpleview_list_cache_get($form_state['cache_name'])) == FALSE) {
    $cached = array();
  }
  
	$form_state['cached'] = $form_state['values'] + $cached; 
	os_simpleview_list_cache_set($form_state['cache_name'], $form_state['cached']); 
};
 
function os_simpleview_list_multiform_cancel(&$form_state) { 
	ctools_object_cache_clear('os_simpleview_list', $form_state['cache_name']); 
	$form_state['redirect'] = 'os_simpleview_list'; 
	drupal_set_message('Multi-step form cancelled.'); 
};

function os_simpleview_list_multiform_finish(&$form_state) { 
  $cached = os_simpleview_list_cache_get($form_state['cache_name']);
  $cached = ($cached) ? $cached : array();
  $values = $cached + $form_state['values'];
  
  // save values into a new box or menu entry, context depending
  
  //lets try a box
  if (($box = os_simpleview_list_make_box($values)) != FALSE) {
    //success!
    os_simpleview_list_cache_clear($form_state['cache_name']); //do this once it's complete, not before we make box
  }
  
	drupal_set_message('form done'); 
	drupal_goto('os_simpleview_list/nojs'); //where to send them?
};


/**
 * @function os_simpleviewlist_make_box
 *
 * Form is complete.  Build a box and add it to the vsite.
 */
function os_simpleview_list_make_box($opts){
  if (($vsite = vsite_get_vsite()) != FALSE) {
    $type = 'os_simpleview_list_box';
    
    $ignore = array_flip(array('return', 'previous', 'form_id', 'form_token', 'form_build_id', 'op', 'next'));
    $opts = array_diff_key($opts, $ignore); //strip ctools form elements before sending them to box
          //should we also pull option defaults and only set values included there?  not necessary yet, but might be needed as more form elements show up.
          //how to handle nested values, like in a fieldset?
    require_once drupal_get_path('module', 'os') . '/includes/os.boxes.inc';
    return os_boxes_mk_box($vsite, $type, $opts);
  } 
  return false;
}