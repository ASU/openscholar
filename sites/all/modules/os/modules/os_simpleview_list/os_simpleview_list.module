<?php 

/**
 * @file
 * 
 * os_simpleview_list module
 * Let's users provide settings to vsite_view_base view per content type
 * Accessible for creating a page or box
 **/

include_once('os_simpleview_list.features.inc');

/**
 * Implements hook_menu()
 */
function os_simpleview_list_menu() {
  $items = array();
  $items['os_simpleview_list/%ctools_js'] = array(
    'type' => MENU_CALLBACK, 
    'title' => 'New List Items', 
    'page callback' => 'os_simpleview_list_page',
    'page arguments' => array(1), 
    'access callback' => 'cp_access_cp',
    //'access arguments' => array('access content'),
  );
  $items['os_simpleview_list/%ctools_js/%step'] = $items['os_simpleview_list/%ctools_js'];
  $items['os_simpleview_list/%ctools_js/%step']['page arguments'] = array(1,2); 
  return $items;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function os_simpleview_list_ctools_plugin_api($module, $api) {
  if ($module == 'os_simpleview_list' && $api == 'plugins') {
    return array('version' => 1);
  } elseif ($module == 'boxes' && $api == 'plugins') {
    return array('version' => 1);
  }
}


/**
 * Implementation of hook_ctools_plugin_directory
 */
function os_simpleview_list_ctools_plugin_directory($module, $plugin) {
  if ($module == 'os_simpleview_list' && !empty($plugin)) {
    return "plugins/$plugin";
   }
}
 
/**
 * Implementation of hook_os_simpleview_list_plugins
 *
 * Array key (default in this case) informs simpleview about which content type to use
 * with the class specified in handler
 */
function os_simpleview_list_os_simpleview_list_plugin(){
	$path = drupal_get_path('module', 'os_simpleview_list') . '/plugins/';

	$info = array(
	  //abstract class to implement for custom plugins
	  'os_simpleview_list' => array(
	    'content_type' => NULL,
	    'handler' => array(
	    	'class' => 'os_simpleview_list',
  			'file'  => 'os_simpleview_list.inc',
  			'path'  => $path,
	    ),
	  ), 
	
	  //default list until overridden
		'default' => array(
	    'content_type' => 'default',
  		'handler' => array(
  			'class' => 'os_simpleview_list_default',
  			'file'  => 'os_simpleview_list_default.inc',
  			'path'  => $path,
  	    'title' => t('List of Posts'),
	      'parent' => 'os_simpleview_list',
  		)
	  ),
	);
	
	return $info;
}



/**
 * @function os_simpleview_list_plugin_load
 *
 * Load one or more plugins
 */
function os_simpleview_list_plugin_load($type = NULL) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('os_simpleview_list', 'plugin');
  
  if (isset($type)) {
    return $plugins[$type];
  } else {
    return $plugins;
  }
}

/**
 * Implementation of hook_boxes_plugins().
 * 
 * Provides SV list plugins as a unified box widget
 */
function os_simpleview_list_boxes_plugins(){
  $info = array(); 

  $info['os_simpleview_list_box'] = array(
    'title' => '(New) Post List',
    'description' => 'Make a list of content by type',
    'tags' => array(
      'Content'
    ),
    'handler' => array(
      'class' => 'os_simpleview_list_box',
      'file' => 'os_simpleview_list_box.inc',
      'path' => drupal_get_path('module', 'os_simpleview_list') . '/plugins/boxes/',
      'parent' => 'os_boxes_default'
    ),
    'access' => TRUE, //'cp_access_cp'?
    'factory_path' => 'os_simpleview_list/nojs',
  );

  return $info;
}

/**
 * @function os_simpleview_list_page
 *
 * Menu item shows wizard/form
 */
function os_simpleview_list_page($js = NULL, $step = NULL, $delta=NULL) {
  ctools_include('wizard');
  ctools_include('ajax');
  ctools_include('modal');
  $cache_name = 'os_simpleview_list';
  
  // Starting a new form, set first page and a new cache
  if (empty($step) || $step == 'dropdown') { //going back empties the step...
    os_simpleview_list_cache_clear($cache_name);
    $origin = arg(5);
    $step = 'basics'; 
  }
  
  //get what's already cached and construct a form state
  $cached = os_simpleview_list_cache_get($cache_name);
  $cached['origin'] = ($origin) ? $origin : $cached['origin']; 
  $form_state = array(
    'ajax' => $js,
    'cache_name' => $cache_name,
    'cached' => &$cached,
  );
  
  if ($delta) {
    $cached['delta'] = $delta;
  }
  
  os_simpleview_list_cache_set($cache_name, $cached);
  
  //build and display multistep form
  $content_type = ($cached['content_type']) ? $cached['content_type'] : $_POST['content_type'];
  $form_info = os_simpleview_list_multiform_info($js, $content_type);
  $output = ctools_wizard_multistep_form($form_info, $step, $form_state);
  
  return os_simpleview_list_ajax_render($form_state, $output);
}

/**
 * @function os_simpleview_list_multiform_info
 * 
 * Sets up multistep form, retrieiving forms from active plugin
 */
function os_simpleview_list_multiform_info($js, $content_type) { 
  $form_info = array(
    'id' => 'os_simpleviews_list', 
    'path' => 'os_simpleview_list/nojs/%step',  
    'show trail' => TRUE,
    'show back' => TRUE,
    'show return' => FALSE,
    'next callback' => 'os_simpleview_list_multiform_next',
    'finish callback' => 'os_simpleview_list_multiform_finish',
    'cancel callback' => 'os_simpleview_list_multiform_cancel',
  );
  
  //Append forms from appropriate content type
  $plugin = os_simpleview_list_get_content_type_plugin($content_type);
  $class = ctools_plugin_get_class($plugin, 'handler');
  $instance = new $class();
  
  //Get forms from plugins.  Override the method to generic form and tell generic form which class to load to get original method
  $forms = $instance->multiform_info();
  foreach ($forms as $key => $form) {
    $forms[$key]['class'] = $class;
    $forms[$key]['form method'] = $forms[$key]['form id'];
    $forms[$key]['form id'] = 'os_simpleview_list_simpleview_class_form';  
  }
  $form_info['forms'] = $forms;
  
  return $form_info;
}

/**
 * @function os_simpleview_list_simpleview_class_form
 * 
 * Each form is fetched from an object.  That object's methods are not available globally.  
 * When using such a form, that form id is replaced with simpleview_class_form, which returns
 * the form in our object
 */
function os_simpleview_list_simpleview_class_form(&$form, &$form_state) {
	ctools_include('dependent');
  ctools_add_js('dependent');
  drupal_add_js('misc/jquery.form.js');
  ctools_add_js('ajax-responder');

  $step = $form_state['step']; 
  $class = $form_state['form_info']['forms'][$step]['class'];
  $instance = new $class(); 
  $form_method = $form_state['form_info']['forms'][$step]['form method']; 
  
  //build up default options to show in the form.  order matters.  array union (+) ignores fields that are already in left array
  $default_options = array();

  //options set during this session are highest priority
  if ($form_state['cached']) {
    $default_options += $form_state['cached'];
  }
  
  //if we're editing an existing box, include the box's options that are already set
  if ($form_state['cached']['delta']) { 
    $default_options += _os_simpleview_list_box_options($form_state['cached']['delta']);
  }
  
  //finally, the basic defaults if nothing else is set
  $default_options += $instance->options_defaults();
  $default_options += $default_options['plugin_opts'];

  $plugin_form = $instance->$form_method($default_options);
  $form += $plugin_form;
  $form_state['input'] += $default_options; //makes sure elements are in post so fapi can use default values

  return $form;
}


/**
 * @function os_simpleview_list_ajax_render
 * 
 * When using ajax, passes rendered form back to browser  
 * See http://drupal.org/node/689746
 * 
 * also used as generic finish up function before passing form back home
 */

function os_simpleview_list_ajax_render(&$form_state, $output) {  
  if ($form_state['ajax']) {
    $commands = array();
    $commands = ctools_modal_form_render($form_state, $output);
    ctools_ajax_render($commands);
    
  } else {
    return $output;
  } 
}

/**
 * object_cache functions
 * os_simpleview_list_cache_{get,set,clear}
 */

function os_simpleview_list_cache_set($cache_name, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('os_simpleview_list', $cache_name, $object);
}

function os_simpleview_list_cache_get($cache_name) {
  ctools_include('object-cache');
  $cache = ctools_object_cache_get('os_simpleview_list', $cache_name);
  return ($cache) ? $cache : array();
}

function os_simpleview_list_cache_clear($cache_name) {
  ctools_include('object-cache'); 
	ctools_object_cache_clear('os_simpleview_list', $cache_name); 
};


/**
 * multiform functions - next, cancel return
 * handle cases for user clicking next, cancel, or return.
 */
function os_simpleview_list_multiform_next(&$form_state) { 
  os_simpleview_list_cache_set($form_state['cache_name'], $form_state['cached'] + $form_state['values']);
  
  //ctools has advanced the form a step, let it be rendered
  if ($form_state['ajax']) {
    $form_state['ajax render'] = 'os_simpleview_list_ajax_render';
    $form_state['rerender'] = TRUE;
  }
};
 
function os_simpleview_list_multiform_cancel(&$form_state) { 
	ctools_object_cache_clear('os_simpleview_list', $form_state['cache_name']); 
	drupal_set_message('Multi-step form cancelled.'); 
	$form_state['redirect'] = 'os_simpleview_list';
	 
};

function os_simpleview_list_multiform_finish(&$form_state) { 
  $cached = os_simpleview_list_cache_get($form_state['cache_name']);
  $cached = ($cached) ? $cached : array();
  $values = $cached + $form_state['values'];
  $commands = array();
  
  //update an existing box
  if ($cached['delta']) {
    $box = boxes_load($values['delta']);
    
    //update box properties - title, desc, etc
    foreach (array_intersect_key((array)$box, $values) as $key => $value) {
      $box->$key = $values[$key];
    }
    
    //update box options
    foreach (array_intersect_key($box->options, $values) as $key => $value) {
      $box->options[$key] = $values[$key];
    }
    
    $plugin = os_simpleview_list_get_content_type_plugin($cached['content_type']);
    $class = ctools_plugin_get_class($plugin, 'handler');
    $instance = new $class();
    $options_defaults = $instance->options_defaults();
    $plugin_opts = $options_defaults['plugin_opts'];
    
    //update plugin options
    foreach(array_intersect_key($plugin_opts, $values) as $key => $value) {
      $box->options['plugin_opts'][$key] = $values[$key];
    }
    
    if (module_exists('spaces') && $space = spaces_get_space()) {
      $space->controllers->boxes->set($box->delta, $box);
    } else {
      $box->save();  
    }
    
    //in a vsite, reload to see updated widget.
    if ($cached['origin'] == 'front') {
      $commands[] = ctools_ajax_command_reload();
    }
    //cp: do nothing
	  //$commands[] = ctools_ajax_command_changed('#boxes-'.$box->delta);
  
  } else { 
    //new box
    if (($box = os_simpleview_list_make_box($values)) != FALSE) {
      os_simpleview_list_cache_clear($form_state['cache_name']); //do this once it's complete, not before we make box
      $commands[] = ctools_ajax_command_before('#scholarlayout-top-widgets .scholarlayout-item:nth-child(2)', theme('vsite_layout_ui_cp_widget', 'boxes-'.$box->delta, os_boxes_get_vsite_widget($box)));
	    $commands[] = ctools_ajax_command_changed('#boxes-'.$box->delta);
    }
  }
  
  //redirect or just close the form depending on js/modal
  if ($form_state['ajax']) {
    $commands[] = ctools_modal_command_dismiss();
    ctools_ajax_render($commands);
  } else {
  	drupal_set_message('form done'); 
	  drupal_goto('os_simpleview_list/nojs'); //where to send them? @TODO
  } 
   
};



/**
 * @function os_simpleviewlist_make_box
 *
 * Form is complete.  Build a box and add it to the vsite.
 */
function os_simpleview_list_make_box($opts){
  //this could be a generic save box function that saves or makes depending on presence of delta...  would clean up finish a bit
  if (($vsite = vsite_get_vsite()) != FALSE) {
    $type = 'os_simpleview_list_box';
    $opts['plugin_opts'] = os_simpleview_list_plugin_opts($opts); //populate plugin_opts
    
    $ignore = array_flip(array('return', 'previous', 'form_id', 'form_token', 'form_build_id', 'op', 'next'));
    $opts = array_diff_key($opts, $ignore);
    require_once drupal_get_path('module', 'os') . '/includes/os.boxes.inc';
    return os_boxes_mk_box($vsite, $type, $opts);
  } 
  return false;
}


/**
 * @function os_simpleview_list_get_content_type_plugin
 * 
 * Returns a plugin for the specified content type.  If none match, returns default.
 */
function os_simpleview_list_get_content_type_plugin($content_type) {   
  $plugins = os_simpleview_list_plugin_load();
  foreach($plugins as $key => $plugin) {
    if ($plugin['content_type'] == $content_type && $content_type != null) {
      return $plugin;
    }
  }
      
  return $plugins['default'];
}

/**
 * @function os_simpleview_list_plugin_opts
 * 
 * Boxes can only set a pretedetermined list of options when a box is created.
 * That list is not able to retrieve option_defaults from individual plugins.
 * Instead, it includes an array called plugin_opts.  This function looks at 
 * the options we're about to pass to the box and returns an array of options
 * from the appropriate content type plugin, to be used as plugin_opts
 */
function os_simpleview_list_plugin_opts($opts = array()) {
  $plugin = os_simpleview_list_get_content_type_plugin($opts['content_type']);
  $class = ctools_plugin_get_class($plugin, 'handler');
  $instance = new $class();
  $options_defaults = $instance->options_defaults();
  $plugin_opts = $options_defaults['plugin_opts'];
  
  foreach($plugin_opts as $option => $value) {
    $plugin_opts[$option] = (isset($opts[$option])) ? $opts[$option] : $value;
  }
  
  return $plugin_opts;
}

/**
 * @function _os_simpleview_list_content_types()
 * 
 * returns a list of content types and their names
 */
function _os_simpleview_list_content_types() {
  // os/vsite integration - lists correct content types
  if (module_exists('vsite') && vsite_get_vsite()) {
    vsite_include('vsiteapi');
    $node_options = vsite_content_types(array(1,2));       //Get public and private types
    drupal_alter('vsite_content_types', $node_options);
  }
  
  if (! isset($node_options)) {
    $node_options = node_get_types('names');
  }
  
  return $node_options;
}

/**
 * @function _os_simpleview_list_content_type_to_vsite_path
 *
 * Given a content type, returns path to that content type in this vsite.
 */
function _os_simpleview_list_content_type_to_vsite_path($content_type) {
  $feature_types = features_get_component_map('node');
  $menu_item = vsite_menus_get_feature_menu_item($feature_types[$content_type][0]);
  return (isset($menu_item[0]['link_path'])) ? $menu_item[0]['link_path'] : FALSE;
}


/**
 * @function os_simpleview_list_box_options($delta)
 *
 * Get options from existing box.  Pass them back to multiform so they can be presented when form is edited
 * plugin_opts should be added as regular opts so they can be shown as well
 */
function _os_simpleview_list_box_options($delta) {
  if ($box = boxes_load($delta)) {
    $box_options = array_merge($box->options, $box->options['plugin_opts']);
    return $box_options;
  } else {
    return array();
  }
}