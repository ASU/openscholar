<?php

include_once('os_wysiwyg_fields.features.inc');

function os_wysiwyg_fields_menu() {
  $menu = array();
  $menu['admin/build/oembed/embedly'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Embedly API Key'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_wysiwyg_fields_api_key_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $menu;
}

function os_wysiwyg_fields_api_key_form() {
  $form = array();
  $form['help_text'] = array(
    '#type' => 'markup',
    '#value' => '<p>'.t('Without an embed.ly api key, you will be restricted to 50 embedded videos through their service a day, and have access to a limited set of their providers. To increase that limit, get an API key from embed.ly and enter it here.').'</p>',
  );
  $form['os_wysiwyg_fields_api_key'] = array(
    '#title' => t('API Key'),
    '#type' => 'textfield',
    '#default_value' => variable_get('os_wysiwyg_fields_api_key', ''),
  );

  return system_settings_form($form);
}

function os_wysiwyg_fields_wysiwyg_fields_add_js($type) {
  switch ($type) {
    case 'node_form':
      if (file_exists($js = drupal_get_path('module', 'os_wysiwyg_fields') . "/theme/os_wysiwyg_fields.js")) {
        drupal_add_js($js);
      }
  }
}

function os_wysiwyg_fields_field_formatter_info() {
  return array(
    'os_file_description' => array(
      'label' => t('OS: File Description'),
      'field types' => array('filefield'),
      'description' => t('Display File Description as Link to File'),
    ),
  );
}

function os_wysiwyg_fields_theme() {
  return array(
    'os_wysiwyg_fields_formatter_os_file_description' => array (
      'arguments' => array(
        'element' => null,
      )
    )
  );
}

function theme_os_wysiwyg_fields_formatter_os_file_description($element) {
  $item = $element['#item'];
  return '<a href="'.$GLOBALS['base_path'].$item['filepath'].'">'.$item['data']['description'].'</a>';
}

function os_wysiwyg_fields_insert_styles() {
  return array(
    'os_file_description' => array(
      'label' => t('File Description'),
      'weight' => -10,
    ),
  );
}

function os_wysiwyg_fields_insert_content($item, $style, $widget) {
  $item['data']['description'] = $item['data']['description'] == '' ? '__description__' : $item['data']['description'];

  $element = array(
    '#formatter' => $style['name'],
    '#item' => $item,
  );

  return theme('os_wysiwyg_fields_formatter_' . $element['#formatter'], $element);
}

function os_wysiwyg_fields_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] != 'node-form') return;

  // look for filefields with wysiwyg somewhere in there
  // add prerender to change weights of buttons around
  foreach (array('field_os_inline_files', 'field_os_inline_image') as $field) {
    if (!is_array($form[$field])) continue;
    foreach ($form[$field] as $delta => $data) {
      if (is_numeric($delta)) {
        $form[$field][$delta]['#pre_render'][] = 'os_wysiwyg_fields_inline_field_prerender';
      }
    }
  }
  // remove extra oembed field
  if (is_null($form['nid']['#value'])) {
    unset($form['field_os_inline_oembed'][1]);
  }
}

function os_wysiwyg_fields_inline_field_prerender($elements) {
  if (isset($elements['insert']))
    $elements['insert']['#weight'] = 100;

  if ($elements['#field_name'] == 'field_os_inline_files' && $elements['#post']['op'] == 'Upload' && is_array($elements['#value'])) {
    $elements['#default_value']['data']['description'] = $elements['#value']['filename'];
    $elements['data']['description']['#value'] = $elements['#value']['filename'];
  }
  return $elements;
}

function os_wysiwyg_fields_oembedprovider_alter(&$providers) {
  // add callback so we can add the API key to the query

  $providers_full = oembedcore_provider_load_all();
  foreach ($providers_full as $p) {
    if (!$p->disabled && strpos($p->name, 'oembedembedly') !== FALSE) {
      $schemes = explode("\n", $p->scheme);
      foreach ($schemes as $scheme) {
        $pattern_replacements = array();
        $host = _oembedcore_get_host($scheme);
        if (!is_array($providers[$host])) continue;
        foreach ($providers[$host] as $regex => &$pattern) {
          if ($pos = strrpos($regex, '(.+)', strlen($regex)-5)) {
            $pattern_replacements[$regex] = substr_replace($regex, '(.*)', $pos, 4);
          }
          $pattern['callback'] = 'os_wysiwyg_fields_oembed_provider_callback';
        }
        foreach ($pattern_replacements as $old => $new) {
          $providers[$host][$new] = $providers[$host][$old];
          unset($providers[$host][$old]);
        }
      }
    }
  }
}

function os_wysiwyg_fields_oembed_provider_callback($provider, $url, $matches, $attributes) {
  if ($api_key = variable_get('os_wysiwyg_fields_api_key', '')) {
    $attributes['key'] = $api_key;
  }

  unset($provider['callback']);
  $embed = oembedcore_oembed_fetch($provider, $url, $matches, $attributes);


  // TODO: Refactor using DOMDocument
  // DOMDocument will take a string as HTML. More forgiving than XML
  //  $xml = str_replace(array('&'), array('%26'), $embed->html);
  // do things to it
  $html = new SimpleXMLElement($xml);
  if ($html->getName() == 'object') {
    $param = $html->addChild('param');
    $param->addAttribute('name', 'wmode');
    $param->addAttribute('value', 'transparent');
    foreach ($html->children() as $child) {
      if ($child->getName() == 'embed') {
        $child->addAttribute('wmode', 'transparent');
      }
    }

    $embed->html = str_replace('<?xml version="1.0"?>', '', $html->asXML());
  }

  return $embed;
}
