<?php

/*
 * Gets the root node of any book tree
 */
function os_books_get_root($node, $level = 0) {
  if (is_numeric($node)) $node = node_load($node);

  if (!isset($node->book)) return $node;
  if ($level) {
    if (isset($node->book) && $node->book['depth'] > $level) { // book page
      while($node -> book['depth'] > $level){
        $parent = book_link_load($node->book['plid']);
        $pid = $parent['nid'];
        $node = node_load(array('nid' => $pid));
      }
    }
  }
  else {
    $node = node_load($node->book['bid']);
  }
  return $node;
}

/*
 * Takes any node in a book tree and builds the entirety of that tree
 */
function os_books_build_tree($node, $flatten = false) {
  $root = os_books_get_root($node);

  if (isset($root->book)) {
    $cache = _os_books_get_cache($root->nid);
    if ($cache) return $cache;

    $tree = book_menu_subtree_data($root->book);
    if ($flatten) $tree = _os_books_flatten_book($tree);
    $output = book_export_traverse($tree, false);

    $cache_key = _os_books_get_cache_key($root->nid);
    cache_set($cache_key, $output, 'cache_page', CACHE_PERMANENT);
    return $output;
  }
}

/**
 * Replace the body of the node with the full book
 */
function os_books_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'view' && $node->type == 'book' && $page) {
    $content = os_books_build_tree($node, true);
    $content = str_replace(array('node-', 'class="section'), array('book-node-', 'class="book-page section'), $content);
    $node->content['full-book'] = array(
      '#value' => $content,
      '#weight' => 10,
    );
  }
}

function os_books_preprocess_node(&$vars) {
  if ($vars['node']->type == 'book') {
    $path = drupal_get_path('module', 'os_books');
    drupal_add_js($path.'/os_books.js', 'module');
    drupal_add_css($path.'/os_books.css');
  }
}

/*
 * Implementation of hook_link.
 */
function os_books_link($type, $node, $teaser = FALSE) {
  $links = array();
  if ($type == 'node' && $node->type == 'book') {
    $links['permalink'] = array(
      'title' => t('Permalink'),
      'href' => drupal_get_path_alias('node/'. $node->nid),
      'attributes' => array(
      	'id' => t('book-permalink'),
      	'title' => t('Permanent Link')
      ),
    );
  }
  return $links;
}

/**
 * Flattens our book tree
 * @param array $tree
 */
function _os_books_flatten_book($tree) {
  if (!is_array($tree)) {
    return array();
  }
  $result = array();
  foreach ($tree as $key => $value) {
    $result[$key]['link'] = $value['link'];
    $result = array_merge($result, _os_books_flatten_book($value['below']));
  }
  return $result;
}

function _os_books_get_cache($root) {
  if (is_object($root) && isset($root->nid)) {
    $root = $root->nid;
  }
  elseif (!(int)$root || !module_exists('views_content_cache')) {
    return FALSE;
  }

  $cutoff = 0;
  $cache_params = array(
    'os_og' => array('current' => 'current'),
  );

  // Retrieve the latest update time matching the settings on this View.
  $cid = array();
  foreach ($cache_params as $key_id => $key_values) {
    if ($plugin = views_content_cache_get_plugin($key_id)) {
      $cid[$key_id] = $plugin->view_key($key_values);
    }
  }
  if (!empty($cid) && ($timestamp = views_content_cache_update_get($cid))) {
    $cutoff = $timestamp;
  }

  $cache_key = _os_books_get_cache_key($root);
  if (($cache = cache_get($cache_key, 'cache_page')) && (!$cutoff || $cache->created > $cutoff)) {
    return $cache->data;
  }
}

function _os_books_get_cache_key($root) {
  global $theme, $user;

  static $key = null;
  if (!is_null($key)) return $key;

  $cid_parts = array();

  $vsite = vsite_get_vsite();
  $cid_parts[] = (isset($vsite->group->purl))? $vsite->group->purl:"";
  $cid_parts[] = "os_book";
  $cid_parts[] = "results";
  $cid_parts[] = $theme;
  $cid_parts[] = ($user->uid == 1)?1:0; // special caching for super user.

  $cid_parts[] = $root;

  if (module_exists('locale')) {
    global $language;
    $cid_parts[] = $language->language;
  }

  return $key = implode(':', $cid_parts);
}