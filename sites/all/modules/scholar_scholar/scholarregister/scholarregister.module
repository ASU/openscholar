<?php

/**
 * Implemenation of hook_menu()
 * @return unknown
 */
function scholarregister_menu(){
  $items = array();
  $items['site/register'] = array(
    'title' => 'Create your web site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholarregister_signup_form'),
    'file' => 'scholarregister.pages.inc',
    'access callback' => 'scholarregister_form_access',
  );

  $items['scholarregister/domain_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_domain_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['scholarregister/mail_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_mail_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['scholarregister/name_js'] = array(
    'title' => 'Create your web site',
    'page callback' => 'scholarregister_name_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Scholar register form access
 *@return boolean
 */
function scholarregister_form_access(){
  global $user;  
  if (user_access('access content')){
    return true; 
  }
  else {
    return false;
  }
}

/**
 * Handles access rules for when site owner is attempting to create a another site
 * @return  boolean
 */
function scholarregister_vsite_exists_access($vsites = array()){
  global $user;  
  $superuser = vsite_users_create_site_access($user);  
  if ($superuser) return true; // return true for superuser even if they own a site already
  
  //check global variable whether user can create multiple sites
  $multple_sites=  variable_get('scholar_create_multiple_sites', 0); //the default is one site only

  //user owns one site
  if (count($vsites) == 1){
    switch ($multple_sites){
      case 0:
        return false;
        break;
      case 1:
        return true;
        break;
    }
  }
  //user owns multiple sites
    if (count($vsites) > 1) {
      switch ($multple_sites){
      case 0:
        //this should never happen unless the $multiple_sites value is switched from 1 to 0 after site has been live
        return  false; 
        break;
      case 1:
        return  true;
        break;              
    }
  }
}

/**
 * Provides redirect path and message for form access denied scenarios
 */
function scholarregister_get_redirect($vsites = array()){
  switch (count($vsites)){
    case 0:
      return null;
      break;

    case 1:
      global $base_url;  
      drupal_set_message(t('You already have a registered web site.' . l(' Go there now.', $vsites[0] ->get_absolute_url())));
      return $base_url;
      break;

    default:
      return 'user';
      break;
  }
}

/**
 * ajax callback for name
 */
function scholarregister_name_js() {
  $name = $_POST ['ctools_changed'];

  if ($error = scholarregister_validate_name($name)){
    scholarregister_ctools_message('#name-suffix', $error, 'error');
  }
  
  // username is available
  scholarregister_ctools_message('#name-suffix', "available", 'status');
}

/**
 * ajax callback for mail
 */
function scholarregister_mail_js() {
  $mail = $_POST['ctools_changed'];
  if ($error = scholarregister_validate_mail($mail)){
    scholarregister_ctools_message('#mail-suffix', $error, 'error');
  }

  scholarregister_ctools_message('#mail-suffix', "available", 'status');
}

/**
 * ajax callback for domain
 */
function scholarregister_domain_js() {
  $domain = $_POST['ctools_changed'];

  if ($error = scholarregister_validate_domain($domain)){
    scholarregister_ctools_message('#domain-suffix', $error, 'error');
  }
  // ok then .. it's good and available
  scholarregister_ctools_message('#domain-suffix', "available", 'status'); // exits
}



function scholarregister_validate_name($name){
  if ($error = user_validate_name($name)){
    return $error;
  }
  elseif (_scholarregister_domain_exists($name) || _scholarregister_name_exists($name)){
    return "username \"$name\" is taken";
  }
}

/**
 * email validation function
 * @param $mail
 */
function scholarregister_validate_mail($mail) {
  // Validate the e-mail address:
  if ($error = user_validate_mail($mail)) {
    return $error;
  }
  elseif (_scholarregister_mail_exists($mail)){
    return "e-mail \"$mail\" already exists";
  }
  
  //THIS BLOCK SHOULD BE REMOVED AFTER NEXT RELEASE
  if(!module_exists('pinserver')){
    if (substr(trim($mail),-12) !== '.harvard.edu' && substr(trim($mail),-12) !== '@harvard.edu'
    && substr(trim($mail),-8) !== '@hbs.edu' && substr(trim($mail),-8) !== '.hbs.edu'){
      return  'Please enter an harvard email address ';
    }
  }
}

function scholarregister_validate_domain($domain){
  $modifier = array(
  'provider' => 'spaces_og',
  'value' => $domain,
  'id' => null,
  );

  if ($error = user_validate_name($domain)){  // the same validation as the username
    return $error;
  }
  elseif (!purl_validate($modifier) || _scholarregister_domain_exists($domain)){
    return "domain \"$domain\" is taken or invalid";
  }
}


/**
 * wrapper function for executing ajax commands
 * @param $id  the html selector (id)
 * @param $message the message to insert on the div with id=$id
 * @param $class  the class to apply to the div
 */
function scholarregister_ctools_message($id, $message, $class = 'error'){
  ctools_include ( 'ajax' );
  ctools_add_js ( 'ajax-responder' );
  $commands = array ();
  $commands [] = ctools_ajax_command_html ( $id, $message);
  $commands [] = ctools_ajax_command_attr($id, 'class', $class);
  ctools_ajax_render ( $commands );
}


function scholarregister_notify_user($vsite, $user){
  global $language;
  $params = array();
  $from = variable_get('site_mail', ini_get('sendmail_from'));

     //add vsite and user object
   $params['vsite'] = $vsite;
   $params['user'] = $user;
  
  // change users password
  /*
  $password = user_password();
  $edit = array(
    'pass' => $password
  );
  user_save($user, $edit);
  */
  $params['subject'] = t("A Scholars' Web Site has been created for you", array(
    '!site_name' => variable_get('site_name', 'Scholar\'s Web Sites Project')
  ));

  $scholar_site_url =  $site_url = url("node/" . $vsite -> sid, $options = array('absolute' => TRUE));
  $timestamp = time();
  
  $msg_variables = array(
    // '!personal_message' => strlen($s_personal_message) ? $s_personal_message . "\n================================================\n\n" : "",
    '!username' => $user->name,
    '!site' => variable_get('site_name', "Scholars' Web Sites Project"),
    '!scholar_site_url' => $scholar_site_url,
    //'!login_url' => url("user/reset/$user->uid/$timestamp/". user_pass_rehash($user->pass, $timestamp, $user->login), array('absolute' => TRUE)),
    '!login_url' => user_pass_reset_url($user),
    '!uri' => $base_url,
    '!uri_brief' => preg_replace('!^https?://!', '', $base_url),
    '!mailto' => $user->mail,
    '!date' => format_date(time(), 'medium', '', NULL, $message['language']->language),
    '!login_uri' => url('user', array(
      'absolute' => TRUE,
      'language' => $message['language']
    )),
    '!site_url' => url('node/' . $vsite->sid),
    '!edit_uri' => url('user/' . $user->uid . '/edit', array(
      'absolute' => TRUE,
      'language' => $message['language']
    )),
    '!scholar_edit_url' => url($vsite -> purl . "/cp/users/myaccount", array('absolute' => TRUE)),
    '!password' => $password
  );


  $body .= t("Hi !username,\n\nYour web site at !site has been activated.\n\nYour web site url is !scholar_site_url \n\nYou may now log in by clicking on this link or copying and pasting it in your browser: \n\n !login_url \n\nThis is a one-time login, so it can be used only once. After logging in, you will be redirected to !scholar_edit_url so you can change your password. Once you have set your own password, you will be able to log in to !login_uri in the future using:\n\nusername: !username\n\nWe hope you will enjoy your new web site.\n\nSincerely,\nThe !site Team", $msg_variables);

  $params['body'] = $body;
  if (! drupal_mail('scholarregister', 'scholar-register-notify', $user->mail, $language, $params, $from)) {
    drupal_set_message(t('Error sending notification mail to user.'), 'error');
  }
}


function scholarregister_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];
  
  //these values be used with any mail alter hooks
 $message['vsite'] = $params['vsite'];
 $message['user'] = $params['user'];
}


/** Private functions **/

function _scholarregister_domain_exists($domain){
  // check domain availability
  $query = "SELECT value FROM {purl} WHERE value='%s'";
  $existing_purl = db_result(db_query($query, $domain));

  return $existing_purl ? TRUE : FALSE;
}

function _scholarregister_name_exists($name){
  // check domain availability
  $query = "SELECT name FROM {users} WHERE name='%s'";
  $existing_name = db_result(db_query($query, $name));

  return $existing_name ? TRUE : FALSE;
}

function _scholarregister_mail_exists($mail){
  // check domain availability
  $query = "SELECT mail FROM {users} WHERE mail='%s'";
  $existing_mail = db_result(db_query($query, $mail));

  return $existing_mail ? TRUE : FALSE;
}

