<?php
function vsite_activity_init(){
	$a_valid_realms = variable_get('activity_access_realms', array('comment'));
	if(!in_array('vsite',$a_valid_realms)){
		variable_set('activity_access_realms', array_merge($a_valid_realms,array('vsite')));
	}
}

function vsite_activity_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
    	$context = array(
		    'hook' => 'nodeapi',
		    'op' => $op,
    	  'node' => $node
		  );
		    	
      actions_do('vsite_activity_action',$node,$context);
    break;
  }
}

/*
 * Implementation of hook menu
 */
function vsite_activity_menu(){

  $items = array();
  $items['cp/news/activity/privacy'] = array(
    'title' => "Activity Privacy Settings",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_settings_form', 'activity'),
    'file' => 'cp.settings.inc',
    'file path' => drupal_get_path('module', 'cp'). '/includes', 
    'access callback' => 'cp_access_cp',
  );

  return $items;
}

/**
 * The action hook
 */
function vsite_activity_action_info(){
	$info['vsite_activity_action'] = array(
	  'type' => 'activity',
	  'description' => t("Record a new node's creation for activity tracker"),
	  'configurable' => false,
	  'hooks' => array(
	    'any' => true,
	  ),
	);
	
	return $info;
}

/**
 * The action called to add a vsite modification to the activity table, Change the message here to 
 * @param $object
 * @param $context
 * @return unknown_type
 */
function vsite_activity_action($object, $context){
	
	if(!vsite_get_vsite()) return false;
	
	//Setup the advanced Patterns
	$context['node-pattern'] = 'You [action] a new [type-name] ([title])';
	$context['everyone-pattern'] = '[author-name] [action] a new [type-name] [in-vsite] ([title])';
	$context['activity_types'] = vsite_content_types(); 
	$s_action = 'modified';
	switch($context['op']){
		case 'submit':
	  case 'insert':
		case 'view':
			$s_action = $context['op']."ed";
    break;
    case 'update':
    	$s_action = $context['op']."d";
    break;
	}
	$context['node-pattern'] = str_replace('[action]',$s_action,$context['node-pattern']);
  $context['everyone-pattern'] = str_replace('[action]',$s_action,$context['everyone-pattern']);
	
	$vsite = vsite_get_vsite();
	if($vsite && $vsite->group->uid){
		$user = user_load($vsite->group->uid);
		$s_users_vsite = '';
    if($user && ($user->profile_first_name || $user->profile_last_name)){
    	$s_users_vsite = "in {$user->profile_first_name} {$user->profile_last_name}'s site";
    }
    $context['node-pattern'] = str_replace('[in-vsite]',$s_users_vsite,$context['node-pattern']);
    $context['everyone-pattern'] = str_replace('[in-vsite]',$s_users_vsite,$context['everyone-pattern']);
	}
	
  return activity_record($object,$context);
}

/**
* Implementation of hook_activity_grants().
*/
function vsite_activity_activity_grants($activity, $object, $type) {
  $vsite = vsite_get_vsite();  
  if(!$vsite) return array();
    
	return array(
    'vsite' => array($vsite->group->nid), // the module_id that will be used
  );
}

/**
* Implementation of hook_activity_info().
*/
function vsite_activity_activity_info() {
  $info = new stdClass();
  $info->api = 2;
  $info->name = 'vsite_activity';
  $info->object_type = 'vsite_activity';
  $info->realms = array('vsite' => 'Virtual Site (vsite)');
  $info->type_options = array();
  return $info;
}

/**
* Implementation of hook_activity_access_records_alter().
* This removes any access records except vsite. Prevents friend
* modules from providing direct access.
*/
function vsite_activity_access_records_alter(&$grants, $context) {
  foreach ($grants as $realm => $value) {
     if ($realm != 'vsite') {
         unset($grants[$module]);
     }
  }
}

/**
 * Implementation of hook_activity_access_grants().
 */
function vsite_activity_activity_access_grants($acccount) {
  //$a_sites = get_all_the_sites_this_dudes_following_func($account->uid);
  $a_sites = array(1,4,6);
  $realm_ids = array();
  if (!empty($a_sites)) {
    foreach ($a_sites as $n_vsite) {
      $realm_ids['vsite'][] = $n_vsite;
    }
  }
  return $realm_ids;
}

/**
 * Implementation of hook_spaces_settings().
 */
function vsite_activity_spaces_settings() {
  return array(
    'activity' => array(
      'class' => 'vsite_activity_settings_activity',
      'file' => drupal_get_path('module', 'vsite_activity') .'/includes/vsite_activity.settings.activity.inc',
    ),
  );
}

function vsite_activity_preprocess_views_view(&$variables) { //__vsite_activity_view
  if($variables['name'] != 'vsite_activity_view') return;
  
  $variables['header'] .= l('Privacy Settings','cp/news/activity/privacy', array('attributes' => array('class' => 'tabs')));
}