<?php

// $Id$

/**
 * @file
 *   Provides setup and configuration of common search widgets depending upon the currently installed search solution.  Supported options are
 *   Apache Solr and Search Lucene API.
 */

define('VSITE_SEARCH_SOLR', module_exists('apachesolr'));
define('VSITE_SEARCH_LUCENE', module_exists('luceneapi'));

/**
 * Implementation of hook_init()
 * 
 * Includes files that are specific to the currently enabled search solution.
 */
function vsite_search_init() {
	if(VSITE_SEARCH_SOLR) {
		require_once(drupal_get_path('module', 'vsite_search').'/apache_solr.inc');
	}
	
	if(VSITE_SEARCH_LUCENE) {
		require_once(drupal_get_path('module', 'vsite_search').'/luceneapi.inc');
	}
}

/**
 * Implementation of hook_taxononomy()
 * 
 * This hook is called when either a vocabulary or a term is created or modified.  This implementation enables or disables facets corresponding to the 
 * vocabulary being added or modified.
 * 
 * @param $op
 * @param $type
 * @param $array
 * 
 * @see vsite_search_luceneapi_facet_enable()
 */
function vsite_search_taxonomy($op, $type, $array = NULL) {
  switch($type) {
  	case 'vocabulary':
  		switch($op) {
  			case 'insert':
  				if(VSITE_SEARCH_SOLR) {
  					// Enable the matching Solr facet for this vocabulary
  					$key = 'im_vid_'.$array['vid'];
  					$facets = apachesolr_get_enabled_facets();
  					$facets['apachesolr_search'][$key] = $key;
  					apachesolr_save_enabled_facets($facets);
            // This cache being stale can prevent new facet filters from working.
            apachesolr_clear_cache();
  				}
  				
  				if(VSITE_SEARCH_LUCENE) {
  					// Enable the matching Lucene facet for this vocabulary
  					$facet = 'category_'.$array['vid'];
  					vsite_search_luceneapi_facet_enable('luceneapi_node', array('block', 'fieldset'), $facet);
  				}
  				break;
  			case 'delete':
  				if(VSITE_SEARCH_SOLR) {
  					// Enable the matching Solr facet for this vocabulary
            $key = 'im_vid_'.$array['vid'];
            $facets = apachesolr_get_enabled_facets();
            // Remove the facet corresponding to this vocabulary from the list of enabled facets
            unset($facets['apachesolr_search'][$key]);
            apachesolr_save_enabled_facets($facets);
            // This cache being stale can prevent new facet filters from working.
            apachesolr_clear_cache();
  				}
  				
  				if(VSITE_SEARCH_LUCENE) {
  					// Disable the matching Lucene facet for this vocabulary
            $facet = 'category_'.$array['vid'];
            vsite_search_luceneapi_facet_disable('luceneapi_node', array('block', 'fieldset'), $facet);
  				}
  				break;
  		}
  		break;
  }	
}

/**
 * Implementation of hook_form_alter()
 * 
 * Replaces the search form's submit handler with a custom submit handler to redirect to Apache Solr.
 * 
 * @param object $form
 *   The FAPI form object
 * @param mixes $form_state
 *   Associative array representing the submitted form
 * @param string $form_id
 *   The unique id of the form
 */
function vsite_search_form_alter(&$form, $form_state, $form_id) {
	if(VSITE_SEARCH_SOLR) {
		if($form_id == 'search_form') {
		  if (variable_get('apachesolr_search_make_default', 0)) {
        if (!isset($form['#submit'])) {
          $form['#submit'] = array('vsite_search_solr_search_form_submit');
        }
        else {
          $key = array_search('search_form_submit', $form['#submit']);
		      if ($key !== FALSE) {
		        // Replace the search module's function.
		        $form['#submit'][$key] = 'vsite_search_solr_search_form_submit';
		      }
		    }
		  }
		}
	}
}

/**
 * Submit handler for the core search form.  This function redirects searches to Apache Solr.
 * @param object $form
 *   The FAPI form object
 * @param mixed $form_state
 *   Associative array representing the submitted form
 */
function vsite_search_solr_search_form_submit($form, &$form_state) {
  $keys = $form_state['values']['keys'];
  // Handle Apache webserver clean URL quirks.
  if (variable_get('clean_url', '0')) {
    $keys = str_replace('+', '%2B', $keys);
  }
  // Redirect to Apache Solr, passing in the search keys
  $form_state['redirect'] = 'search/apachesolr_search/'. trim($keys);	
}

/**
 * Implementation of hook_block()
 * 
 * @param string $op
 * @param int $delta
 * @param mixed $edit
 */
function vsite_search_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
    	$blocks = array();
    	if(VSITE_SEARCH_SOLR) {
    		// Retrieve all of the facets defined by hook_facet()
    		$defined_facets = apachesolr_get_facet_definitions();
    		// Loop through the enabled facets, and create a block based on each facet.  This is so that these blocks can be displayed in any region and at any time.
    		foreach(apachesolr_get_enabled_facets() as $module => $facets) {
    			if(!empty($facets)) {
    				foreach($facets as $delta => $facet_name) {
              $blocks[]['info'] = $defined_facets[$module][$delta]['info'];
    				}
    			}
    		}
    	}
    	if(VSITE_SEARCH_LUCENE) {
    		$blocks[0]['info'] = t('Categories');
    	}
      return $blocks;
    case 'view':
    	if(VSITE_SEARCH_SOLR) {
    		/**
    		 * Get the enabled filter facet blocks, performing an empty search based on the content type as a filter.
    		 * @see http://drupal.org/node/457826
    		 */ 
	    	$blocks = apachesolr_search_browse(null, null, null, 'search/apachesolr_search');
	    	return array(
	    	  'subject' => $blocks[$delta]->subject,
	    	  'content' => $blocks[$delta]->content,
	    	);
    	}
    	
    	if(VSITE_SEARCH_LUCENE) {
    		switch($delta) {
    			case 0:
		    		require_once(drupal_get_path('module', 'luceneapi_facet').'/luceneapi_facet.block.inc');
		    		return array(
		    		  'subject' => t('Scholar Site'),
		    		  'content' => luceneapi_facet_block_view('vsite_search')
		    		);
    		}
    	}
  }
}

/**
 * Implementation of hook_vsite_widgets()
 * 
 * @return
 *   Associative array representing a widget
 */
function vsite_search_vsite_widgets(){
  $widgets = array();
  /**
   * Define a series of widgets for Search Lucene support, if the module is enabled
   */
  if(VSITE_SEARCH_LUCENE) {
    $widgets['luceneapi_facet'] = array(
      'module' => 'luceneapi_facet',
      'delta' => 'luceneapi_node',
      'weight' => 0,
      'region' => 'right',
      'status' => '1',
      'label' => t('Search Lucene Facets'),
      'type' => 'context_ui',
    );

    $widgets['luceneapi_categories'] = array(
      'module' => 'vsite_search',
      'delta' => '0',
      'weight' => 0,
      'region' => 'right',
      'status' => '1',
      'label' => t('Lucene Categories'),
      'type' => 'context_ui',
    );
  }
  
  /**
   * Define a series of widgets for Apache Solr support, if the module is enabled
   */
  if(VSITE_SEARCH_SOLR) {
  	$response = apachesolr_static_response_cache();
    if (empty($response)) {
      return;
    }
    $query = apachesolr_current_query();
    $block = apachesolr_facet_block($response, $query, 'apachesolr_og', $delta, $delta, t('Filter by Group'), 'apachesolr_og_group_name');
  	
  	$widgets['apachesolr_facet'] = array(
  	  'module' => 'apachesolr',
  	  'delta' => '0',
  	  'weight' => 0,
  	  'region' => 'right',
  	  'status' => '0',
  	  'label' => t('Apache Solr Facets'),
  	  'type' => 'context_ui',
  	);
  }  
  return $widgets;
}

/**
 * hook context_default_contexts
 * @return unknown_type
 */
function vsite_search_context_default_contexts() {
  $items = array ();
  
  /**
   * Define Search Lucene-specific contexts
   */
  if(VSITE_SEARCH_LUCENE) {
  	$items[] = array(
		  'namespace' => 'vsite',
		  'attribute' => 'search',
		  'value' => 'luceneapi_announcement_nodes',
		  'description' => 'Shows the LuceneAPI facets block depending on the node type',
		  'node' => array(
		    '0' => 'announcement',
		  ),
		  'block' => array(
		    'luceneapi_facet_luceneapi_node' => array(
		      'module' => 'luceneapi_facet',
		      'delta' => 'luceneapi_node',
		      'weight' => 0,
		      'region' => 'right',
		      'status' => '0',
		      'label' => 'Search Lucene Facets: Search Lucene',
		      'type' => 'context_ui',
		    ),
		  ),
		);
		$items[] = array(
		  'namespace' => 'vsite',
		  'attribute' => 'search',
		  'value' => 'luceneapi_announcement_views',
		  'description' => 'Shows the LuceneAPI facets block depending on the node type',
		  'views' => array(
		    '0' => 'scholar_announcements',
		  ),
		  'block' => array(
		    'luceneapi_facet_luceneapi_node' => array(
		      'module' => 'luceneapi_facet',
		      'delta' => 'luceneapi_node',
		      'weight' => 0,
		      'region' => 'right',
		      'status' => '0',
		      'label' => 'Search Lucene Facets: Search Lucene',
		      'type' => 'context_ui',
		    ),
		  ),
		);
  }
  
  /**
   * Define Apache Solr-specific contexts
   */
  if(VSITE_SEARCH_SOLR) {
  	$items[] = array(
	    'namespace' => 'vsite',
	    'attribute' => 'search',
	    'value' => 'apachesolr_search',
	    'system' => 0,
	    'description' => 'Context for searches performed through Apache Solr',
	    'path' => array(
	      'search/apachesolr_search' => 'search/apachesolr_search',
	      'search/apachesolr_search/*' => 'search/apachesolr_search/*',
	    ),
	    'block' => array(
	      // Cast as an object instead of using stdClass::__set_state() - http://drupal.org/node/584672
	      'apachesolr_mlt-001' => (object)(array(
	         'module' => 'apachesolr',
	         'delta' => 'mlt-001',
	         'weight' => 20,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr recommendations: More like this',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_mlt-001',
	      )),
	      'apachesolr_sort' => (object)(array(
	         'module' => 'apachesolr',
	         'delta' => 'sort',
	         'weight' => 21,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Core: Sorting',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_sort',
	      )),
	      'apachesolr_search_changed' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'changed',
	         'weight' => 22,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by updated date',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_changed',
	      )),
	      'apachesolr_search_currentsearch' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'currentsearch',
	         'weight' => 23,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Current search',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_currentsearch',
	      )),
	      'apachesolr_search_type' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'type',
	         'weight' => 30,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by content type',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_type',
	      )),
	      'apachesolr_search_uid' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'uid',
	         'weight' => 31,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by author',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_uid',
	      )),
	    ),
	    'type' => 2,
	    'status' => 1,
	  );
  }
  return $items;
}