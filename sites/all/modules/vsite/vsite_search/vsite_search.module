<?php

// $Id$

/**
 * @file
 *   Provides setup and configuration of common search widgets depending upon the currently installed search solution.  Supported options are
 *   Apache Solr and Search Lucene API.
 */

define('VSITE_SEARCH_SOLR', module_exists('apachesolr'));
define('VSITE_SEARCH_LUCENE', module_exists('luceneapi'));

/**
 * Implementation of hook_block()
 * 
 * @param string $op
 * @param int $delta
 * @param mixed $edit
 */
function vsite_search_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
    	$blocks = array();
    	if(VSITE_SEARCH_SOLR) {
    		// Retrieve all of the facets defined by hook_facet()
    		$defined_facets = apachesolr_get_facet_definitions();
    		// Loop through the enabled facets, and create a block based on each facet.  This is so that these blocks can be displayed in any region and at any time.
    		foreach(apachesolr_get_enabled_facets() as $module => $facets) {
    			if(!empty($facets)) {
    				foreach($facets as $delta => $facet_name) {
              $blocks[]['info'] = $defined_facets[$module][$delta]['info'];
    				}
    			}
    		}
    	}
      return $blocks;
    case 'view':
    	if(VSITE_SEARCH_SOLR) {
    		/**
    		 * Get the enabled filter facet blocks, performing an empty search based on the content type as a filter.
    		 * @see http://drupal.org/node/457826
    		 */ 
	    	$blocks = apachesolr_search_browse(null, null, null, 'search/apachesolr_search');
	    	return array(
	    	  'subject' => $blocks[$delta]->subject,
	    	  'content' => $blocks[$delta]->content,
	    	);
    	}
  }
}

/**
 * Since Lucene isn't strong at returning an entire resultset, this hook is
 * required by some realms that wish to display facets when either no search has
 * been executed or a search returns empty results.
 *
 * @param $facets
 *   An array containing facet definitions returned by hook_luceneapi_facet()
 *   implementations.
 * @param $realm
 *   A string containing the machine readable realm name the facets are being
 *   rendered in.
 * @param $module
 *   A string containing the search module that is collecting the available
 *   facets.  If Search Lucene Content is collecting facets, then $module will
 *   be "luceneapi_node".
 * @return
 *   An array of facets.
 */
function vsite_search_luceneapi_facet_empty($facets, $realm, $module) {
  $type = luceneapi_index_type_get($module);
  if ($type != 'node') {
    return;
  }
  
	switch($realm) {
		case 'block':
			$facets['type']['callback arguments'][0] = array('announcement');   
			//die('Module = '.$module.', Facets:<br><pre>'.print_r($facets,true).'</pre>');
			break;
	}
}

function vsite_search_luceneapi_facet_postrender_alter(&$items, $realm, $module, $type = NULL) {
  if ($type != 'node') {
    return;
  }
  // Additional filters, etc can be added to the query object
  $context = context_active_values();
  if(!empty($context['node'])) {
    $node_types = array_unique($context['node']);
    if(! empty($items['type']['items'])) {
    foreach($items['type']['items'] as $content_type => $item) {
        if(!in_array($content_type, $node_types)) {
          //unset($items['type']['items'][$content_type]);        
        }
      }
    }
  }
}

/**
 * Implementation of hook_apachesolr_modify_query()
 * 
 * @param object $query
 *   Reference to the Solr_Base_Query object
 * @param mixed $params
 *   Controlling params for the query object
 */
function vsite_search_apachesolr_modify_query(&$query, &$params, $caller) {
	// Additional filters, etc can be added to the query object
  $context = context_active_values();
  if(!empty($context['node'])) {
  	$node_types = array_unique($context['node']);
  	/**
  	 * If there is more than one content type active in this context, additional filters need to be applied to the Solr query object
  	 * as an "or" condition instead of an "an" condition.  To do this, we need to utilize a Solr subquery.
  	 * 
  	 * If there's only one content type to filter by, simply add the new filter.
  	 */
    if(count($node_types) > 1) {
	  	$subquery = apachesolr_drupal_query();
	  	foreach($node_types as $type) {
	      $subquery->add_filter('type', $type);
	      $query->add_subquery($subquery, 'OR');
	  	}
    }
    else {
    	$query->add_filter('type', $node_types[0]);
    }
  }
  
  /**
   * Retrieve the current group context.  If the user is viewing content within a group context, use the group's nid as a filter for the facets
   * to restrict results to within this group.
   */
  $group = og_get_group_context();
  if(!empty($group)) {
	  // Add filter for group_id
	  $query->add_filter('im_og_gid', $group->nid);
  }
}

/**
 * Implementation of hook_vsite_widgets()
 * 
 * @return
 *   Associative array representing a widget
 */
function vsite_search_vsite_widgets(){
  $widgets = array();
  /**
   * Define a series of widgets for Search Lucene support, if the module is enabled
   */
  if(VSITE_SEARCH_LUCENE) {
    $widgets['luceneapi_facet'] = array(
      'module' => 'luceneapi_facet',
      'delta' => 'luceneapi_node',
      'weight' => 0,
      'region' => false,
      'status' => '0',
      'label' => t('Search Lucene Facets'),
      'type' => 'context_ui',
    );
  }
  
  /**
   * Define a series of widgets for Apache Solr support, if the module is enabled
   */
  if(VSITE_SEARCH_SOLR) {
  	$response = apachesolr_static_response_cache();
    if (empty($response)) {
      return;
    }
    $query = apachesolr_current_query();
    $block = apachesolr_facet_block($response, $query, 'apachesolr_og', $delta, $delta, t('Filter by Group'), 'apachesolr_og_group_name');
  	
  	$widgets['apachesolr_facet'] = array(
  	  'module' => 'apachesolr',
  	  'delta' => '0',
  	  'weight' => 0,
  	  'region' => 'right',
  	  'status' => '0',
  	  'label' => t('Apache Solr Facets'),
  	  'type' => 'context_ui',
  	);
  }  
  return $widgets;
}

/**
 * hook context_default_contexts
 * @return unknown_type
 */
function vsite_search_context_default_contexts() {
  $items = array ();
  
  /**
   * Define Search Lucene-specific contexts
   */
  if(VSITE_SEARCH_LUCENE) {
  	$items[] = array(
		  'namespace' => 'vsite',
		  'attribute' => 'search',
		  'value' => 'luceneapi_announcement_nodes',
		  'description' => 'Shows the LuceneAPI facets block depending on the node type',
		  'node' => array(
		    '0' => 'announcement',
		  ),
		  'block' => array(
		    'luceneapi_facet_luceneapi_node' => array(
		      'module' => 'luceneapi_facet',
		      'delta' => 'luceneapi_node',
		      'weight' => 0,
		      'region' => 'right',
		      'status' => '0',
		      'label' => 'Search Lucene Facets: Search Lucene',
		      'type' => 'context_ui',
		    ),
		  ),
		);
		$items[] = array(
		  'namespace' => 'vsite',
		  'attribute' => 'search',
		  'value' => 'luceneapi_announcement_views',
		  'description' => 'Shows the LuceneAPI facets block depending on the node type',
		  'views' => array(
		    '0' => 'scholar_announcements',
		  ),
		  'block' => array(
		    'luceneapi_facet_luceneapi_node' => array(
		      'module' => 'luceneapi_facet',
		      'delta' => 'luceneapi_node',
		      'weight' => 0,
		      'region' => 'right',
		      'status' => '0',
		      'label' => 'Search Lucene Facets: Search Lucene',
		      'type' => 'context_ui',
		    ),
		  ),
		);
  }
  
  /**
   * Define Apache Solr-specific contexts
   */
  if(VSITE_SEARCH_SOLR) {
  	$items[] = array(
	    'namespace' => 'vsite',
	    'attribute' => 'search',
	    'value' => 'apachesolr_search',
	    'system' => 0,
	    'description' => 'Context for searches performed through Apache Solr',
	    'path' => array(
	      'search/apachesolr_search' => 'search/apachesolr_search',
	      'search/apachesolr_search/*' => 'search/apachesolr_search/*',
	    ),
	    'block' => array(
	      // Cast as an object instead of using stdClass::__set_state() - http://drupal.org/node/584672
	      'apachesolr_mlt-001' => (object)(array(
	         'module' => 'apachesolr',
	         'delta' => 'mlt-001',
	         'weight' => 20,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr recommendations: More like this',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_mlt-001',
	      )),
	      'apachesolr_sort' => (object)(array(
	         'module' => 'apachesolr',
	         'delta' => 'sort',
	         'weight' => 21,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Core: Sorting',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_sort',
	      )),
	      'apachesolr_search_changed' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'changed',
	         'weight' => 22,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by updated date',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_changed',
	      )),
	      'apachesolr_search_currentsearch' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'currentsearch',
	         'weight' => 23,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Current search',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_currentsearch',
	      )),
	      'apachesolr_search_im_vid_1' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'im_vid_1',
	         'weight' => 24,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by taxonomy Scholar Taxonomy',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_im_vid_1',
	      )),
	      'apachesolr_search_im_vid_2' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'im_vid_2',
	         'weight' => 25,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by taxonomy Sites Affiliation / Department',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_im_vid_2',
	      )),
	      'apachesolr_search_im_vid_3' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'im_vid_3',
	         'weight' => 26,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by taxonomy Related Interests',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_im_vid_3',
	      )),
	      'apachesolr_search_im_vid_4' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'im_vid_4',
	         'weight' => 27,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by taxonomy _vocabulary',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_im_vid_4',
	      )),
	      'apachesolr_search_im_vid_5' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'im_vid_5',
	         'weight' => 28,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by taxonomy _vocabulary',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_im_vid_5',
	      )),
	      'apachesolr_search_im_vid_6' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'im_vid_6',
	         'weight' => 29,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by taxonomy _vocabulary',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_im_vid_6',
	      )),
	      'apachesolr_search_type' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'type',
	         'weight' => 30,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by content type',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_type',
	      )),
	      'apachesolr_search_uid' => (object)(array(
	         'module' => 'apachesolr_search',
	         'delta' => 'uid',
	         'weight' => 31,
	         'region' => 'right',
	         'status' => '0',
	         'label' => 'Apache Solr Search: Filter by author',
	         'type' => 'context_ui',
	         'bid' => 'apachesolr_search_uid',
	      )),
	    ),
	    'type' => 2,
	    'status' => 1,
	  );
  }
  return $items;
}