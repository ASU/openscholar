<?php

include_once('vsite_content.features.inc');

/**
 * hook menu
 */
function vsite_content_menu(){
  $items = array();

  $items['cp/content'] = array(
    'title' => 'Content', 
    'page callback' => 'vsite_content_content',
    //'page callback' => 'cp_route',
    'weight' => 1 
  );
  
  $items['cp/content/all'] = array(
    'title' => 'All', 
    'page callback' => 'vsite_content_content',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['cp/content/files'] = array(
    'title' => 'Files',
    'page callback' => 'vsite_content_files',
    'type' => MENU_LOCAL_TASK,
  );
  
  // make them all part of 'cp' menu
  foreach($items as $path => $item) {
    $items[$path]['menu_name'] = 'cp';
    $items[$path]['access callback'] = 'cp_access_cp'; 
  }
  // a menu entry for each content type
  $content_types = spaces_features_map('node');
  $all_types = node_get_types('names');
  
  foreach($content_types as $type => $name){
    $items['cp/content/'.$type] = array(
      'title' => $all_types[$type],
      'access callback' => 'vsite_content_content_access',
      'access arguments' => array($type, $name),
      'page callback' => 'vsite_content_content',
      'page arguments' => array($type, $all_types[$type]),
      'type' => MENU_LOCAL_TASK,
      //'menu_name' => 'cp',	 
    );    
  }

  return $items;
}


function vsite_content_content_access($type,$name){
  $vsite = vsite_get_vsite();
  return $vsite -> features[$name];
}

function vsite_content_files(){

  $vsite = vsite_get_vsite();
  $view_name = 'vsite_files';
  $display = 'default';

  return views_page($view_name, $display);  
}

/**
 * Function to return output on cp content page
 */
function vsite_content_content($type = NULL, $name = NULL){
  $type_url_str = str_replace('_', '-', $type);
  //element classes for 'add new' link
  $add_new_classes = 'add-new ' . 'add-new-' . $type_url_str ;
  //$v = views_get_view('vsite_content');
  //link to add new content
  $output .= isset($type) ? '<div class="' . $add_new_classes . '">' . l(t('+ add new ' . $name), 'node/add/' . $type_url_str) . '</div>' : '';
  
  //adding view output
  //$output .= views_page($view_name = 'vsite_content', $display = 'default', $arg = $type);
  $vocabs = vsite_get_vocabs($vsite, $type);
  if (count($vocabs)){
    $vid = current(array_keys($vocabs));
  }
  $output .= vsite_content_content_view($type, $vid);

  return $output;
}

/**
 * Return the result from vsite_content view.
 * if $vid is specified adds the corresponding term 
 * as a filter in the view
 */
function vsite_content_content_view($type, $vid = NULL){
  
  //initialize the scholar base view
  $view = views_get_view('vsite_content');
  if ($vid) {
    $view->display['default']->display_options['filters']['tid'] = array(
      'operator' => 'or', 
      'value' => array(), 
      'group' => '0', 
      'exposed' => TRUE, 
      'expose' => array(
        'use_operator' => 0, 
        'operator' => 'tid_op', 
        'identifier' => 'tid', 
        'label' => 'Category', 
        'optional' => 1, 
        'single' => 0, 
        'remember' => 0, 
        'reduce' => 0 
      ), 
      'type' => 'select', 
      'limit' => TRUE, 
      'vid' => $vid, 
      'id' => 'tid', 
      'table' => 'term_node', 
      'field' => 'tid', 
      'hierarchy' => 0, 
      'relationship' => 'none', 
      'reduce_duplicates' => 1 
    );
  }
  $view->init();
  $view->set_display('default');
  $view -> set_arguments(array($type));
  $view->execute();
  return $view->render();

}

/**
 * Hook form_alter
 * Change the title of the vbo select element 
 */
 
function vsite_content_form_views_bulk_operations_form__1_alter(&$form, $form_state, $form_id = 'views_bulk_operations_form__1'){
 if ($form['#id'] == 'views-bulk-operations-form--1'){
  $form['select']['#title'] = 'Update options'; 
 }
}

/**
 * hook form_alter
 * Alter the views exposed form
 */
function vsite_content_form_views_exposed_form_alter(&$form, $form_state, $form_id = 'views_exposed_form'){
  drupal_add_js(drupal_get_path('module', 'vsite_content') . '/vsite_content.js');
  if ($form['#id'] == 'views-exposed-form-vsite-content-default') {
    //TODO: Is there a better way to get the content type argument???
    $type = arg(2);
    
    //set action to current url
    $form['#action'] = request_uri();
    
    $options = array(
      'All' => check_plain('<Any>'), 
      1 => 'Yes', 
      0 => 'No' 
    );
    
    //get the site information
    $site = vsite_get_vsite();
    $vocabs = array();
    vsite_include('vsiteapi');
    $vocabs = ($type || $type != 'all') ? vsite_get_vocabs($vsite, $type) : $vocabs;
    if (count($vocabs)) {
      $vid = current(array_keys($vocabs));
      $terms = taxonomy_get_tree($vid);
    }
    
    if (! $vid || ! $terms) {
      //remove Categores selection box
      unset($form['#info']['filter-tid']);
      unset($form['tid']);
    }
    else {
      
      //now we have the terms for this site, create an array formatted
      //for the taxonomy options in the exposed filter.
      //TODO: for now we just are going to use 1 vocabulary, but perhaps
      //should nest loops so it can deal with multiple vocabs????
      foreach ( $terms as $term ) {
        $taxonomy_options[$term->tid] = $term->name;
      }
      //taxonomy terms flter
      $form['tid']['#options'] = $taxonomy_options;
      //5 terms max shown per select box
      $form['tid']['#size'] = count($taxonomy_options) < 6 ? count($taxonomy_options) : 5;
    }
    
    //promoted to front page filter
    $form['promote']['#type'] = 'radios';
    $form['promote']['#options'] = $options;
    
    //published status filter
    $form['status']['#type'] = 'radios';
    $form['status']['#options'] = $options;
    
    //sticky on top of lists filter
    $form['sticky']['#type'] = 'radios';
    $form['sticky']['#options'] = $options;
    
    $form['#prefix'] = '<fieldset class="group-account-basics collapsible"><legend>Filter options</legend>';
    $form['#suffix'] = '</fieldset>';
  }
}
  