<?php
//$Id

/**
 * @file
 * vsite taxonomy manager
 * @todo Fix og_vocab permissions as feature items
 * @todo user should be able to order vocabs
 * @todo user should be able to order terms
 * @todo provide update hook to rename current vocab names
 * @todo justintime javascript
 */


include_once('vsite_taxonomy.features.inc');

/**
 * common jquery ui .dialog() options
 */
function vsite_taxonomy_dialog_options(){
  return array(
    'minwidth' => '640', 
    'height' => 'auto', 
    'position' => array(
      'right', 
      'top' 
    ), 
    'resizable' => TRUE,
  );
}

/**
 * Implementation of hook_enable
 */
function vsite_taxonomy_enable() {
  // Weight scholar to be after og_vocab
  $weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'og_vocab'"));
  db_query("UPDATE {system} SET weight = %d WHERE name = 'vsite_taxonomy'", ($weight + 1)); 
}



/**
 * Implementation of hook_theme
 */
function vsite_taxonomy_theme() {
  return array(
    'vsite_taxonomy_term' => array(
      'arguments' => array('term' => NULL),
    ),
  );
}


/**
 * Common access callback function for different menu entries
 */
function vsite_taxonomy_determine_access(){
  $vsite = vsite_get_vsite();
  $node = $vsite -> group;
  return og_vocab_determine_access($node, $perm);
}

/**
 * hook menu
 */
function vsite_taxonomy_menu() {
  $items = array ();
  // main entry; lists vsite vocabs. It's a local task 
  // menu so it shows in the cp/content 
  $items ['cp/content/taxonomy'] = array (
  	'title' => 'Taxonomy',
  	'page callback' => 'vsite_taxonomy_vocabs',
  	'access arguments' => array ('access content' ),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  
  // Create a new vocabulary to be associated with the vsite
  $items['vsite/taxonomy/%ctools_js/add/vocabulary'] = array(
    'title'            => 'Create vocabulary',
    'page callback'    => 'vsite_taxonomy_form_add_vocabulary',
    'page arguments'   => array(2),
    'access callback'  => 'vsite_taxonomy_determine_access',
    'access arguments' => array('add own group vocabulary'),
    'type'             => MENU_CALLBACK,
    'file'             => 'taxonomy.admin.inc',
    'file path'        => drupal_get_path('module', 'taxonomy'),
  );
  

  // Edit an existing vocabulary currently associated with the vsite
  $items['vsite/taxonomy/%ctools_js/edit/vocabulary/%taxonomy_vocabulary'] = array(
    'title'            => 'Edit vocabulary',
    'page callback'    => 'vsite_taxonomy_form_edit_vocabulary',
    'page arguments'   => array(5,2),
    'access callback'  => 'vsite_taxonomy_determine_access',
    'access arguments' => array('edit own group vocabulary'),
    'type'             => MENU_CALLBACK,
    'file'             => 'taxonomy.admin.inc',
    'file path'        => drupal_get_path('module', 'taxonomy'),
  );
  
  // Edit an existing vocabulary currently associated with the vsite
  $items['vsite/taxonomy/%ctools_js/delete/vocabulary'] = array(
    'title'            => 'delete vocabulary',
    'page callback'    => 'vsite_taxonomy_delete_vocabulary',
    'page arguments'   => array(5,2),
    'access callback'  => 'vsite_taxonomy_determine_access',
    'access arguments' => array('edit own group vocabulary'),
    'type'             => MENU_CALLBACK,
    'file'             => 'taxonomy.admin.inc',
    'file path'        => drupal_get_path('module', 'taxonomy'),
  );

  // Create a new term and associate it with the vocabulary.
  $items['vsite/taxonomy/%ctools_js/terms/%taxonomy_vocabulary/add_term'] = array(
    'title'            => 'Add term',
    'page callback'    => 'vsite_taxonomy_add_term',
    'page arguments'   => array(4,2),
    'access callback'  => 'vsite_taxonomy_determine_access',
    'access arguments' => array('edit own group term'),
    'type'             => MENU_CALLBACK,
    'file'             => 'taxonomy.admin.inc',
    'file path'        => drupal_get_path('module', 'taxonomy'),
  );

  // Edit term.
  $items['vsite/taxonomy/%ctools_js/terms/edit'] = array(
    'title'            => 'Edit term',
    'page callback'    => 'vsite_taxonomy_edit_term',
    'page arguments'   => array(5, 2),
    'access callback'  => 'vsite_taxonomy_determine_access',
    'access arguments' => array('edit own group term'),
    'type'             => MENU_CALLBACK,
    'file'             => 'taxonomy.admin.inc',
    'file path'        => drupal_get_path('module', 'taxonomy'),
  );
  
  return $items;
}


/**
 * callback function for cp/content/taxonomy
 * which is the entry point in the taxonomy page
 * (list of all vsite vocabs and their terms)
 */
function vsite_taxonomy_vocabs(){
  dialog_add_js();
  $vsite = vsite_get_vsite();
  $vocabs = $vsite ? $vsite->get_vocabs($type) : array();

  $output = '<div class="pad" id="vsite-taxonomy-wrapper">';
  $output .= l('Add vocabulary', 'vsite/taxonomy/nojs/add/vocabulary',  array('attributes' => array('class' => 'ctools-use-dialog')));
  
  foreach ( $vocabs as $vid => $vocab ) {
    $tree = taxonomy_get_tree($vid);
    
    // get all terms for this vocab
    $items = vsite_taxonomy_build_list_items($index = 0, $tree);
    
    // add the vocab's admin links
    $admin_links = vsite_get_admin_links('vocabulary', $vocab);
    $output .= theme('links', $admin_links, $attributes = array('class' => 'admin'));
    
    // print the entire vocab (+ terms)
    $output .= theme('item_list', $items, $vocab->name, 'ul', array('class' => 'vsite-taxonomy-terms'));
    
    // "Add term" link
    $output .= l('Add term', "vsite/taxonomy/nojs/terms/$vid/add_term", array('attributes' => array('class' => 'admin ctools-use-dialog')) );
  }
  

  $output .= '</div>'; // close vsite-taxonomy-wrapper
  return $output;
}

/**
 * recursive function to build the tree of terms
 * @see vsite_taxonomy_vocabs
 */
function vsite_taxonomy_build_list_items(&$index, $tree){
  $items = array();
  $current_depth = $tree[$index]->depth;
  while ( $index < count($tree) && $tree[$index]->depth >= $current_depth ) {
    $term = $tree[$index];
    $item = theme('vsite_taxonomy_term', $term);
    if ($tree[$index + 1]->depth > $current_depth) {
      $index ++;
      $items[] = array(
        'data' => $item, 
        'children' => vsite_taxonomy_build_list_items($index, $tree) 
      );
    }
    else {
      $items[] = $item;
      $index ++;
    }
  }
  return $items;
}

/**
 * Add vocabulary form callback
 */
function vsite_taxonomy_form_add_vocabulary($ajax = FALSE){
  $taxs = module_invoke_all('vsite_vocabulary_default');
  dpm($taxs);
  if ($ajax) {
    ctools_include('ajax');
    $form_state = array(
      'ajax' => TRUE, 
      'title' => t('Add vocabulary') 
    );
    
    $output = dialog_form_wrapper('taxonomy_form_vocabulary', $form_state);
    
    if (empty($output)) {
      $output[] = dialog_command_display(t('Vocabulary was created'), t('Reloading...'));
      $output[] = ctools_ajax_command_reload();
    }
    else {
      foreach ( $output as $i => $command ) {
        if ($command['command'] == 'dialog_display') {
          $output[$i]['options'] = vsite_taxonomy_dialog_options();
        }
      }
    }
    ctools_ajax_render($output);
  
  }
  else {
    return drupal_get_form('taxonomy_form_vocabulary');
  }

}

/**
 * edit vocabulary form callback
 */
function vsite_taxonomy_form_edit_vocabulary($vocabulary, $ajax = FALSE){
  
  if ($ajax) {
    ctools_include('ajax');
    $form_state = array(
      'ajax' => TRUE, 
      'title' => t('Add vocabulary'), 
      'args' => array(
        'edit' => ( array ) $vocabulary 
      ) 
    );
    
    $output = dialog_form_wrapper('taxonomy_form_vocabulary', $form_state);
    
    if (empty($output)) {
      $output[] = dialog_command_display(t('Vocabulary settings changed ...'), t('Reloading...'));
      $output[] = ctools_ajax_command_reload();
    }
    else {
      foreach ( $output as $i => $command ) {
        if ($command['command'] == 'dialog_display') {
          $output[$i]['options'] = vsite_taxonomy_dialog_options();
        }
      }
    }
    ctools_ajax_render($output);
  
  }
  else {
    return drupal_get_form('taxonomy_form_vocabulary', ( array ) $vocabulary);
  }

}

/**
 * delete vocabulary confirmation form
 */
function vsite_taxonomy_delete_vocabulary($vid, $ajax = FALSE){
  if ($ajax) {
    ctools_include('ajax');
    $form_state = array(
      'ajax' => TRUE, 
      'title' => t('Delete vocabulary'), 
      'args' => array(
        'vid' => $vid 
      ) 
    );
    
    $output = dialog_form_wrapper('taxonomy_vocabulary_confirm_delete', $form_state);
    
    if (empty($output)) {
      $output[] = dialog_command_display(t('Vocabulary settings changed ...'), t('Reloading...'));
      $output[] = ctools_ajax_command_reload();
    }
    else {
      foreach ( $output as $i => $command ) {
        if ($command['command'] == 'dialog_display') {
          $output[$i]['options'] = vsite_taxonomy_dialog_options();
        }
      }
    }
    ctools_ajax_render($output);
  }
  else {
    return drupal_get_form('taxonomy_vocabulary_confirm_delete', $vid);
  }
}

/**
 * add term form callback
 */
function vsite_taxonomy_add_term($vocabulary, $ajax = FALSE){
  
  if ($ajax) {
    ctools_include('ajax');
    $form_state = array(
      'ajax' => TRUE, 
      'title' => t('Add term'), 
      'args' => array(
        'vocabulary' => $vocabulary 
      ) 
    );
    
    $output = dialog_form_wrapper('taxonomy_form_term', $form_state);
    
    if (empty($output)) {
      $output[] = dialog_command_display(t('Vocabusafdsafdsaanged ...'), t('Reloading...'));
      $output[] = ctools_ajax_command_reload();
    }
    else {
      foreach ( $output as $i => $command ) {
        if ($command['command'] == 'dialog_display') {
          $output[$i]['options'] = vsite_taxonomy_dialog_options();
        }
      }
    }
    ctools_ajax_render($output);
  }
  else {
    return drupal_get_form('taxonomy_form_term', $vocabulary);
  }
}

/**
 * edit term form callback
 */
function vsite_taxonomy_edit_term($tid, $ajax = FALSE){
  $vsite = vsite_get_vsite();
  $vsite_vocabs = $vsite->get_vocabs($node_type);
  $term = taxonomy_get_term($tid);
  
  $access = array_key_exists($term->vid, $vsite_vocabs);
  
  if ($ajax) {
    ctools_include('ajax');
    // wrong tid ? 
    if (! $term) {
      $commands = array();
      $commands[] = dialog_command_display(t('Page not found'));
      ctools_ajax_render($commands);
    }
    // no access ?
    if (! $access) {
      $commands = array();
      $commands[] = dialog_command_display(t('Access denied'));
      ctools_ajax_render($commands);
    }
    
    $form_state = array(
      'ajax' => TRUE, 
      'title' => t('Add term'), 
      'args' => array(
        'vocabulary' => taxonomy_vocabulary_load($term->vid), 
        'edit' => ( array ) $term 
      ) 
    )
    ;
    
    $output = dialog_form_wrapper('taxonomy_form_term', $form_state);
    
    if (empty($output)) {
      $output[] = dialog_command_display(t('Vocabusafdsafdsaanged ...'), t('Reloading...'));
      $output[] = ctools_ajax_command_reload();
    }
    else {
      foreach ( $output as $i => $command ) {
        if ($command['command'] == 'dialog_display') {
          $output[$i]['options'] = vsite_taxonomy_dialog_options();
        }
      }
    }
    ctools_ajax_render($output);
  }
  else {
    return og_vocab_taxonomy_admin_term_edit($tid);
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function vsite_taxonomy_form_taxonomy_form_term_alter(&$form, &$form_state) {
  // hide some advanced options from the term edit form
  $vsite = vsite_get_vsite();
  $form['advanced']['#collapsed'] = FALSE;
  $hides = array('relations', 'synonyms', 'weight');
  foreach($hides as $element){
    unset($form['advanced'][$element]);
  }
}

/**
 * Implementation of hook_form_FORM-ID_alter().
 *
 * Redirect the cancel back to og_vocab.
 */
function vsite_taxonomy_form_taxonomy_vocabulary_confirm_delete_alter(&$form, &$form_state){
  dpm($form);
}



/**
 * Implementation of hook_vsite_admin_link
 */
function vsite_taxonomy_vsite_admin_link($type, $object){
  $links = array();
  // edit/delete links for vocabularies
  if ($type == 'vocabulary') {
    $links[] = array(
      'title' => 'delete', 
      'href' => 'vsite/taxonomy/nojs/delete/vocabulary/' . $object -> vid,
      'attributes' => array(
        'class' => 'ctools-use-dialog',
      )  
    );
    
    $links[] = array(
      'title' => 'edit', 
      'href' => 'vsite/taxonomy/nojs/edit/vocabulary/' . $object -> vid, 
      'attributes' => array(
        'class' => 'ctools-use-dialog' 
      ) 
    ); 
    
    $current = menu_get_item();
    
    $links[] = array(
      'title' => 'expand', 
      'href' => $current['path'], 
      'attributes' => array(
        'class' => 'toggle' 
      ) 
    );   
  }
  elseif ($type == 'term') {
    // edit/delete links for terms
    $links[] = array(
      'title' => 'delete', 
      'href' => "vsite_taxonomy/term/delete/" . $object->vid . "/" . $object->tid, 
      'attributes' => array(
        'class' => 'delete ctools-use-ajax' 
      )
    );
    
    $links[] = array(
      'title' => 'edit', 
      'href' => 'vsite/taxonomy/nojs/terms/edit/' . $object->tid, 
      'attributes' => array(
        'class' => 'ctools-use-dialog' 
      ) 
    );
  }
  
  return $links;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function vsite_taxonomy_form_taxonomy_form_vocabulary_alter(&$form, &$form_state){
  $vsite = vsite_get_vsite();
  if (!$vsite){
    return ;
  }
  
  //Passes gid as a value in the taxonomy add/edit form
  unset($form['settings']['og_vocab']);
  
  $form['settings']['og_vocab']['og'] = array(
    '#type' => 'value', 
    '#value' => $vsite->group->nid 
  );
  
  // filter the content type based on the vsite
  $vocab_types = vsite_content_types();
  drupal_alter('vsite_content_types', $vocab_types);
  $form['content_types']['nodes']['#options'] = $vocab_types;
  
  // hide weight element
  unset($form['settings']['weight']);
  
  $form['#submit'][] = 'x';

}



/*
function taxonomy_form_vocabulary_dialog_success($form_state) {
   dpm($form_state);
}
*/


function vsite_taxonomy_content_by_category($term_name, $content_type){

  $map = spaces_features_map($type = 'node');

  context_set_by_condition('node', $content_type, TRUE);

  $view = views_get_view('vsite_taxonomy_view');
  $view->init();
  $view->set_display('default');
  $view->set_arguments(array(
    $term_name,
    $content_type
  ));
  
  // pager 
  $view -> pager['use_pager'] = 1;
  
  $view->execute();
  drupal_set_title($term_name);
  return $view->render();
}

/**
 * Implementation of hook block
 */
function vsite_taxonomy_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Categories - A widget used to quickly filter categorized content');
      return $blocks;
    case 'view':
      switch ($delta) {
        case 0:
          $block = vsite_taxonomy_block_view();
          break;
      }

      return $block;
  }
}

/**
 * callback function for "Site categories" block
 */
function vsite_taxonomy_block_view(){
  $vsite = vsite_get_vsite();
  $block = array();
  
  // node types associated with the active context
  $active_node_types = context_active_values("node");
  if (count($active_node_types)) {
    $active_vocabs = array();
    
    foreach ( $active_node_types as $node_type ) {
      $active_vocabs += $vsite->get_vocabs($node_type);
    }
    
    if ($vsite && count($active_vocabs)) {
      foreach ( $active_vocabs as $vid => $vocab ) {
        
        $tree = taxonomy_get_tree($vid);
        // $tree = array_slice($tree, 0, 20);
        $items = og_vocab_build_list_items($index = 0, $tree);
        if ($items) {
          $output .= theme('item_list', $items, $vocab->name);
        }
      }
      $block['content'] = $output;
      $block['subject'] = t('Site categories');
      return $block;
    }
  }

}



/**
 * Implementation of hook_strongarm
 */
function vsite_taxonomy_strongarm(){
  $conf = array();
  //$conf['pathauto_taxonomy_pattern'] = "[space-og-path]/category/[catpath-raw]";
  $conf['vertical_tabs_forms']['taxonomy_form_vocabulary'] = TRUE;

  return $conf;
}


/**
 *  hook nodeapi
 *  When a vsite is created, create the og_vocabs for each feature content type
 */
function vsite_taxonomy_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){

  if ($op == 'insert' && $node->type == variable_get('scholar_content_type', 'vsite')) {
    // Features implement their own default taxonomies
    $taxs = module_invoke_all('vsite_vocabulary_default');

    // create vocabs
    vsite_taxonomy_taxonomy_import($node->nid, $taxs);
  }
}

/**
 * hook form_alter
 * Renames the vocabs label in the input form
 */
function vsite_taxonomy_form_alter(&$form, $form_state, $form_id){
  
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
    $vsite = vsite_get_vsite();
    if ($vsite)
      $v = $vsite->get_vocabs($form['#node']->type);
    $v = is_array($v) ? reset($v) : null;
    
    $gv = variable_get('scholar_global_taxonomy', 0);
    unset($form['taxonomy']['tags'][$gv]);
    
    if (! empty($form['taxonomy']) && $v) {
      $vid = $v->vid;
      $form['taxonomy']['tags'][$vid]['#title'] = 'tags';
      $form['taxonomy']['tags'][$vid]['#description'] = 'A comma-separated list of categories/tags describing this content.
      Example: political science, data, causal inference . You can also control your categories in the ' . l('taxonomy section', 'cp/content/taxonomy') . ' of control pannel';
    }
  }

}

/**
 * theme a term
 * @param unknown_type $term
 */
function theme_vsite_taxonomy_term($term){
  $count = taxonomy_term_count_nodes($term->tid);
  $term_path = "taxonomy/term/$term->tid";
  $term_link = l($term->name, $term_path, array(
    'title' => t($term->description) 
  ));
  
  // add term's admin links
  $item = theme('links', vsite_get_admin_links('term', $term), $attributes = array(
    'class' => 'admin' 
  ));
  
  $item .= $term_link . '<span class = "count" > (' . $count . ')</span>';
  $item .= '<div class="slider">' . $term -> description . '</div>';

  
  return $item;
}

/**
 * proivdes some default terms
 */
function vsite_taxonomy_vsite_vocabulary_default(){
  $types = array();
  $content_types = og_get_types('group_post');
  foreach($content_types as $type){
    $types[$type] = 1;
  }

  drupal_alter('vsite_taxonomy_content_types', $types);

  return array (
    0 => array (
    'name' => 'tags',
    'content_types' => $types,
    'properties' => array ('tags' => 1),
    'terms' => array (
      0 => array (
    	'name' => 'Statistics',
    	'desription' => 'Statistics',
    	'properties' => array ()
      ),
      1 => array (
    	'name' => 'Political Economy',
    	'desription' => 'Political Economy',
    	'properties' => array ()
      ),
      2 => array (
    	'name' => 'Data',
    	'desription' => 'Data',
    	'properties' => array ()
      ),
      3 => array (
    	'name' => 'Economics',
    	'desription' => 'Economics',
    	'properties' => array ()
      ),
      4 => array (
    	'name' => 'Goverment',
    	'desription' => 'Economics',
    	'properties' => array ()
      )
    )
  )
 );

}

/** API functions **/

/**
 * Creates a series of taxonomy vocabularies and terms from the passed
 * definition.
 *
 * Sample Definition:
 *   array(
 *   0 => array(
 *     'name' => 'vocab name',
 *     'content_types' => array(),
 *     'properties' => array(),
 *     'terms' => array(
 *       0 => array(
 *         'name' => 'Term Name',
 *         'desription' => '',
 *         'properties' => array(),
 *       )
 *     ),
 *   ),
 * );
 *
 * NOTE: This function does not currently do any error or duplicate checking.
 *
 * @param $definition
 *   Definintion of the taxonomy structure.
 */
function vsite_taxonomy_taxonomy_import($gid, $definition){
  install_include(array(
    'taxonomy' 
  ));
  foreach ( $definition as $vocab_index => $vocab_definition ) {
    $vid = install_taxonomy_add_vocabulary($vocab_definition['name'], $vocab_definition['content_types'], $vocab_definition['properties']);
    // make this a group taxonomy
    og_vocab_write_record($gid, $vid);
    foreach ( $vocab_definition['terms'] as $term_index => $term_definition ) {
      install_taxonomy_add_term($vid, $term_definition['name'], $term_definition['description'], $term_definition['properties']);
    }
  }
}
