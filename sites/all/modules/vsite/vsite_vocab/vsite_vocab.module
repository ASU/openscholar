<?php

/**
 * hook menu
 */
function vsite_vocab_menu() {
  $items = array ();
  $items ['cp/content/taxonomy'] = array (
  	'title' => 'Taxonomy', 
  	'page callback' => 'vsite_vocab_taxonomies', 
  	'access arguments' => array ('access content' ),
    'menu_name' => 'cp',
  );
  
  $items['vsite_vocab/term/delete/%/%'] = array (
    'title' => 'deleting a term',
    'page callback' => 'vsite_vocab_term_delete',
    'page arguments' => array(3,4),
    'access arguments' => array('access content')
  );
  
  $items['vsite_vocab/term/%/%/rename'] = array (
    'title' => 'deleting a term',
    'page callback' => 'vsite_vocab_term_rename',
    'page arguments' => array(2,3,5),
    'access arguments' => array('access content')
  );
  
  
  return $items;
}

/**
 *  hook nodeapi 
 *  When a vsite is created, create the og_vocabs for each feature content type
 */
function vsite_vocab_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      if ($node-> type == variable_get('scholar_content_type', 'scholarsite')) {
		// Features implement their own default taxonomies 
        $taxs = module_invoke_all('scholar_vocabulary_defaults');
        $new_taxs = $taxs;
        install_include(array('taxonomy'));
        foreach($taxs as $yindex => $tax) {
          // make the vocab name unique
          $new_taxs[$yindex]['name'] = $node -> purl['value'] . '_' . $tax['name'];
        }
        // create vocabs
        vsite_vocab_taxonomy_import($node -> nid, $new_taxs);
      }
      break;
  }
}


function vsite_vocab_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Scholar site categories');
      return $blocks;
    case 'view':
      switch ($delta) {
        case 0:
          $block = vsite_vocab_block_view();
          break;
      }
      
      return $block;
  }
}

function vsite_vocab_taxonomies(){
  drupal_add_js(drupal_get_path('module', 'vsite_vocab') . '/theme/vsite_vocab.js');
  drupal_add_css(drupal_get_path('module', 'vsite_vocab') .'/theme/vsite_vocab.css');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  
  $site = vsite_get_vsite();
  $admin = $site->admin_access();
  
  vsite_include('vsiteapi');
  
  $s_types = vsite_content_types();
  $output = '';
  $delta = 0;
  $output = '<div class="pad">';
  
  foreach ( $s_types as $type => $name ) {
    $vocabs = vsite_get_vocabs($vsite, $type);
    if (count($vocabs)) {
      foreach ( $vocabs as $v ) {
        $content = vsite_vocab_terms($v, $admin = TRUE, $count = TRUE);
        $subject = 'Categories for ' . $name; // . '(' . l('edit', "node/" . $site->sid . "/og/vocab/edit/vocabulary/" . $v->vid, $options = array('attributes' => array('class' => 'tax-edit')) ) . ')';
        $output .= theme('fieldset', array('#title' => $subject, '#value' => $content));
      }
    }
  }
  $output .= '</div>';
  return $output;
}

function vsite_vocab_block_view() {
  //TODO it seems like vsite_get_vsite does not work here
  // cant get space from within a block
  //$group_node = og_get_group_context ();
  //$site = spaces_load ( 'og', $group_node->nid, TRUE );

  $site = vsite_get_vsite();
  $sid = $vsite -> nid;
 
  // 1. get the active contexts
  $active_contexts = context_active_contexts();
  foreach($active_contexts as $c){
    // does this context has a "node" associated with it
    if (isset ($c -> node)) {
      $node_type = current($c -> node);  // TODO we are assuming that the context has only one content type
      // get vocabularies associated with this content type

      return vsite_vocab_block_per_content_type($site, $node_type);
    }
  }
}

function vsite_vocab_block_per_content_type($site, $node_type, $subject = 'Categories') {

  $vcs = taxonomy_get_vocabularies ( $node_type );
  foreach ( $vcs as $v ) {
    // which is the group of this vocab?
    $group_vocab = og_vocab_get_group($v -> vid);
    if ($group_vocab['nid'] == $site -> group -> nid){

      $terms_html = vsite_vocab_terms($v, $admin, $count = TRUE);
    }
  }

  $block['content'] =  $terms_html;
  $block ['subject'] = $subject;

  return $block;
}


function vsite_vocab_terms($v , $admin = FALSE, $count = FALSE){
  $terms = taxonomy_get_tree($v -> vid);
  
  foreach ( $terms as $term ) {
    $item = vsite_vocab_term_item($term, $admin, $count);
    $items[] = array(
      'data' => $item, 
      'id' => 'vsite_vocab_item_' . $term->tid 
    );
  }
  return theme( 'item_list', $items, NULL, 'ul' );
}


function vsite_vocab_term_item($term, $admin = FALSE, $count = FALSE){

  $term_path = "taxonomy/term/" . $term -> tid;
  $term_link = l($term -> name, $term_path, array(
    'title' => t($term -> description) 
  ));
  
  $nr_nodes = taxonomy_term_count_nodes($term->tid);
  if ($count) {
    $item = $term_link . '<span class = "count" > (' . $nr_nodes . ')</span>';
  }
  
  if ($admin) {
    $admin_links = array();
    $admin_links[] = array(
      'title' => 'delete', 
      'href' => "vsite_vocab/term/delete/" . $term->vid . "/" . $term->tid, 
      'attributes' => array(
        'class' => 'delete ctools-use-ajax' 
      )  // important for ajax to work
    );
    
    $admin_links[] = array(
      'title' => 'edit', 
      'href' => 'vsite_vocab/term/' . $term->vid . "/" . $term->tid . '/rename/', 
      'attributes' => array(
        'class' => 'edit' 
      ) 
    );
    //$admin_links[] = l('rename', , $options=array('attributes' => array('class' => 'admin')));
    $item .= theme('links', $admin_links, $attributes = array(
      'class' => 'admin' 
    ));
  }
  return $item;
}






/*** Ajax callbacks ***/

function vsite_vocab_term_rename($vid, $tid, $newterm = null) {
  ctools_include ( 'ajax' );
  ctools_add_js ( 'ajax-responder' );
  
  if (!$newterm){
    $commands = array ();
    ctools_ajax_render ( $commands ); // this function exits.
  }
  //dpm ( $newterm );
  $table = 'term_data';
  $record = new stdClass ( );
  $record->name = $newterm;
  
  $term = array ('name' => $newterm, 'vid' => $vid, 'tid' => $tid );
  
  // if (drupal_rewrite_record($table, $record, 'tid')){
  if (taxonomy_save_term ( $term )) {
    

    $commands = array ();
    $commands [] = ctools_ajax_command_replace ('#vsite_vocab_item_' . $tid . ' > a', vsite_vocab_term_item($term) );
    ctools_ajax_render ( $commands ); // this function exits.
  } else {
    ctools_ajax_render_error($error = 'something wrong happened ...');
  }

}

function vsite_vocab_term_delete($vid,$tid){
  if (taxonomy_del_term($tid)) {
    ctools_include('ajax');
    ctools_add_js('ajax-responder');
    $commands = array();
    $commands[] = ctools_ajax_command_replace('#vsite_vocab_item_' . $tid, '');
    ctools_ajax_render($commands); // this function exits.
  } else {
    ctools_ajax_render_error($error = 'something wrong happened ...');
  }
}



/** API functions **/

/**
 * Creates a series of taxonomy vocabularies and terms from the passed
 * definition.
 *
 * Sample Definition:
 *   array(
 *   0 => array(
 *     'name' => 'vocab name', 
 *     'content_types' => array(), 
 *     'properties' => array(),
 *     'terms' => array(
 *       0 => array(
 *         'name' => 'Term Name', 
 *         'desription' => '', 
 *         'properties' => array(),
 *       )
 *     ),
 *   ), 
 * );
 *
 * NOTE: This function does not currently do any error or duplicate checking.
 *
 * @param $definition
 *   Definintion of the taxonomy structure.
 */
function vsite_vocab_taxonomy_import($gid, $definition) {
  foreach ($definition as $vocab_index => $vocab_definition) {
    $vid = install_taxonomy_add_vocabulary($vocab_definition['name'], $vocab_definition['content_types'], $vocab_definition['properties']);
    // make this a group taxonomy
    og_vocab_write_record($gid, $vid);
    foreach ($vocab_definition['terms'] as $term_index => $term_definition) {
      install_taxonomy_add_term($vid, $term_definition['name'], $term_definition['description'], $term_definition['properties']);
    }
  }
}
