<?php


/**
 * Implementation of hook_views_api().
 */
function vsite_views_api(){
  return array(
    'api' => 2 
  );
}

/**
 * finds all the view declared in files ending with ".views"
 */
function vsite_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'vsite'), '.view');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$view -> name] = $view;
    }
  }
  return $views;
}

/**
 * Includes different inc files 
 */
function vsite_include($inc_files){
  $inc_files = is_array($inc_files) ? $inc_files : array($inc_files);
  
  $path = dirname(__FILE__);

  foreach ($inc_files as $inc) {
    if (file_exists("$path/includes/$inc.inc")) {
      include_once "$path/includes/$inc.inc";
    }
  }
}

/**
 * Implementation of preprocess_views_view().
 * TODO move this to scholar module
 */
function vsite_preprocess_views_view(&$vars) {
  if ($feature = context_get('scholar', 'feature')) {
    $contexts = context_enabled_contexts();
    $context = isset($contexts["scholar-feature-{$feature}"]) ? $contexts["scholar-feature-{$feature}"] : NULL;
    $view = $vars['view'];
    $space = spaces_get_space();

    if ($space && $context && strpos($view->current_display, 'page') !== FALSE && empty($view->result) && empty($vars['empty'])) {
      // @TODO determine why this can get called more than once for the
      // relevant view.
      static $once;
      if (!$once) {
        $once = TRUE;

        $output = '';
        global $user;

        // Get the first nodetype
        if (!empty($context->node)) {
          reset($context->node);
          $nodetype = current($context->node);
        }

        // Assemble a reasonable empty message
        if (!empty($nodetype) && node_access('create', $nodetype) && ($space->type == 'og')) {
          $types = node_get_types();
          if ($type = $types[$nodetype]) {
            $output .= t('Please add your first !type to get started.', array('!type' => $type->name));
            $output .= "<div class='buttons'>". theme('context_links', context_links()) ."</div>";
          }
        }
        else {
          $output .= t('There is currently no content to view in this section.');
        }
        $vars['empty'] = $output;
      }
    }
  } 
}



/** API functions **/


/**
 * API function for getting the active site
 */
function vsite_get_vsite(){
  $space = spaces_get_space();
  $scholar_content_type = variable_get('scholar_content_type', 'scholarsite');
  if ($space && $space -> type == 'og' && $space -> group -> type == $scholar_content_type ){
    return $space;
  }
  else {
    return NULL;
  }
}


/**
 * API function for testing wether we are on the front page of a vsite
 * TODO there are different ways of doing this
 * - as a full context "context_vsite_home" which has bloocks etc
 * - set context in hook init and then get it here
 */
function vsite_is_front(){
  $vsite = vsite_get_vsite();
  $active_menu = menu_get_item();
  return ($vsite && $active_menu['path'] == 'home') ? TRUE : FALSE;
}