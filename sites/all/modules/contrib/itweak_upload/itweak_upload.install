<?php
// $Id: itweak_upload.install,v 1.1.2.4 2009/08/08 03:33:51 iva2k Exp $

/**
 * @file
 * Installation code for iTweakUpload.
 */

/**
 * Helper function to add a permission to a role.
 */
function _itweak_upload_add_permission($rid, $permission) {
  if ($permission) {
    $current_perm = db_result(db_query("SELECT perm FROM {permission} WHERE rid = %d", $rid));
    if ($current_perm != '') {
      $current_perm .= ', ';
    }
    $current_perm .= $permission;
//    db_query("UPDATE {permission} SET perm = '%s' WHERE rid = %d", $current_perm, $rid);
    return update_sql("UPDATE {permission} SET perm = '$current_perm' WHERE rid = $rid");
  }
}

/*
 * Install ImageCache presets
 */
function _itweak_upload_install_imagecache_presets() {
  $ret = array();
  if (!module_exists('imagecache')) {
    $msg = t('Tried installing ImageCache preset for iTweak Upload module, but ImageCache module is not present. ImageCache presets for iTweak Upload module were not installed.');
//    drupal_set_message($msg);
    $ret[] = array('success' => FALSE, 'query' => $msg);
  }
  else {
    $imagecache_presets = array(
      array(
        'presetname' => 'AttachmentThumbnail',
      ),
    );

    $imagecache_actions = array(
      'AttachmentThumbnail' => array(
        'action' => 'imagecache_scale_and_crop',
        'data' => array(
          'width' => 60,
          'height' => 60,
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
    );
  
    //need to install preset, id will be returned by function,
    //then install action add presetid to action prior to install:
    $perms = array();
    foreach ($imagecache_presets as $preset) {
      // Check if preset already exists
      $exists = imagecache_preset_by_name($preset['presetname']);
      if (count($exists)) {
        $msg = t('ImageCache preset "%name" already exists, id=%id. Leaving unchanged. Will use it by default in "iTweak Upload". Please check the preset and its permissions!', array('%id' => $exists['presetid'], '%name' => $exists['presetname']));
      }
      else {
        $preset = imagecache_preset_save($preset);
        $imagecache_actions[$preset['presetname']]['presetid'] = $preset['presetid'];
        imagecache_action_save($imagecache_actions[$preset['presetname']]);
        $msg = t('Created ImageCache preset "%name", id=%id.', array('%id' => $preset['presetid'], '%name' => $preset['presetname']));
        $perms[] = 'view imagecache ' . $preset['presetname'];
      }
//      drupal_set_message($msg);
      $ret[] = array('success' => TRUE, 'query' => $msg);
    }

    // Add default permissions to new presets
    if (count($perms)) {
      // Which roles ids should be allowed to view the preset by default:
      $allow_roles = array(1, 2);

      // Get role names
      $result = db_query('SELECT r.rid, r.name FROM {role} r WHERE r.rid IN (%s)', implode(', ', $allow_roles));
      $roles = array();
      while ($role = db_fetch_object($result)) {
        $roles[$role->rid] = $role->name;
      }
      $perms = implode(', ', $perms);
      foreach ($roles as $rid => $role) {
        $res = _itweak_upload_add_permission($rid, $perms);
	if ($res['success']) {
	  $res['query'] = t('Added permissions "%perms" to role %role.', array('%perms' => $perms, '%role' => $role) );
	}
	$ret[] = $res;
      }
    }
  }
  return $ret;
}

/**
 * Implementation of hook_install()
 */
function itweak_upload_install() {
  $ret = _itweak_upload_install_imagecache_presets();
  if (!$ret[0]['success']) drupal_set_message($ret[0]['query']);

//??  cache_clear_all('theme_registry', 'cache', TRUE);
}

/**
 * Implementation of hook_update_N()
 */
function itweak_upload_update_6000() {
  $ret = array();
  $ret += _itweak_upload_install_imagecache_presets();
  return $ret;
}

/**
 * Implementation of hook_requirements()
 */
function itweak_upload_requirements($phase) {
  $requirements = array();
  $t = get_t();

  switch ($phase) {
    case 'install':
      $error = FALSE;
//      if (!module_exists('content_copy')) {
//        $error = TRUE;
//        $value = $t('Content Copy module to be pre-installed.');
//        $severity = REQUIREMENT_ERROR;
//      }
      
      if (!module_exists('imagecache')) {
        if ($error) {
          $value .= $t(' ImageCache module to be pre-installed.');
        } else {
          $error = TRUE;
          $value = $t('ImageCache module to be pre-installed.');
        }
        $severity = REQUIREMENT_ERROR;
      }
      
//      if ($error) {
//        $requirements['cck_gallery'] = array(
//          'title' => $t('CCK Gallery requirements'),
//          'value' => $value . $t(' If the required modules are now installed, please enable CCK Gallery again.'),
//          'severity' => $severity,
//        );
//      }
    break;
  }

  return $requirements;
}

/**
 * Implementation of hook_uninstall()
 */
function itweak_upload_uninstall() {
  //remove system variables
  db_query("DELETE FROM {variable} WHERE name LIKE 'itweak_upload_%'");
  cache_clear_all('variables', 'cache');
}

