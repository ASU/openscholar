<?php
// $Id: dialog.module,v 1.1 2009/12/07 01:46:11 rz Exp $

/**
 * Add all the necessary javascript (and css) to be able to display a dialog
 * on the current page.  This must be used on any page that could possibly
 * contain a dialog.  It is safe to call this function repeatedly.
 */
function dialog_add_js() {
  // Provide a gate so we only do this once.
  static $done = FALSE;
  if ($done) {
    return;
  }

  $settings = array('Dialog' => array(
    'throbber' => theme('image', ctools_image_path('throbber.gif'), t('Loading...'), t('Loading')),
  ));
  
  drupal_add_js($settings, 'setting');
  drupal_add_js('misc/jquery.form.js');
  ctools_add_js('ajax-responder');

  // Add jquery_ui js and css.
  jquery_ui_add(array('ui.core', 'ui.resizable', 'ui.draggable', 'ui.dialog'));
  drupal_add_css(JQUERY_UI_PATH .'/themes/base/ui.all.css');

  // And finally, the dialog js.
  drupal_add_js(drupal_get_path('module', 'dialog') .'/dialog.js');

  // Close the gate.
  $done = TRUE;
}

/**
 * Place HTML within the modal.
 *
 * @param $title
 *   The title of the modal.
 * @param $html
 *   The html to place within the modal.
 */
function dialog_command_display($title, $html, $options = array()) {
  return array(
    'command' => 'dialog_display',
    'title' => $title,
    'output' => $html,
    'options' => $options,
  );
}

/**
 * Dismiss the modal.
 */
function dialog_command_dismiss() {
  return array(
    'command' => 'dialog_dismiss',
  );
}

/**
 * Display loading screen in the modal
 */
function dialog_command_loading() {
  return array(
    'command' => 'dialog_loading',
  );
}

/**
 * Perform a simple modal render and immediately exit.
 *
 * This is primarily used for error displays, since usually modals will
 * contain forms.
 */
function dialog_ajax_render($title, $output, $options = array()) {
  ctools_include('ajax');
  $commands = array();
  $commands[] = dialog_command_display($title, $output, $options);
  ctools_ajax_render($commands);
}

/**
 * Wrap a form so that we can use it properly with AJAX. Essentially if the
 * form wishes to render, it automatically does that, otherwise it returns
 * so we can see submission results.
 *
 * @return
 *   The output of the form, if it was rendered. If $form_state['ajax']
 *   is set, this will use ctools_modal_form_render so it will be
 *   a $command object suitable for ctools_ajax_render already.
 *
 *   The return will be NULL if the form was successfully submitted unless
 *   you specifically set re_render = TRUE. If ajax is set the
 *   form will never be redirected.
 */
function dialog_form_wrapper($form_id, &$form_state) {
  ctools_include('form');
  // This won't override settings already in.
  $form_state += array(
    're_render' => FALSE,
    'no_redirect' => !empty($form_state['ajax']),
  );

  $output = ctools_build_form($form_id, $form_state);
  if (!empty($form_state['ajax']) && empty($form_state['executed'])) {
    return dialog_form_render($form_state, $output);
  }

  return $output;
}

/**
 * Render a form into an AJAX display.
 */
function dialog_form_render($form_state, $output) {
  $title = empty($form_state['title']) ? '' : $form_state['title'];

  // If there are messages for the form, render them.
  if ($messages = theme('status_messages')) {
    $output = '<div class="messages">' . $messages . '</div>' . $output;
  }

  $commands = array();
  if (isset($form_state['js settings'])) {
    $commands[] = ctools_ajax_command_settings($form_state['js settings']);
  }

  $commands[] = dialog_command_display($title, $output);
  return $commands;
}
