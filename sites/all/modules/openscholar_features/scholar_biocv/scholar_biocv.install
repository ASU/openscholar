<?php

/**
 * Implementaton of hook_enable().
 */
function scholar_biocv_enable() {
  // Weight of biocv needs to be lower than content profiles so it can control profile uid's
  $weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'content_profile'"));
  db_query("UPDATE {system} SET weight = %d WHERE name = 'scholar_biocv'", ($weight - 1));
  
}

function scholar_biocv_update_6001(&$sandbox){

  $res = array();
  
  if(!db_table_exists('spaces_overrides')){
    $res['#abort'] = array('success' => FALSE, 'query' => 'Spaces Overrdide table does not exist, aborting till spaces updates are run.');
    return $res;
  }

  $settings = array();
  $result = db_query('SELECT * FROM {spaces_settings} WHERE id LIKE "scholar_biocv" ');
  while ( $row = db_fetch_object($result) ) {
    $value = unserialize($row->value);
    // there is only one system variable here: use_pdf_as_cv
    db_query("INSERT INTO {spaces_overrides} (type, id, object_type, object_id, value) VALUES ('%s', '%s', 'variable', 'scholar_biocv_use_pdf_as_cv', '%s')", $row->type, $row->sid, serialize($value['use_pdf_as_cv']));
  }
  $res[] = array(
    'success' => true,
    'query' => 'Migrated the Bio/CV Settings'
  );

  return $res;

}

function scholar_biocv_update_6002(&$sandbox){

  $res = array();
  
  // Weight of biocv needs to be lower than content profiles so it can control profile uid's
  $weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'content_profile'"));
  db_query("UPDATE {system} SET weight = %d WHERE name = 'scholar_biocv'", ($weight - 1));

  $res[] = array(
    'success' => true,
    'query' => 'Updated Bio/CV Weight'
  );
  
  return $res;

}

/* copies bio blurb into a box */
function scholar_biocv_update_6003(&$sandbox){
  $ret = array();
  
  $ret['#abort'] = array('success' => FALSE, 'query' => 'Richard Says Stop.');
  return $ret;
  
  if (module_exists('os_boxes')) { //&& module_exists('vsite_controllers')) {
    _scholar_biocv_make_blurbs_from_bios();                       //make a box from each bio blurb
    $ret[] = array(
      'success' => true,
      'query' => 'Bio blub boxes created.'
    );
  } else {
    $ret['#abort'] = array('success' => FALSE, 'query' => 'os_boxes not installed.  Don\'t migrate bio blurbs to boxes until os_boxes is available.');
  }
  
  return $ret;
}

/* removes bio blurb fro mbio content */
function scholar_biocv_update_6004(&$sandbox){
	
  if (module_exists('scholar_front') && drupal_get_installed_schema_version("scholar_front") < 6002) {
    return array("#abort" => array('success' => FALSE, 'query' => 'Waiting on the scholar_front module to complete its, please run update.php again.'));
  }
	
  $ret = array();
  if (module_exists('os_boxes')) { //&& module_exists('vsite_controllers')) {
    $ret['#success']['success'] = true;
    $ret['#success']['query'] = _scholar_biocv_remove_blurbs();               //delete bio blurb content type
  } else {
    $ret['#abort'] = array('success' => FALSE, 'query' => 'os_boxes not installed.  Don\'t migrate bio blurbs to boxes until os_boxes is available.');
  }
  
  return $ret;
}

/**
 * Add new default box to all custom front pages
 * @param array $sandbox
 */
function scholar_biocv_update_6005(&$sandbox){
  
  if(!module_exists('boxes')){
    return array("#abort" => array('success' => FALSE, 'query' => 'Boxes module was not installed when this update ran, please run update.php again.'));
  }
  
  //Get all existing front contexts and remove the new default bio blurb
  $q = db_query("SELECT * FROM {spaces_overrides} WHERE `object_type` LIKE 'context' AND `object_id` LIKE 'openscholar-feature-front:reaction:block:%' AND value NOT LIKE '%boxes-scholar_biocv_bio%' ");
  while ($r = db_fetch_object($q)) {

  	$value = unserialize($r->value);
  	
  	$value['blocks']['boxes-scholar_biocv_bio'] = array(
          'module' => 'boxes',
          'delta' => 'scholar_biocv_bio',
          'weight' => 0,
          'region' => false,
          'label' => 'Bio Teaser',
    );
    $value = serialize($value);
  	
  	db_query("UPDATE {spaces_overrides} SET value = '%s' WHERE type = '%s' AND id = '%s' AND object_type = '%s' AND object_id = '%s' ",array($value,$r->type,$r->id,$r->object_type,$r->object_id));

      replace_boxes('scholar_reader-my_twitter_feed', $twitter_box, false, $res->id);
    
  }

  $res[] = array(
    'success' => true,
    'query' => 'Updated twitter boxes for scholar reader',
  );

  return $res;
}

/*
 * copies bio hook into a new simple box
 */
function _scholar_biocv_make_blurbs_from_bios(){
  $ret = array();
  
  //copy blurbs from bios into simple boxes
  $query  = 'SELECT DISTINCT c.nid,c.field_hook_text_value,n.uid ';
  $query .= 'FROM {content_type_bio} c INNER JOIN {node} n ON c.nid=n.nid ';
  $query .= 'WHERE field_hook_text_value IS NOT NULL ';
  $query .= 'GROUP BY c.nid HAVING max(c.vid) ';
  $result = db_query($query);
  // for final update, doing a list of nids might be safer.  I figure this code can be used to provide that list at a
  //later date.  for now it's adequate for testing.
  
  $a_blurb_updates = array();
  while ($r = db_fetch_object($result)) {
    $blurb = trim($r->field_hook_text_value);
    
    //users who own multiple vsites should still have their bios listed on each vsite
    //no vsite has multiple owners.
    $vsites = vsite_get_vsite_by_owner($r->uid);
    while (strlen($blurb) && $vsite = array_shift($vsites)){
      //make delta
      $identifier = $vsite->type . '-' . $vsite->id;
      $hash = boxes_create_hash($identifier);
      $delta = $identifier . '-' . $hash;
      
      $boxopts = array(
        'title' => 'My Bio',
        'description' => 'Your Bio blurb.',
        'body' => $blurb,
        'delta' => $delta,
      );
      
	    if (($box = boxes_factory('os_boxes_simple', $boxopts)) && isset($vsite->controllers->boxes)) {
        $vsite->controllers->boxes->set($box->delta, $box);
        $a_blurb_updates[] = $r->uid;
	    }
    }
  }
  
  if (count($a_blurb_updates)) {
    $ret[] = array(
      'success' => true,
      'query' => 'Created simplebox bio blurbs for UIDs: ' . implode(', ', $a_blurb_updates),
    );
  }
  
  return $ret;
}

/**
 * gets rid of old cck field for storing bio blurbs
 * http://drupal.org/node/620322
 */
function _scholar_biocv_remove_blurbs() {
  module_load_include('inc', 'content', 'includes/content.crud');
  $field_name = 'field_hook_text';
  $type_name = 'bio';
  content_field_instance_delete($field_name, $type_name);
  
  return 'Removed blurb from biocv content';
}