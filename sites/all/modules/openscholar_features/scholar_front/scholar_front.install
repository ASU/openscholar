<?php

function scholar_front_update_6001(&$sandbox){

  $res = array();
  
  if(!db_table_exists('spaces_overrides')){
    $res['#abort'] = array('success' => FALSE, 'query' => 'Spaces Overrdide table does not exist, aborting till spaces updates are run.');
    return $res;
  }
  
  //Remove setting that may have been created incorectly before upgrade
  db_query('DELETE FROM {spaces_overrides} WHERE type LIKE "og" AND object_type = "variable" AND object_id LIKE "vsite_setting_front" ');
  
  //Remove settings that were created using spaces defaults
  db_query('DELETE FROM {spaces_overrides} WHERE type LIKE "og" AND object_type = "variable" AND object_id LIKE "site_frontpage" ');
  
  $result = db_query('SELECT * FROM {spaces_settings} WHERE id LIKE "front" ');
  while ($row = db_fetch_object($result)) {
  	$a_setting = unserialize($row->value);
  	
  	switch ($a_setting['frontpage']){
  		case 'bio':
  			$nid = db_result(db_query('SELECT n.nid FROM {node} n INNER JOIN {og_ancestry} oa ON n.nid = oa.nid WHERE oa.group_nid = %d AND n.type = "bio" ', $row->sid));
  			if($nid){
  				$s_path = 'node/'.$nid;
  			}
      break;
      case 'html':
      	if($a_setting['front_nid']){
      		$s_path = 'node/'.$a_setting['front_nid'];
      	}
      break;
      case 'flag':
      	$s_path = 'scholar_front/flag';
      break;
  		case 'feature':
  		default:
  			$s_path = "scholar_front/features";
  	}
  	
  	if(isset($a_setting['bio_title'])){
  		//Show node Title
      db_query("INSERT INTO {spaces_overrides} (type, id, object_type, object_id, value) VALUES ('%s', '%s', 'variable', 'scholar_front_show_title', '%s')", $row->type, $row->sid, serialize($a_setting['bio_title']));
  	}
  	
    if(isset($a_setting['node_options']) && count($a_setting['node_options'])){
    	//Save node types to display
      db_query("INSERT INTO {spaces_overrides} (type, id, object_type, object_id, value) VALUES ('%s', '%s', 'variable', 'scholar_front_feature_nodes', '%s')", $row->type, $row->sid, serialize($a_setting['node_options']));
    }
  	
    if(isset($s_path)) db_query("INSERT INTO {spaces_overrides} (type, id, object_type, object_id, value) VALUES ('%s', '%s', 'variable', 'site_frontpage', '%s')", $row->type, $row->sid, serialize($s_path));
  }
  
  $type = variable_get('scholar_content_type', 'vsite');
  $result = db_query('SELECT nid FROM {node} n LEFT JOIN {spaces_overrides} so ON so.id = n.nid AND so.type = "og" AND so.object_type LIKE "variable" AND so.object_id LIKE "site_frontpage"  WHERE n.type LIKE "%s" AND so.id IS NULL ',$type);
  while ($nid = db_result($result)) {
  	db_query("INSERT INTO {spaces_overrides} (type, id, object_type, object_id, value) VALUES ('og', '%s', 'variable', 'site_frontpage', '%s')", $nid, serialize("scholar_front/features"));
  }
  $res[] = array(
      'success' => true,
      'query' => 'Migrated the Front Page Settings',
    );

  return $res;

}

/*
 * implementation of hook_update_N
 * takes front page settings from each space, choose a box representative of those settings, adds it to vsite
 */
function scholar_front_update_6002(&$sandbox){
  $ret = array();
  
  //make sure boxes prereqs are all met before installing
  if (! (module_exists('os_boxes') && module_exists('spaces_simpleviews') )) {
  	$ret['#abort'] = array('success' => FALSE, 'query' => 'Please enable os_boxes and spaces_simpleviews before running scholar_front_update_6002');
    return $ret;
  }

  //make sure vsite->controllers->boxes exists
  $v = db_result( db_query('SELECT nid FROM {node} WHERE type = "vsite" LIMIT 1') );
  $vsite = vsite_get_vsite($v);
  if (! isset($vsite->controllers->boxes)) {
  	$ret['#abort'] = array('success' => FALSE, 'query' => 'vsite object has no box controller.  clear cache before running update.');
  	return $ret;
  }

  //init sandbox.  this persists between batches
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = (int)db_result(  db_query('SELECT COUNT(nid) FROM {node} WHERE type = "vsite" ')  );
  }
  
  //vsites per batch.  
  $limit = 50;
  
  require_once drupal_get_path('module', 'scholar_front') . '/scholar_front.box_maker.inc';
  //$batch['operations'][] = array('_front_boxmaker',array($limit, $offset, $total_vsites),);
  $updated_vsites = _front_boxmaker($limit, $sandbox['progress'], $sandbox['max']);
  $sandbox['progress'] += $limit;
  
  if ($sandbox['progress'] < $sandbox['max']) {
    $ret['#finished'] = $sandbox['progress'] / $sandbox['max']; 
  } else {
    $ret['#finished'] = TRUE;
  }
  
  
//  front_boxmaker();  
  
  return $ret;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// don't let this hit prod.  it's test code for creating a box for each vsite's front page
/////////////////////////////////////////////////////////////////////////////////////////////

// menu item.  makes boxes of each user's front page.  adds box to a region.
function front_boxmaker() {
  $limit = 50;
  $total_vsites = (int)db_result(  db_query('SELECT COUNT(nid) FROM {node} WHERE type = "vsite" ')  );
  $ret = array();


/*	//no need to specify batch if we're already in update.php
  $batch = array(
  	'title' => t('Making boxes for each vsite\'s front page'),
  	'operations' => array(),
  	'finished' => 'front_boxmaker_done',
  	'file' => drupal_get_path('module', 'scholar_front') . '/scholar_front.box_maker.inc',
  );
*/
  $offset = 0;
  while ($offset < $total_vsites) {
  	$batch['operations'][] = array('_front_boxmaker',array($limit, $offset, $total_vsites),);
  	$offset += $limit;
  }

  batch_set($batch);
  batch_process(''); //where do we send them if this happens in update.php?
}

