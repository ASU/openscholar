<?php

include_once('scholar_front.features.inc');

function scholar_front_menu(){
  $items = array();

  //Backwards Compatiblility (redirects Home)
  $items['home'] = array(
    'type' => MENU_CALLBACK,
    'title' => '',
    'page callback' => 'scholar_front_redirect_home',
    'file' => 'scholar_front.pages.inc',
    'access arguments' => array('access content'),
    'weight' => 0,
  );

  $items['scholar_front/features'] = array(
    'type' => MENU_CALLBACK,
    'title' => '',
    'page callback' => 'scholar_front_features',
    'file' => 'scholar_front.pages.inc',
    'access arguments' => array('access content'),
    'weight' => 0,
  );

  $items['scholar_front/flag'] = array(
    'type' => MENU_CALLBACK,
    'title' => '',
    'page callback' => 'scholar_front_home_flag',
    'file' => 'scholar_front.pages.inc',
    'access arguments' => array('access content'),
    'weight' => 0,
  );

  $items['features/scholar_front'] = array(
    'title' => 'Front Page Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholar_front_settings'),
    'access callback' => module_exists('spaces') ? 'spaces_access_admin' : 'user_access',
    'access arguments' => module_exists('spaces') ? array() : array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'scholar_front.pages.inc',
  );

  $items['scholar_front_welcome'] = array(
    'type' => MENU_CALLBACK,
    'title' => '',
    'page callback' => 'scholar_front_welcome',
    'file' => 'scholar_front.pages.inc',
    'access arguments' => array('access content'),
  );
  
  //jsagotsky's dev code to create a box for everyone's front page setting
  $items['scholar_front/boxmaker'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Generating boxes from vsite front page settings',
    'page callback' => 'front_boxmaker',
    'access arguments' => array('administer blocks'),
  );

  return $items;
}

function scholar_front_init() {
  if ($_GET['q'] == variable_get('site_frontpage', 'welcome') && $_GET['q'] == variable_get('scholar_front_frontpage_path', 'welcome')) {
    // this is likely to be an alias.
    if ($real_path = drupal_lookup_path('source', $_GET['q'])) {
      $_GET['q'] = $real_path;
      drupal_init_path();
    }
    else {
      // unset front page context
    }
  }
}

/**
 * Implementation of hook flag_alter
 */
function scholar_front_flag_alter(&$flag){
  if (!($viste = vsite_get_vsite()) || $flag -> name !== 'scholar_frontpage'){
    return;
  }
  vsite_include('vsiteapi');

  $types = vsite_content_types();

  if (count($types)){
    $flag -> types = array_keys($types);
  }
}


/**
 * Implementation of hook_link().
 */
function scholar_front_vsite_admin_link($type, $object){
  $links = array();
  global $user;
  //check font page settings here, only execute if front page setting equals flag
  $vsite = vsite_get_vsite();
  if(!$vsite) return array();

  $a_front_settings = $vsite->controllers->variable->get('vsite_setting_front');
  if ($a_front_settings['frontpage'] !== 'flag' ||
      !($vsite -> access_admin()) ||
      !flag_fetch_definition($type)){
    return $links;
  }



  // Get frontpage flags
  $flag = flag_get_flag('scholar_frontpage');


  if (!$flag->applies_to_content_object($object)) {
    // Flag does not apply to this content.
    return false;
  }

  $content_id = $flag->get_content_id($object);
  // The flag links are actually fully rendered theme functions.
  // The HTML attribute is set to TRUE to allow whatever the themer desires.
  $links['flag-'. $flag->name] = array(
  'title' => $flag->theme($flag->is_flagged($content_id) ? 'unflag' : 'flag', $content_id),
  'html' => TRUE,
  );

  if (isset($links)) {
    return $links;
  }
}

/**
 * Implementation of hook_nodeapi()
 */
function scholar_front_nodeapi(&$node, $op, $a3, $a4){
  switch($op){
    case 'presave':
    	$vsite = vsite_get_vsite();
      if(!$vsite) return;
        
      // set new property in node object indicating to set as front page
      if ((isset($_GET['action']) && ($_GET['action'] === 'setfront')) ||
          ($node->uid == $vsite->group->uid && $node->type == "bio" && variable_get('site_frontpage',false) == "scholar_front_welcome")){
          $node -> front  = 1;
      }
      break;

    case 'insert':
      if ($node -> front == 1){
      	$vsite = vsite_get_vsite();
      	if(!$vsite) return;

      	$vsite->controllers->variable->set('site_frontpage','node/'.$node->nid);
        $link =  l('Control Panel Settings.','cp/build/features',array("query" => array("open_feature_settings" => "scholar_front")) );
        $msg_variables = array (
        '@type' => node_get_types('name', $node),
        '%title' => $node -> title,
        '!link' => $link,
        );

        //redirect the user to thier home page with message
        drupal_set_message(t('@type <em>%title</em> has been created. You have selected this post to be your site\'s front page. To change your front page content, go the !link', $msg_variables));
        $_REQUEST['destination'] = "<front>";
      }
      break;
  }
}

/**
 * hook preprocess page
 */
function scholar_front_preprocess_page(&$vars){
	if(!variable_get('scholar_front_show_title',true) && drupal_is_front_page()){
	  $vars['title'] = "";
	}
	if (drupal_is_front_page() && $new_title = variable_get('scholar_front_site_title', '')) {
	  $vsite = vsite_get_vsite();
	  drupal_set_title($vsite->group->title);
	  $vsite->group->title = $new_title;
	}
}

/**
 * Implementation of hook_context_page_condition().
 *
 * Last chance to make changes before the reactions start
 */
function scholar_front_context_page_condition() {

	$active_contexts = context_active_contexts();
	$b_found_feature = context_isset('context','openscholar-feature-front');
	foreach ($active_contexts as $key => $context){
		if(strpos($key,"openscholar-feature-") !== 0 || $key == 'openscholar-feature-front') continue;
		if($b_found_feature){
			unset($active_contexts[$key]);//Allow only one feature active
		}
		$b_found_feature = true;
	}

	context_set('context',$active_contexts);
}

/**
 * Add the JS needed by our feature popup
 */
function scholar_front_form_alter(&$form, $form_state, $form_id) {
  switch($form_id){
    case 'spaces_features_form':
    	//These are needed for the modal popup
      ctools_add_js('dropdown');
      ctools_add_css('dropdown');
      ctools_add_js('dependent');
      drupal_add_js("misc/autocomplete.js");

		  /*
		   * remove home page settings and make them part of the front page features settings
		   */
      unset($form['site_frontpage']); // we dont need settings here
      unset($form['site_frontpage_path']); //Remove reset to defaults button

      /*
       * Do not allow users to disable front feature
       */
      $form['spaces_features']['scholar_front']["#disabled"] = true;
    break;
    case 'scholar_front_settings':
    	$options = $form['site_frontpage']['#options'];
    	if(count($options) && array_key_exists("create_bio",$options)){
    		unset($options['create_bio']);
	    	foreach ($form['buttons'] as $name => $element) {
	    		$form['buttons'][$name]['#process'] = array('ctools_dependent_process');
	    		$form['buttons'][$name]['#dependency'] = array('edit-site-frontpage' => array_keys($options));
          $form['buttons'][$name]['#prefix'] = '<div id="edit-'.$name.'-wrapper" class="button-div-wrapper">';
          $form['buttons'][$name]['#suffix'] = '</div>';
	    	}
    	}

    break;
  }
}

/**
 * Add the context links for the front page
 */
function scholar_front_context_links_alter(&$links){
  $front_context = context_get('context', 'openscholar-feature-front');
  if ($front_context) {
  	vsite_include('vsiteapi');
    $items = vsite_create_links();

    //Add all links if we are on the front page
    $links = array_merge($items, $links);
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////
// don't let this hit prod.  it's test code for creating a box for each vsite's front page
/////////////////////////////////////////////////////////////////////////////////////////////

// menu item.  makes boxes of each user's front page.  adds box to a region.
function front_boxmaker() {
  $returned_vsites = array();
  
  //fetch all users
  $query = 'SELECT uid FROM {users}';
  $result = db_query($query);
  
  while ($res = db_fetch_object($result)) {
    $vsites = vsite_get_vsite_by_owner($res->uid);
    
    //loop over user's vsites
    foreach($vsites as $vsite) {
      $settings = fb_front_settings($vsite);
      $front = fb_get_front($settings);
      if (($box = fb_mk_front_box($vsite, $front)) != FALSE) {
        $returned_vsites[] = fb_add_box($vsite, $box);
      }     
    }
  }
  
  return 'Created front box for vsites: ' . implode(', ', $returned_vsites);
}

// get settings for this vsite's front page
// settings are two parts.  there are several types of settings.  list the type.  its settings will vary.
function fb_front_settings($vsite) {
  $query  = 'SELECT object_id,value FROM {spaces_overrides} WHERE id = "%s" '; 
  $query .= 'AND object_id IN ("site_frontpage", "scholar_front_frontpage_nid", "scholar_front_frontpage_path", "scholar_front_feature_nodes", "schoalr_front_create_bio", "scholar_front_site_title")';
  $result = db_query($query, $vsite->id);
  $settings = array();
  while ($obj = db_fetch_object($result)) {
    $settings[$obj->object_id] = unserialize($obj->value);
  }
  
  return $settings;
}

// given db info on front page, return its settings.
function fb_get_front($settings) {
  $front = array();
  if (isset($settings['scholar_front_site_title'])) {
    $front['title'] = $settings['scholar_front_site_title'];
  }
  
  switch ($settings['site_frontpage']) {
    //features content
    case 'scholar_front/features':
    $front['type'] = 'features';
    $front['options']['feature_nodes'] = $settings['scholar_front_feature_nodes'];
    //nid and path are useless
      break;
      
    //flagged content
    case 'scholar_front/flag':
      $front['type'] = 'flag';
      //no options
      break;
      
    //path
    case ''.$settings['scholar_front_frontpage_path']:
      $front['type'] = 'path';
      $options = array('path' => $settings['scholar_front_frontpage_path']);
      break;
  }
  
  if (isset($front['type'])) {
    return $front;
  }
  
  //no type yet.  frontpage is a node/nid.  maybe bio, maybe nid.
  $nid = (int) end(split('/', $settings['site_frontpage']));
  $query = 'SELECT type FROM {node} WHERE nid = %d';
  $result = db_query($query, $nid);
  $r = db_fetch_object($result);
  $type = $r->type;
  
  if ($type == 'bio') {
    $front['type'] = 'bio';
  } else {
    $front['type'] = 'nid';
    $front['options'] = array('node' => $settings['site_frontpage']);
  }
  
  // bio has site_frontpage of node/nid
  // unknown type does the same thing.
  
  return $front;
}

//make a box for each vsite.
function fb_mk_front_box($vsite, $settings) {
  $opts = array();
  
  if (isset($settings['title'])) {
    $opts['title'] = $settings['title'];
    $opts['subject'] = $settings['title'];
  }
  
  $opts['description'] = 'This box generated from your front page settings.';
  
  switch ($settings['type']) {
    case 'bio':
      $type = 'os_boxes_bio';
      break;
      
    case 'nid':
      $type = 'os_boxes_node';
      $opts['nid'] = (int) end(explode('/', $settings['options']['node'])); //get nid from node/978897
      break;
      
    case 'path':
      //path as a front page box is not supported.  
      return false;
      
    case 'flag':
      $type = 'os_boxes_featuredposts';
      break;
      
    case 'features':
      $type = 'os_boxes_features';
      $opts['node_type'] = $settings['options']['feature_nodes'];
      break;
  }
  return mk_box($vsite, $type, $opts);
}

//creates a box object in the vsite given type and opts.  returns $box
function mk_box($vsite, $type, $opts) {
  $identifier = $vsite->type . '-' . $vsite->id;
  $hash = boxes_create_hash($identifier);
  $delta = $identifier . '-' . $hash;
  
  $opts['delta'] = $delta;
  if (($box = boxes_factory($type, $opts)) && isset($vsite->controllers->boxes)) { 
    $vsite->controllers->boxes->set($box->delta, $box);
    return $box;      
  } else {
    return false;
  }
}

// adds box to vsite.  returns id of vsite on successful creation
function fb_add_box($vsite, $box) {
  //openscholar-feature-front:reaction:block:scholar_bunchy
  //if it doesn't exist, grab from preset?
  //select theme as subquery to get object_id?
  
  //let spaces select the current setting or the default
  $front_context = $vsite->controllers->context->get('openscholar-feature-front:reaction:block');
  $front_context['blocks']['boxes-' . $box->delta] = array(
    'module' => 'boxes',
    'delta' => $box->delta,
    'weight' => 0,
    'region' => 'content_top',   //@todo check this
    'label' => $box->title,
    'block_config_path' => '', //will this vary with block type?
    'tags' => $box->tags,
  );
  
  if ($vsite->controllers->context->set('openscholar-feature-front:reaction:block:'.$vsite->group->og_theme, $front_context)) {
    return $vsite->id;
  }
}

