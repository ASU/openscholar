<?php 

//$id;

/**
 * Implementation of hook_cite_distribute_register()
 * registers this module's repository information with the
 * core cite distribute API database
 */
function sword_meta_cite_distribute_register(){
  //unlike other cite_distribute meta modules, sword meta can
  //contain several definitions of destinations.  look these up
  // and generate arrays.  
  // TODO: make sure cite_distribute can take an array of array of options
	
	
	$module_info[] = array(
    'name'          => 'sword_meta',
    'repository'    => 'SWORD',
    'file'          => 'none', 
    'dynamic_paths' => TRUE, 
    //'callback'	  => '_check_index',
  );
  return $module_info;
}

/**
* Implementation of hook_menu()
*/
function sword_meta_menu() {
  $items = array();
   
  $items['admin/settings/cite_distribute/sword_meta/config'] = array(
  'title' => t('SWORD Destinations'),
  'type' => MENU_LOCAL_TASK ,
  'page callback' => 'drupal_get_form',
  'page arguments' => array('sword_meta_config'),
  'file' => 'sword_meta.admin.inc',
  'file path' =>  $path_inc = drupal_get_path('module', 'sword_meta'),	
  'weight' => 3,
  'access callback' => user_access('administer cite distribute'),
  );  
  
  /*
  $items['admin/settings/cite_distribute/sword_meta/config/defaults'] = array(
  'title' => t('RePEc Template Mappings'),
  'type' => MENU_LOCAL_TASK ,
  'page callback' => 'drupal_get_form',
  'page arguments' => array('repec_meta_templates'),
  'file' => 'repec_meta.admin.inc',
  'file path' =>  $path_inc = drupal_get_path('module', 'repec_meta'),
  'weight' => -9,
  'access callback' => user_access('administer cite distribute'),
  ); 
  */
  /*
  $items['admin/settings/cite_distribute/repec_meta/config/fields'] = array(
  'type' => MENU_LOCAL_TASK ,
  'title' => t('RePEc Manage Fields'),
  'page callback' => 'drupal_get_form',
  'page arguments' => array('repec_meta_fields'),
  'file' => 'repec_meta.admin.inc',
  'file path' =>  $path_inc = drupal_get_path('module', 'repec_meta'),
  'weight' => -8,
  'access callback' => user_access('administer cite distribute')
  );
  */
 return $items;
}

/**
* Implementation of hook_perm()
*/
function sword_meta_perm(){
  return array('submit sword widget');
}

/**
 * Implementation of hook_nodeapi()
 */
function sword_meta_nodeapi(&$node, $op, $a3){
  switch ($op){
    case 'validate':
      //in validate, $a3 is $form
      if($node -> type == "biblio" && $node->repec_meta ) {
				foreach ($a3['#post']['biblio_contributors'] as $bc) {
					foreach ($bc as $author) {
						if ( isset($author['name']) && strlen($author['name'])>0 ) {
							return; /* an author has been set */
						}
					}
				}
				form_set_error('biblio_contributors', t('At least one author is required for SWORD distribtuion'));
      } 
   	break;   
  }
}


/**
* Implementation of hook_cite_distribute_push()
* 
* new hook.  this is for modules that have data to send somewhere instead of dropping it in a file
* note that google scholar does not work this way.  it uses a theme hook to change how the page is
* rendered to give google some metadata.
*/
function sword_meta_cite_distribute_push($node, $module_mode, $iteration = NULL){
	$url = "http://bachman.hul.harvard.edu:9034/";
	$user = "jsagotsky@iq.harvard.edu";
	$pw = "password";
	$obo = "Sexton Hardcastle";
	
	$service_url = $url . 'sword/servicedocument';
	$deposit_url = $url . 'deposit/sword-user'; // ?!
	
	require_once(drupal_get_path('module', 'sword_meta') .	'/swordapp-php-library-1.0/swordappclient.php');
	$sac = new SWORDAPPClient();
	$sac_doc = $sac->servicedocument($service_url, $user, $pw, $obo);
	
	if ($sac_doc->sac_status == 401) {
		drupal_set_message('cite_distribute: Could not login on behalf of ' . $obo . ', trying IQSS.', 'warning');
	  $obo = "";  //SWORD server did not have a user on whose behalf we could deposit this.  Use our own user instead.
		$sac_doc = $sac->servicedocument($service_url, $user, $pw, $obo);
		
		if ($sac_doc->sac_status == 401) {
			drupal_set_message("cite_distribute: Could not login to SWORD server", 'error');
			//couldn't log in.  should also error.
			return false;
		}
	}
	
	if ($sac_doc->sac_status != 200) {
		drupal_set_message('Unable to connect to SWORD server', 'error');
		return false;
	}
	
	$file = _sword_meta_package_mets($node);
	
	if ($file) {
		try {
			$deposit = $sac->deposit($deposit_url, $user, $pw, $obo, $file);
		} catch(Exception $e) {
			drupal_set_message($e->getMessage, 'error');
			return false;
		}
	// deposit(url, username, password, on-behalf-of-user, filename,
    //               [format_namespace, package_type, noop, verbose]) 
	}
	
	return $sac_doc;
}

/*
 * Create a METS zip file for sword deposit
 * returns path of file
 */
function _sword_meta_package_mets(&$node) {
	require_once(drupal_get_path('module', 'sword_meta') .	'/swordapp-php-library-1.0/packager_mets_swap.php');
	
	$sac_rootin = '/tmp/';
	$sac_dirin = 'sword_meta_mets';
	$sac_rootout = '/tmp/';
	$sac_fileout = 'mets_files.zip';
	
  $packager = new PackagerMetsSwap($sac_rootin, $sac_dirin, $sac_rootout, $sac_fileout);
	
	$metadata = array(
		'Type' => 'http://purl.org/eprint/entityType/ScholarlyWork',
	  'Title' => $node->title,
	  'Custodian' => '',
	  'Abstract' => '',
	  'Creator' => array(),   //$node->biblio_contributors[1][*][firstname, lastname]
	  'Identifier' => '',
	  'DateAvailable' => '',
	  'StatusStatement' => '',
	  'CopyrightHolder' => '',
	  'Citation' => '',
	  'File' => array(),      //$node->files[]
	);
	
	foreach($node->biblio_contributors as $delta => $cont) {
		foreach($node->biblio_contributors[$delta] as $contributor) {
			$metadata['Creator'][] = $contributor['firstname'] . ' ' . $contributor['lastname'];
		}
	}
	
	foreach ($metadata as $name => $data) {
		if (is_array($data)) {
			$func = 'add' . $name;
			foreach ($data as $delta) {
				$packager->$func($data[$delta]);
			}
		} else {
			$func = 'set' . $name;
			$packager->$func($data);
		}
	}
	
	try {
  	$packager->create();
	} catch (Exception $e) {
		drupal_set_message('sword_meta: ' . $e->getMessage(), 'error');
		return false;	
	}
	
	return $sac_rootout . '/' . $sac_fileout;
}
