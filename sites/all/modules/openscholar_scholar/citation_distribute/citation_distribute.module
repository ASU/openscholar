<?php 

define('_CRON_LIMIT', 25);

/**
 * Implementation of hook_menu
 */
function citation_distribute_menu() {
	$items = array();
	$items ['admin/settings/citation_distribute'] = array(
		'title' => t ( 'Citation Distribute' ), 
		'page callback' => 'drupal_get_form', 
		'page arguments' => array ('citation_distribute_admin' ), 
		'file' => 'citation_distribute.admin.inc', 
		'access arguments' => array ('administer citation distribute' ) 
	);
	return $items;
}

/**
 * Implementation of hook_perm()
 */
function citation_distribute_perm() {
	return array ('administer citation distribute' );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function citation_distribute_ctools_plugin_api($module, $api) {
  if ($module == 'citation_distribute' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory
 */
function citation_distribute_ctools_plugin_directory($module, $plugin) {
  if ($module == 'citation_distribute' && !empty($plugin)) {
    return "plugins/$plugin";
   }
}

/**
 * implementation of hook_ctools_plugin_plugins()
 */
function citation_distribute_ctools_plugin_plugins() {
	return array(
		'use hooks' => TRUE,
	);
}
	
function citation_distribute_citation_distribute_plugins(){
	$info = array();	
	$path = drupal_get_path('module', 'citation_distribute') . '/plugins/';

	$info['citation_distribute_service'] = array(
		'handler' => array(
			'class' => 'citation_distribute_service',
			'file'  => 'citation_distribute_service.inc',
			'path'  => $path,
		)
	);
	
	$info['service_sword'] = array(
		'type' => 'push',
		'description' => 'SWORD destination',
		'handler' => array(
			'parent' => 'citation_distribute_service',
			'class' => 'citation_distribute_service_sword',
			'file' => 'citation_distribute_service_sword.inc',
			'path' => $path,
		)
	);
	
	$info['sword_dash'] = array(
		'type' => 'push',
		'title' => 'DASH',
		'description' => 'Digital Access to Scholarship at Harvard',
		'handler' => array(
			'parent' => 'service_sword',
			'class' => 'citation_distribute_service_sword_dash',
			'file' => 'citation_distribute_service_sword_dash.inc',
			'path' => $path,
		)
	);
	
	$info['googlescholar'] = array(
		'type' => 'metadata',
		'title' => 'Google Scholar',
		'description' => 'Google Scholar',
		'handler' => array(
			'parent' => 'citation_distribute_service',
			'class' => 'citation_distribute_service_googlescholar',
			'file' => 'citation_distribute_service_googlescholar.inc',
			'path' => $path,		
		)
	);
	
	$info['service_repec'] = array(
		'type' => 'file',
		'title' => 'RePEc',
		'description' => 'RePEc',
		'handler' => array(
			'parent' => 'citation_distribute_service',
			'class'  => 'citation_distribute_service_repec',
			'file'   => 'citation_distribute_service_repec.inc',
			'path' 	 => $path,
		),
	);
	
	return $info;
}



/**
 * Implementation of hook_form_alter()
 * Adds list of available destinations to biblio node creation form
 */
function citation_distribute_form_alter(&$form, $form_state, $form_id) {
	
	switch($form_id) {
	case 'biblio_node_form': 
		/*Add cite distribute options to biblio node creation page*/
		
		$form['citation_distribute_selections'] = array(
			'#type' => 'fieldset', 
			'#title' => t('** Distribute to Academic Repositories'),
			'#attached' => array(
				'js' => array(drupal_get_path('module', 'citation_distribute' ) . '/citation_distribute.js') 
			) 
		);
		
		$form['citation_distribute_selections']['intro'] = array(
		  '#type' => 'item', 
		  '#title' => t('Distribute this publication to the following academic repositories') 
		);
		
		// List all plugins with a title
		foreach( _plugins() as $plugin ) {
			$published = db_result( db_query( "SELECT nid from {citation_distribute} WHERE type = '%s' AND nid = %d", 
																				$plugin['name'], $form['nid']['#value'] ));
																				
			//Automatically mark distribution of plugins with autoflag enabled
			$autoflag = variable_get('citation_distribute_' . $plugin['name'] . '_auto_flag', false);
			$published = ($published || $autoflag);
					
			if (isset($plugin['title'])) {
				$form['citation_distribute_selections'][$plugin['name']] = array(
					'#type'=>'checkbox',
					'#title' => t('@repos', array('@repos' => $plugin['title'])),
					'#default_value' => (bool)$published,	
					'#disabled' => false, //(bool)$published, //published items can't be unpublished.  should we try to support unpublish where possible?
			  );
			}
		}
		
		$form['citation_distribute_selections']['nid'] = array(
		  '#type' => 'hidden',
		  '#value' => $form['nid']['#value'], 
		);
		
		//add the cite distribute submit function
		array_unshift ( $form ['#submit'], 'citation_distribute_form_submit' );
		break;
	}
}

/**
 * Implementation of hook_nodeapi()
 * Applies flag to node if it's being published to a CD repository
 */
function citation_distribute_nodeapi(&$node, $op, $a3) {
	if ($node->type == 'biblio') {
	
		switch ($op) {
			
			case 'insert':
			case 'update':
				$returns = array();
						
				foreach( _plugins() as $plugin ) {
					if (isset($node->{$plugin['name']})) {
						$flag = flag_get_flag($plugin['name']);
						if ( $node->{$plugin['name']} ) {
							$flag->flag('flag', $node->nid); //flag returns if the node was flagged.  my output never gets returned.
						} else {
							$flag->flag('unflag', $node->nid); //remove old flags 
						}
					}
				}
				if ($output = theme('citation_distribute_form_msg', $modules)) {
					drupal_set_message(t($output)); //not necessarily!  Can we get output from flags?  hook_flag COULD return something from each calss...
					//check returns[] values.  maybe unset some upds?
				}			
			break;

			case 'validate':			
				//repec and dash need to validate.  here or in validate hook?
				foreach (_plugins() as $plugin) {
					if ( isset($node->$plugin['name']) && $node->$plugin['name'] )  {
						if ($class = ctools_plugin_get_class($plugin, 'handler', TRUE)) {
							$service - new $class();
							//validate!
							if (method_exists($service, 'validate')) {
								$error = $service->validate($a3);
								($error) && form_set_error('', $error);
							}
						}
					}
				}
			break;
			

			case 'delete':
				//clean up flags from deleted nodes
				foreach( _plugins() as $plugin ) {
					$flag = flag_get_flag($plugin['name']);
					$flag->flag('unflag', (int)$node -> nid);
				}
			break;
		}
	}
}

/**
 * Implementation of hook flag
 * This gets called whenever a node recieves a flag.  If it gets a citation_distribute flag, process it.
 */
function citation_distribute_flag($event, $flag, $nid, $account) {
		
	foreach (_plugins() as $plugin) {
		if ($flag->name == $plugin['name']) {
			switch($event) {
				
				case 'flag':
					_citation_distribute_update_db($plugin['name'], $nid); //another arg for status?
					if (variable_get('citation_distribute_module_mode', '') == 'per_submission') { // for other cases, we'll have to make a cron job?  maybe an api call to push?
						$dist_err = _citation_distribute_distribute($nid, $plugin['name']);
						//if dist_err, un update?
					}
					break;
					
				case 'unflag':
					_citation_distribute_removefrom_db($plugin['name'], $nid);
					//check if service has a recall/delete option
					//easy for repec.  maybe possible for sword.  unlisting works fine for google
					break;
			}
		}
	}
}

/**
* Implementation of module_preprocess_hook().
* Allows metadata style plugins to add their data when the page is drawn.
*/
function citation_distribute_preprocess_page(&$variables) {
	/* only display on a node page */
	if (isset ($variables['node'])) {
				
		/* check that each metadata plugin has been marked for this node.  add metadata for marked ones */
		foreach(_plugins() as $plugin) {
			if (isset($plugin['type']) && isset($plugin['name']) && $plugin['type'] == 'metadata') {
				if (db_result(db_query("SELECT nid FROM {citation_distribute} WHERE type = '%s' AND nid = %d",$plugin['name'], (int)$variables['node']->nid))) {

					if ($class = ctools_plugin_get_class($plugin, 'handler', TRUE)) {
						$service = new $class();
						$out = $service->render($service->map_metadata($variables['node']->nid));
  					$variables['head'] .= $out;				
					}

				} 
			}
		}
	}
}

/*
 * implementation of hook_theme
 * Allows citation_distribute to pass theming of metadata plugins to those plugins
 */
function citation_distribute_theme($existing, $type, $theme, $path) {
	$args_array = array('');

	/* theme the output message that happens after any plugin is used */
	$theme = array(
		'citation_distribute_form_msg' => array(
	 	  'arguments' => array('modules' => NULL),
			'file' => 'citation_distribute.theme.inc',
			'path' => drupal_get_path('module', 'citation_distribute'),
	  ),
	);
	
	/* metadata plugins also ahve the option to theme their output */
	foreach(_plugins() as $plugin) {
		if ($plugin['type'] == 'metadata') {
			$theme[$plugin['name']] = array(
				'arguments' => $args_array,
				'file' => $plugin['handler']['class'] . '.theme.inc',
				'path' => $plugin['handler']['path'],
			);
		}
	}
	return $theme;
}


/* Distributes citations */
function _citation_distribute_distribute($nid, $plugin_name) {
	$plugins = _plugins();
	$plugin = $plugins[$plugin_name];
	
	if ($class = ctools_plugin_get_class($plugin, 'handler', TRUE)) {
		$service = new $class();
		$out = $service->save($nid, $plugin_name);
	}
	//watchdog or log here.  $out gets lost when it hits flag
	
	return $out;
}

/* logs which nodes have been/need to be distributed */
function _citation_distribute_update_db($name, $nid) {
	global $user;
	$node = node_load ( $nid );
	$module_mode = variable_get ( 'citation_distribute_module_mode', '' );
	
	if ($module_mode == 'per_submission') {
		$upd = 0;
	} else {
		$upd = 1;
	}
	
	/* track whether node needs to be distributed at next cron pass */
	if (db_result ( db_query ( "SELECT nid FROM {citation_distribute} WHERE nid = %d AND type = '%s'", $node->nid, $name ))) {
		//update existing record
		db_query ( "UPDATE {citation_distribute} SET uid = %d, nid = %d, type= '%s', tid = %d , upd = %d , modified = now()
		  WHERE nid = %d and type = '%s'", 
		  $user->uid, $node->nid, $name, $node->biblio_type, $upd, $node->nid, $name ); 
	} else {
		//create new record	  // node already exists in Drupal but never been added to cite_distribute table
	  db_query ( "INSERT INTO {citation_distribute} (uid, nid, type, tid, upd, created) VALUES (%d, %d, '%s', %d, %d, now())",
	    $user->uid, $node->nid, $name, $node->biblio_type, $upd );
	}
	
}

/* removes nodes which are no longer listed */
function _citation_distribute_removefrom_db($name, $nid) {
	db_query('DELETE FROM {citation_distribute} WHERE type = "%s" AND nid = %d', $name, $nid);
}

/**
 * Implementation of hook flag_default_flags
 * creates flags for each installed plugin with a title.
 * plugins without titles are abstract and don't need to be listed.  
 * @return unknown
 */
function citation_distribute_flag_default_flags($flags = array(), $i = 0) {
		
	foreach (_plugins() as $plugin) {
		if ($plugin['title']) {
			$flags[] = array (
			  'content_type' => 'node', 
			  'name' => $plugin['name'], 
			  'title' => 'title:' . $plugin['title'], 
			  'global' => false, 
			  'types' => array ('biblio' ), 
				'flag_short' => 'Send to ' . $plugin['title'], 
				'flag_long' => 'Send to ' . $plugin['title'] . ' repository', 
				'flag_message' => '', 
				'unflag_short' => 'Remove from ' . $plugin['title'],
			  'unflag_long' => 'Remove from ' . $plugin['title'] . ' repository', 
			  'unflag_message' => '', 
			  'unflag_denied_text' => '', 
			  'link_type' => 'normal', //normal, toggle, confirm
				'roles' => array (
					'flag' => array (0 => '2' ),
				  'unflag' => array (0 => '2' ) 
				), //hiding these on page, teaser, and edit node
				'show_on_page' => false, 
				'show_on_teaser' => false, 
				'show_on_form' => false, 
				'access_author' => '',  //own or others.  should admin be allowed to flag?
				'i18n' => 0, 
				'status' => true, 
				//locked flags properties do not show on config page and are only configurable here.
				'locked' => array (
				  'name' => 'name', 
				  'show_on_page' => 'show_on_page', 
				  'show_on_teaser' => 'show_on_teaser', 
				  'show_on_form' => 'show_on_form', 
				  'global' => 'global', 
				  'link_type' => 'link_type', 
				  'types' => 'types' 
				), 
				'api_version' => 2, 
				'module' => 'citation_distribute' 
			);
		}
	}
	return $flags;
}


/**
 * hook views_pre_render
 * marks node operations (above) for inclusion in bulk update operations
 */
function citation_distribute_views_pre_render(&$view) {
	if (in_array('biblio', $view->args)) {
		$plugins = _plugins ();
		
		if ($view->name == 'vsite_content') {
			$plugin = $view->style_plugin->options;
			foreach($view->style_plugin->all_operations as $op => $def) {
				$flag_function = $def['callback arguments'][1];
				
				//add flags that use a CD plugin as a callback and that CD plugin has a title
				if ( isset($plugins[$flag_function]['title'])) {
					$plugin['selected_operations'][$op] = $op;
				}
			}
		  $view->style_plugin->options = $plugin;
		}
	}
}


/**
 * _plugins().  Shortcut for getting list of citation_distribute plugins
 */
function _plugins() {
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	return $plugins;
}
/* 
 * hook_cron
 * In batch mode, process pending updates during cron jobs
 * nodes have already been flagged, but not distributed yet
 * for metadata nodes, this is meaningless, but updates their db status
 */
function citation_distribute_cron() {
	$plugins = _plugins();
	
	//filter out plugins with no title.  these are abstract plugins that won't have push methods
	function has_title($p) {return (isset($p['title']) && count($p['title']) > 0); }
	$plugins = array_filter($plugins, 'has_title');
	
	//wrap each str in quotes so we can implode them and pass them to mysql IN.
	function enquote($s) {return '\'' . $s . '\'';}
	$quoted = array_map( 'enquote', array_keys($plugins) );
 
	$query = 'SELECT nid,type FROM {citation_distribute} WHERE upd=1 AND type IN ( ' . implode(',', $quoted) . ' ) LIMIT %d ';
	$result = db_query($query, variable_get('citation_distribute_cron_limit', _CRON_LIMIT));   //include admin page for this 

	while($res = db_fetch_object($result)) {
		if (in_array($res->type, array_keys($plugins))) {  //only attempt plugins we have.  old plugins could leave entries in db, but be unprocessableable.
			$dist_err = _citation_distribute_distribute($res->nid, $res->type); //where to dump errors?  maybe error determines upd?
			db_query ( "UPDATE {citation_distribute} SET upd = 0 , modified = now() WHERE nid = %d and type = '%s'", $res->nid, $res->type ); 
		}
	}
}

