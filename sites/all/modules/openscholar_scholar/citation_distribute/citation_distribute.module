<?php 

/**
 * Implementation of hook_ctools_plugin_api().
 */
function citation_distribute_ctools_plugin_api($module, $api) {
  if ($module == 'citation_distribute' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory
 */
function citation_distribute_ctools_plugin_directory($module, $plugin) {
  if ($module == 'citation_distribute' && !empty($plugin)) {
    return "plugins/$plugin";
   }
}

/**
 * implementation of hook_ctools_plugin_plugins()
 */
function citation_distribute_ctools_plugin_plugins() {
	return array(
		'use hooks' => TRUE,
	);
}
	
function citation_distribute_citation_distribute_plugins(){
	$info = array();	
	$path = drupal_get_path('module', 'citation_distribute') . '/plugins/';

	$info['citation_distribute_service'] = array(
		'handler' => array(
			'class' => 'citation_distribute_service',
			'file'  => 'citation_distribute_service.inc',
			'path'  => $path,
		)
	);
	
	$info['service_sword'] = array(
		'type' => 'push',
//		'title' => 'SWORD', /*only services with titles are presented to the end user */
		'description' => 'SWORD destination',
		'handler' => array(
			'parent' => 'citation_distribute_service',
			'class' => 'citation_distribute_service_sword',
			'file' => 'citation_distribute_service_sword.inc',
			'path' => $path,
		)
	);
	
	$info['sword_dash'] = array(
		'type' => 'push',
		'title' => 'DASH',
		'description' => 'Digital Access to Scholarship at Harvard',
		'handler' => array(
			'parent' => 'service_sword',
			'class' => 'citation_distribute_service_sword_dash',
			'file' => 'citation_distribute_service_sword_dash.inc',
			'path' => $path,
		)
	);
	
	$info['googlescholar'] = array(
		'type' => 'metadata',
		'title' => 'Google Scholar',
		'description' => 'Google Scholar',
		'handler' => array(
			'parent' => 'citation_distribute_service',
			'class' => 'citation_distribute_service_googlescholar',
			'file' => 'citation_distribute_service_googlescholar.inc',
			'path' => $path,		
		)
	);
	
	return $info;
}



/**
 * Implementation of hook_form_alter()
 * Adds list of available destinations to biblio node creation form
 */
function citation_distribute_form_alter(&$form, $form_state, $form_id) {
	
	switch($form_id) {
	case 'biblio_node_form': 
		/*Add cite distribute options to biblio node creation page*/
		
		$form['citation_distribute_selections'] = array(
			'#type' => 'fieldset', 
			'#title' => t('** Distribute to Academic Repositories'),
			'#attached' => array(
				'js' => array(drupal_get_path('module', 'citation_distribute' ) . '/citation_distribute.js') 
			) 
		);
		
		$form['citation_distribute_selections']['intro'] = array(
		  '#type' => 'item', 
		  '#title' => t('Distribute this publication to the following academic repositories') 
		);
		
		ctools_include('plugins');
		$plugins = ctools_get_plugins('citation_distribute', 'plugins');
		
		foreach( $plugins as $plugin ) {
			//check if enabled?  no need to use citation_distribute_service class (except for proof of concept)
			//use correct title property, once plugins are implemented
			$published = db_result( db_query( "SELECT nid from {citation_distribute} WHERE type = '%s' AND nid = %d", 
																				$plugin['name'], $form['nid']['#value'] ));
			
			//$existing value comes from check disabled		
			if (isset($plugin['title'])) {
				$form['citation_distribute_selections'][$plugin['name']] = array(
					'#type'=>'checkbox',
					'#title' => t('@repos', array('@repos' => $plugin['title'])),
					'#default_value' => (bool)$published,	
					'#disabled' => (bool)$published, //published items can't be unpublished.  should we try to support unpublish where possible?
			  );
			}
		}
		
		$form['citation_distribute_selections']['nid'] = array(
		  '#type' => 'hidden',
		  '#value' => $form['nid']['#value'], 
		);
		
		//add the cite distribute submit function
		array_unshift ( $form ['#submit'], 'citation_distribute_form_submit' );
		break;
		
		
	case 'views_bulk_operations_form__1':
		/* Add plugins as options for bulk updates in cp/content */
		$repos = array();
		ctools_include('plugins');
		$plugins = ctools_get_plugins('citation_distribute', 'plugins');
		foreach( $plugins as $plugin ) {
			if (isset($plugins['title'])){
				$repos[] = $plugins['title'];
			}
		}
		
		/* remove citation_distribute options if we're not looking at biblio content */
		/*if ( !(arg(0)=='cp' && arg(1)=='content' && arg(2)=='biblio') && !empty($form['select']['operation']['#options']) ) {
		  foreach ($form['select']['operation']['#options'] as $key => $op) {
		    //if (in_array())
		    //why not foreach $repos instead?
		  }			
		}*/
		/* include 'Distribute to' in label for each service 
		if (arg(0) == 'cp' && arg(1) == 'content' && arg(2) == 'biblio') {
			if (is_array ($form['select']['operation']['#options'] )) {
				foreach ($form['select']['operation']['#options'] as $key => $operation ) {
					if (in_array ($operation, $repos))
						$form['select']['operation']['#options'][$key] = 'Distribute to ' . $operation;
				}
			}
		} else {
			//remove cite distribute bulk ops flags form the drop down list
			if (! empty( $form['select']['operation']['#options'] )) {
				foreach ( $form['select']['operation']['#options'] as $key => $operation ) {
					if (in_array( $operation, $repos ))
						unset ( $form['select']['operation']['#options'][$key] );
				}
			}
		}*/
		break;
	}
}

/**
 * Implementation of hook_nodeapi()
 * Applies flag to node if it's being published to a CD repository
 */
function citation_distribute_nodeapi(&$node, $op) {
	switch ($op) {
		case 'insert':
		case 'update':
			if ($node->type == 'biblio') {
				//$submodules = cite_distribute_installed_mods ();
				
				ctools_include('plugins');
				$plugins = ctools_get_plugins('citation_distribute', 'plugins');
		
				foreach( $plugins as $plugin ) {
				//foreach ( $submodules as $info ) {
					if (  isset($node->{$plugin['name']}) && $node->{$plugin['name']}==1  ) {
						$modules[] = $plugin['name']; // this array is only used for the returned message

						//set the flag
						$flag = flag_get_flag($plugin['name']);
						
						//set the flag for this node
						$flag->flag('flag', $node->nid);
					}
				}
				if ($output = theme('citation_distribute_form_msg', $modules)) {
					drupal_set_message(t($output)); //not necessarily!  Can we get output from flags?  
				}
			}
			break;
		case 'delete':
			//remove flags for deleted nodes
			break;
	}
}

/**
 * Implementation of hook flag
 * This gets called whenever a node recieves a flag.  If it gets a citation_distribute flag, process it.
 */
function citation_distribute_flag($event, $flag, $nid, $account) {
	
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	
	foreach ($plugins as $plugin) {
		if ($flag->name == $plugin['name'] && $event == 'flag') {
			//cite_distribute_widget_process ( $module ['name'], $content_id );
			_citation_distribute_update_db($plugin['name'], $nid);
			if (variable_get('citation_distribute_module_mode', '') == 'per_submission') {
				_citation_distribute_distribute($nid, $plugin['name']);
			}
		}
	}
}

/**
* Implementation of module_preprocess_hook().
* Allows metadata style plugins to add their data when the page is drawn.
*/
function citation_distribute_preprocess_page(&$variables) {
	/* only display on a node page */
	if (isset ($variables['node'])) {
	  ctools_include('plugins');
		$plugins = ctools_get_plugins('citation_distribute', 'plugins');
		
		/* check that each metadata plugin has been marked for this node.  add metadata for marked ones */
		foreach($plugins as $plugin) {
			if (isset($plugin['type']) && isset($plugin['name']) && $plugin['type'] == 'metadata') {
				if (db_result(db_query("SELECT nid FROM {citation_distribute} WHERE type = '%s' AND nid = %d",$plugin['name'], (int)$variables['node']->nid))) {

					if ($class = ctools_plugin_get_class($plugin, 'handler', TRUE)) {
						$service = new $class();
						$out = $service->render($service->map_metadata($variables['node']->nid));
  					$variables['head'] .= $out;				
					}

				} 
			}
		}
	}
}

/*
 * implementation of hook_theme
 * Allows citation_distribute to pass theming of metadata plugins to those plugins
 */
function citation_distribute_theme($existing, $type, $theme, $path) {
	$args_array = array('');

	/* theme the output message that happens after any plugin is used */
	$theme = array(
		'citation_distribute_form_msg' => array(
	 	  'arguments' => array('modules' => NULL),
			'file' => 'citation_distribute.theme.inc',
			'path' => drupal_get_path('module', 'citation_distribute'),
	  ),
	);
	
	/* metadata plugins also ahve the option to theme their output */
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	foreach($plugins as $plugin) {
		if ($plugin['type'] == 'metadata') {
			$theme[$plugin['name']] = array(
				'arguments' => $args_array,
				'file' => $plugin['handler']['class'] . '.theme.inc',
				'path' => $plugin['handler']['path'],
			);
		}
	}
	return $theme;
}
/**
 * Implementation of hook_theme()

function cite_distribute_theme() {
	$path_inc = drupal_get_path ( 'module', 'cite_distribute' );
	
	return array (
	'cite_distribute_form_msg' => array (
	  'arguments' => array ('modules' => NULL ), 
	  'file' => 'cite_distribute.theme.inc', 
	  'path' => $path_inc ) );
}
*/

/* Distributes citations */
function _citation_distribute_distribute($nid, $plugin_name) {
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	$plugin = $plugins[$plugin_name];
	
	if ($class = ctools_plugin_get_class($plugin, 'handler', TRUE)) {
		$service = new $class();
		$service->save($nid, $plugin_name);
	}
	
	
	

}

/* logs which nodes have been/need to be distributed */
function _citation_distribute_update_db($name, $nid) {
	global $user;
	$node = node_load ( $nid );
	$module_mode = variable_get ( 'citation_distribute_module_mode', '' );
	
	if ($module_mode == 'per_submission') {
		$upd = 0;
	} else {
		$upd = 1;
	}
	
	/* track whether node needs to be distributed at next cron pass */
	if (db_result ( db_query ( "SELECT nid FROM {citation_distribute} WHERE nid = %d AND type = '%s'", $node->nid, $name ))) {
		//update existing record
		db_query ( "UPDATE {citation_distribute} SET uid = %d, nid = %d, type= '%s', tid = %d , upd = %d , modified = now()
		  WHERE nid = %d and type = '%s'", 
		  $user->uid, $node->nid, $name, $node->biblio_type, $upd, $node->nid, $name ); 
	} else {
		//create new record	  // node already exists in Drupal but never been added to cite_distribute table
	  db_query ( "INSERT INTO {citation_distribute} (uid, nid, type, tid, upd, created) VALUES (%d, %d, '%s', %d, %d, now())",
	    $user->uid, $node->nid, $name, $node->biblio_type, $upd );
	}
	
}

/**
 * Implementation of hook flag_default_flags
 * creates flags for each installed submodule
 * @return unknown
 */

function citation_distribute_flag_default_flags($flags = array(), $i = 0) {
	
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	
	foreach ($plugins as $plugin) {
		$flags[] = array (
		  'content_type' => 'node', 
		  'name' => $plugin['name'], 
		  'title' => $plugin['title'], 
		  'global' => false, 
		  'types' => array ('biblio' ), 
			'flag_short' => $plugin['title'], 
			'flag_long' => $plugin['title'], 
			'flag_message' => '', 
			'unflag_short' => 'Remove from ' . $plugin['title'],
		  'unflag_long' => 'Remove from ' . $plugin['title'], 
		  'unflag_message' => '', 
		  'unflag_denied_text' => '', 
		  'link_type' => 'normal', //normal, toggle, confirm
			'roles' => array (
				'flag' => array (0 => '2' ),
			  'unflag' => array (0 => '2' ) 
			), //hiding these on page, teaser, and edit node
			'show_on_page' => false, 
			'show_on_teaser' => false, 
			'show_on_form' => false, 
			'access_author' => '', 
			'i18n' => 0, 
			'status' => true, 
			'locked' => array (
			  'name' => 'name', 
			  'show_on_page' => 'show_on_page', 
			  'show_on_teaser' => 'show_on_teaser', 
			  'show_on_form' => 'show_on_form', 
			  'global' => 'global', 
			  'link_type' => 'link_type', 
			  'types' => 'types' 
			), 
			'api_version' => 2, 
			'module' => 'citation_distribute' 
		);
	}
	return $flags;
}

function citation_distribute_test($a, $b) { 
	return true; 
}
/*
 * impelmentation of hook_node_operations
 * Adds citation_distribute services to dropdown in admin/content/type
 */
function citation_distribute_node_operations() {
	$operations = array();
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	
	foreach ($plugins as $plugin) {	
		if (isset($plugin['title'])) {
			$operations['citation_distribute_'.$plugin['name']] = array(
				'label' => 'Send to: '. $plugin['title'],
				'callback' => 'citation_distribute_test',
				'callback arguments' => array($plugin['name'], 'send'),
			);
			$operations['citation_distribute_un_' . $plugin['name']] = array(
				'label' => 'Revoke from ' . $plugin['title'],
				'callback' => 'citation_distribute_test',
				'callback arguments' => array($plugin['name'], 'un'),				 
			);
		}
	}

	return $operations;
}

/**
 * hook views_pre_build
 * marks node operations (above) for inclusion in bulk update operations
 */
function citation_distribute_views_pre_build(&$view){
	if ($view->name == 'vsite_content') {
		$ops = $view->display['default']->display_options['style_options']['selected_operations'];
		$style = $view->display['default']->display_options['style_options'];
		
		/* would it be quicker to rebuild all the names and loop over those? citation_distribute_node_operations() */
		foreach( preg_grep('/^citation_distribute_.*/', array_keys($ops)) as $operation) {
			$ops[$operation] = $operation;
		}
				
		$style['selected_operations'] = $ops;
		$view->display_handler->set_option('style_options', $style);
	}
}
