<?php 

include_once('citation_distribute.features.inc');

/**
 * Implementation of hook_ctools_plugin_api().
 */
function citation_distribute_ctools_plugin_api($module, $api) {
  if ($module == 'citation_distribute' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory
 */
function citation_distribute_ctools_plugin_directory($module, $plugin) {
  if ($module == 'citation_distribute' && !empty($plugin)) {
    return "plugins/$plugin";
   }
}

/**
 * implementation of hook_ctools_plugin_plugins()
 */
function citation_distribute_ctools_plugin_plugins() {
	return array(
		'use hooks' => TRUE,
	);
}
	
function citation_distribute_citation_distribute_plugins(){
	$info = array();	
	$path = drupal_get_path('module', 'citation_distribute') . '/plugins/';

	$info['citation_distribute_service'] = array(
		'handler' => array(
			'class' => 'citation_distribute_service',
			'file'  => 'citation_distribute_service.inc',
			'path'  => $path,
		)
	);
	
	$info['service_sword'] = array(
		'type' => 'push',
		'title' => 'SWORD',
		'description' => 'SWORD destination',
		'handler' => array(
			'parent' => 'citation_distribute_service',
			'class' => 'citation_distribute_service_sword',
			'file' => 'citation_distribute_service_sword.inc',
			'path' => $path,
		)
	);
	
	$info['sword_dash'] = array(
		'type' => 'push',
		'title' => 'DASH',
		'description' => 'Digital Access to Scholarship at Harvard',
		'handler' => array(
			'parent' => 'service_sword',
			'class' => 'citation_distribute_service_sword_dash',
			'file' => 'citation_distribute_service_sword_dash.inc',
			'path' => $path,
		)
	);
	
	$info['google'] = array(
		'type' => 'metadata',
		'title' => 'Google Scholar',
		'description' => 'Google Scholar',
		'handler' => array(
			'parent' => 'citation_distribute_service',
			'class' => 'citation_distribute_service_google',
			'file' => 'citation_distribute_service_google.inc',
			'path' => $path,		
		)
	);
	
	return $info;
}



/**
 * Implementation of hook_form_alter()
 * Adds list of available destinations to biblio node creation form
 */
function citation_distribute_form_alter(&$form, $form_state, $form_id) {
	
	//Add cite distribute options to biblio node creation page
	if ($form_id == 'biblio_node_form') {
		
		$form['citation_distribute_selections'] = array(
			'#type' => 'fieldset', 
			'#title' => t('** Distribute to Academic Repositories'),
			'#attached' => array(
				'js' => array(drupal_get_path('module', 'citation_distribute' ) . '/citation_distribute.js') 
			) 
		);
		
		$form['citation_distribute_selections']['intro'] = array(
		  '#type' => 'item', 
		  '#title' => t('Distribute this publication to the following academic repositories') 
		);
		
		ctools_include('plugins');
		$plugins = ctools_get_plugins('citation_distribute', 'plugins');
		
		foreach( $plugins as $plugin ) {
			//check if enabled?  no need to use citation_distribute_service class (except for proof of concept)
			//use correct title property, once plugins are implemented
			
			//could each plugin have a list command?  that would make multiple sword dests really easy
			
			if (isset($plugin['title'])) {
				$form['citation_distribute_selections'][$plugin['name']] = array(
					'#type'=>'checkbox',
					'#disabled' => $existing_value,
					'#title' => t('@repos', array('@repos' => $plugin['title'])),
					'#default' => $existing_value,			
			  );
			}
		}
		
		$form['citation_distribute_selections']['nid'] = array(
		  '#type' => 'hidden',
		  '#value' => $form['nid']['#value'], 
		);
		
		//add the cite distribute submit function
		array_unshift ( $form ['#submit'], 'citation_distribute_form_submit' );
	}
}

/**
 * Implementation of hook_nodeapi()
 * Applies flag to node if it's being published to a CD repository
 */
function citation_distribute_nodeapi(&$node, $op) {
	switch ($op) {
		case 'insert':
		case 'update':
			if ($node->type == 'biblio') {
				//$submodules = cite_distribute_installed_mods ();
				
				ctools_include('plugins');
				$plugins = ctools_get_plugins('citation_distribute', 'plugins');
		
				foreach( $plugins as $plugin ) {
				//foreach ( $submodules as $info ) {
					if (  isset($node->{$plugin['name']}) && $node->{$plugin['name']}==1  ) {
						$modules[] = $plugin['name']; // this array is only used for the returned message

						//set the flag
						$flag = flag_get_flag($plugin['name']);
						
						//set the flag for this node
						$flag->flag('flag', $node->nid);
					}
				}
				if ($output = theme('citation_distribute_form_msg', $modules)) {
					drupal_set_message(t($output)); //not necessarily!  Can we get output from flags?  
				}
			}
			break;
		case 'delete':
			//remove flags for deleted nodes
			break;
	}
}

/**
 * Implementation of hook flag
 * This gets called whenever a node recieves a flag.  If it gets a citation_distribute flag, process it.
 */
function citation_distribute_flag($event, $flag, $nid, $account) {
	
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	
	foreach ($plugins as $plugin) {
		if ($flag->name == $plugin['name'] && $event == 'flag') {
			//cite_distribute_widget_process ( $module ['name'], $content_id );
			_citation_distribute_update_db($plugin['name'], $nid);
			if (variable_get('citation_distribute_module_mode', '') == 'per_submission') {
				_citation_distribute_distribute($nid, $plugin['name']);
			}
		}
	}
}

/**
* Implementation of module_preprocess_hook().
* Allows metadata style plugins to add their data when the page is drawn.
*/
function citation_distribute_preprocess_page(&$variables) {
	/* only display on a node page */
	if (isset ($variables['node'])) {
	  ctools_include('plugins');
		$plugins = ctools_get_plugins('citation_distribute', 'plugins');
		
		/* check that each metadata plugin has been marked for this node.  add metadata for marked ones */
		foreach($plugins as $plugin) {
			if (isset($plugin['type']) && isset($plugin['name']) && $plugin['type'] == 'metadata') {
				if (db_result(db_query("SELECT nid FROM {citation_distribute} WHERE type = '%s' AND nid = %d",$plugin['name'], (int)$variables['node']->nid))) {
					//make class for this plugin				
					//call render on map_metadata.  this hsould theme it.  
					//how to insert it?  				
						//do metadata plugins get another method?  maybe I need another abstract class to assert that.
					if ($class = ctools_plugin_get_class($plugin, 'handler', TRUE)) {
						$service = new $class();
						$out = $service->render($service->map_metadata($variables['node']->nid));
					}
				} 
			}
		}
	}
}

/* Distributes citations */
function _citation_distribute_distribute($nid, $plugin_name) {
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	$plugin = $plugins[$plugin_name];
	
	if ($class = ctools_plugin_get_class($plugin, 'handler', TRUE)) {
		$service = new $class();
		$service->save($nid, $plugin_name);
	}
	
	
	

}

/* logs which nodes have been/need to be distributed */
function _citation_distribute_update_db($name, $nid) {
	global $user;
	$node = node_load ( $nid );
	$module_mode = variable_get ( 'citation_distribute_module_mode', '' );
	
	if ($module_mode == 'per_submission') {
		$upd = 0;
	} else {
		$upd = 1;
	}
	
	/* track whether node needs to be distributed at next cron pass */
	if (db_result ( db_query ( "SELECT nid FROM {citation_distribute} WHERE nid = %d AND type = '%s'", $node->nid, $name ))) {
		//update existing record
		db_query ( "UPDATE {citation_distribute} SET uid = %d, nid = %d, type= '%s', tid = %d , upd = %d , modified = now()
		  WHERE nid = %d and type = '%s'", 
		  $user->uid, $node->nid, $name, $node->biblio_type, $upd, $node->nid, $name ); 
	} else {
		//create new record	  // node already exists in Drupal but never been added to cite_distribute table
	  db_query ( "INSERT INTO {citation_distribute} (uid, nid, type, tid, upd, created) VALUES (%d, %d, '%s', %d, %d, now())",
	    $user->uid, $node->nid, $name, $node->biblio_type, $upd );
	}
	
}

/**
 * Implementation of hook flag_default_flags
 * creates flags for each installed submodule
 * @return unknown
 */
/*
 * flags have been moved to a feature.  can they still be dynamically generated?  it seems obnoxious to have to
 * export a feature each time a plugin is added.  the .features.inc file ought to be generated by looping over
 * ctools_get_plugins.  how would the .info file be updated though?
 * 
function citation_distribute_flag_default_flags($flags = array(), $i = 0) {
	
	ctools_include('plugins');
	$plugins = ctools_get_plugins('citation_distribute', 'plugins');
	
	foreach ($plugins as $plugin) {
		$flags[] = array (
		  'content_type' => 'node', 
		  'name' => $plugin['name'], 
		  'title' => $plugin['title'], 
		  'global' => false, 
		  'types' => array ('biblio' ), 
			'flag_short' => $plugin['title'], 
			'flag_long' => $plugin['title'], 
			'flag_message' => '', 
			'unflag_short' => 'Remove from ' . $plugin['title'],
		  'unflag_long' => 'Remove from ' . $plugin['title'], 
		  'unflag_message' => '', 
		  'unflag_denied_text' => '', 
		  'link_type' => 'normal', //normal, toggle, confirm
			'roles' => array (
				'flag' => array (0 => '2' ),
			  'unflag' => array (0 => '2' ) 
			), //hiding these on page, teaser, and edit node
			'show_on_page' => false, 
			'show_on_teaser' => false, 
			'show_on_form' => false, 
			'access_author' => '', 
			'i18n' => 0, 
			'status' => true, 
			'locked' => array (
			  'name' => 'name', 
			  'show_on_page' => 'show_on_page', 
			  'show_on_teaser' => 'show_on_teaser', 
			  'show_on_form' => 'show_on_form', 
			  'global' => 'global', 
			  'link_type' => 'link_type', 
			  'types' => 'types' 
			), 
			'api_version' => 2, 
			'module' => 'citation_distribute' 
		);
	}
	return $flags;
}
*/