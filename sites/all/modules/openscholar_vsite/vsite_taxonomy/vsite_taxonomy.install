<?php
//$Id

function vsite_taxonomy_update_6000(){
  $res = array();
  // Weight scholar to be after og_vocab
  $weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'og_vocab'"));
  db_query("UPDATE {system} SET weight = %d WHERE name = 'vsite_taxonomy'", ($weight + 1));
  return $res;
}

function vsite_taxonomy_update_6001(){
  $res = array();
  // Enable dialog module if need
  if(!module_exists('dialog')){
    
    include_once('includes/install.inc');
    module_rebuild_cache();
    drupal_install_modules(array('dialog'));
    $ret[] = array(
      'success' => true,
      'query' => 'Installed dialog module and enabled it',
    );
    
  }
  
  return $res;
}

function vsite_taxonomy_update_6002(){
	$ret = array('#finished' => 0);
	
	if(!isset($_SESSION['vsite_taxonomy_update_6002'])){
		$_SESSION['vsite_taxonomy_update_6002'] = 0;
		$_SESSION['vsite_taxonomy_update_6002_max'] = db_result(db_query("SELECT MAX(t.tid) as space_path FROM {term_data} t INNER JOIN {og_vocab} ov ON ov.vid = t.vid INNER JOIN {purl} p ON p.provider = 'spaces_og' AND ov.nid = p.id"));
	}
	
	$last_tid = $_SESSION['vsite_taxonomy_update_6002'];
	$batch = 1000;
	
	module_load_include('inc', 'pathauto');
	
	$vars = strongarm_vars_load();
	//Since strongarm has not set the value for updates set it here
	global $conf;
	$conf['pathauto_vsite_taxonomy_pattern'] = $vars['pathauto_vsite_taxonomy_pattern']->value;
  
	$result = db_query("SELECT t.*, p.value as space_path FROM {term_data} t INNER JOIN {og_vocab} ov ON ov.vid = t.vid INNER JOIN {purl} p ON p.provider = 'spaces_og' AND ov.nid = p.id WHERE t.tid > %d ORDER BY t.tid ASC ",$last_tid);
	while ($batch-- && $term = db_fetch_object($result)){
		$_SESSION['vsite_taxonomy_update_6002'] = $term->tid;
	  if ($term->name) {
	  	$a_aliased_features = array();
	  	$vocab = taxonomy_vocabulary_load($term->vid);
	    $node_map = features_get_component_map('node');
	    foreach ($vocab->nodes as $s_node) {
	      if(!array_key_exists($s_node,$node_map) || in_array(current($node_map[$s_node]),$a_aliased_features)) continue;
	      $s_feature =  current($node_map[$s_node]);
	      
	      $s_feature_path = _vsite_taxonomy_get_update_featurepath($s_feature);
                
        if(!strlen($s_feature_path)) continue;
        $a_placeholders = array('tokens' => array(), 'values' => array());
        $a_placeholders['tokens'][] = '[feature-path]';
        $a_placeholders['values']['[feature-path]'] = $s_feature_path;
        $a_placeholders['tokens'][] = '[space-og-path]';
        $a_placeholders['values']['[space-og-path]'] = $term->space_path;
        $a_placeholders['tokens'][] = '[catpath-raw]';
        $a_placeholders['values']['[catpath-raw]'] = $term->name;
        $source = _vsite_taxonomy_get_term_path($term->tid,$s_feature);
        
        pathauto_create_alias('vsite_taxonomy', 'update', $a_placeholders, $source, $term->tid, $term->vid);
	    }
	  }
	}
	
	if($_SESSION['vsite_taxonomy_update_6002'] < $_SESSION['vsite_taxonomy_update_6002_max']) return array('#finished' => $_SESSION['vsite_taxonomy_update_6002'] / $_SESSION['vsite_taxonomy_update_6002_max']);
		
  return  array(array(
    'success' => true,
    'query' => 'updated taxonomy path aliases'. $term->tid,
  ),'#finished' => 1);
}

function _vsite_taxonomy_get_update_featurepath($s_feature){
	static $a_features;
	if(!is_array($a_features)) $a_features = array();
	
	if(!isset($a_features[$s_feature])){
	  //Use the default feature menu to get the default path
    foreach (features_get_component_map('menu_links') as $s_menu_key => $a_features) {
      if(!in_array( $s_feature, $a_features)) continue;
      list($s_menu,$s_feature_path) = explode(":",$s_menu_key,2);
    }
    
    if(!isset($s_feature_path)){
      $a_view_info = vsite_feature_default_view($s_feature);
      $o_view = views_get_view($a_view_info['view']);
      if($o_view){
	      $s_feature_path = $o_view->get_url();
	      if($n_pos = strpos($s_feature_path,"/")) $s_feature_path = substr($s_feature_path,0,$n_pos);
      }
    }
    
    $a_features[$s_feature] = $s_feature_path?$s_feature_path:false;
	}
	
	return $a_features[$s_feature];
}