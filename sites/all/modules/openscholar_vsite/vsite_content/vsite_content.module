<?php

include_once('vsite_content.features.inc');

/**
 * hook menu
 */
function vsite_content_menu() {
  $items = array();

  //files
  $items['cp/content/files'] = array(
    'title' => 'Files',
    'page callback' => 'vsite_content_files',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'cp',
    'access callback' => 'cp_access_cp',
    'weight' => 30,
  );
  
  //Add local task for cp content
  $items['cp/content/all'] = array(
    'title' => 'Content',
    'page callback' => 'views_page',
    'page arguments' => array('vsite_content','page_1'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'cp',
    'access callback' => 'cp_access_cp',
    'weight' => 10,
  );
  
  return $items;
}

/**
 * Implementation of hook_menu_alter
 */
function vsite_content_menu_alter(&$items){
  //Remove the edit local task, this will be handled by the context links.
  $items['node/%node/edit']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_elements().
 */
function vsite_content_elements() {
	//Add process function to filefield elements
  $elements['filefield_widget']['#process'] = array('vsite_content_filefield_process');
  return $elements;
}

/**
 * Add extra processing to filefield upload, to handle ff_paths and aliases
 *
 * This improves the functionality for the user but if the path depends on node dependent variables then there could be problems
 */
function vsite_content_filefield_process($element, $edit, &$form_state, $form){
  if(!$element['#value']['fid']) return $element;
	
	$node = clone($form['#node']);
	$orig_path = $element['#value']['filepath'];
	//Add this field to the node so we can get the settings
	list($parent,$delta) = $element['#parents'];
	if($parent){
		$el_file = $element['#value'];
		
		//Flag for processing, normally done in node preprocess
		if($el_file['status'] == 0) $el_file['data']['process'] = true;
		$node->$parent = array($delta => $el_file);
		
		filefield_paths_node_update($node);
   
    $element['#value'] = $node->{$parent}[$delta];
    //Not needed
    unset($element['#value']['view']);
    
    //Adjust the preview
    if(isset($element['preview']['#value']) && $element['#value']['filepath'] != $orig_path){
      $element['preview']['#value'] = str_replace($orig_path,$element['#value']['filepath'],$element['preview']['#value']);
    }
	}
	
  return $element;
}




/**
 * callback function for cp/content/files
 */
function vsite_content_files() {

  $vsite = vsite_get_vsite();
  $view_name = 'vsite_files';
  $display = 'default';

  return views_page($view_name, $display);
}

/**
 * Hook form_alter
 * Change the title of the vbo select element
 */


function vsite_content_form_views_bulk_operations_form__1_alter(&$form, $form_state, $form_id = 'views_bulk_operations_form__1') {
  //Add collapsible JS
  global $base_url;
  
  $url = ltrim(  url($_GET['q']),'/'  );
  $url = str_replace( $base_url.'/', '', $url);
  
  drupal_add_js('misc/collapse.js');
  drupal_add_js(array( 'vsite_content' => array('url' => $url) ), 'setting');
  drupal_add_js(drupal_get_path('module', 'vsite_content') . '/vsite_content.js');
  if ($form['#id'] == 'views-bulk-operations-form--1') {
   $form['select']['#title'] = 'Update options';
  }
}



/**
 * hook form_alter
 * Alter the views exposed form:
 */
function vsite_content_form_views_exposed_form_alter(&$form, $form_state, $form_id = 'views_exposed_form') {

  if ($form['#id'] == 'views-exposed-form-vsite-content-page-1') {

  	drupal_add_js(drupal_get_path('module', 'vsite_content') . '/vsite_content.js');
    //Add collapsible JS
    drupal_add_js('misc/collapse.js');
  

    // the "type" dropdown contains all content types
    // it needs only content type from features enabled in this vsite
  	vsite_include('vsiteapi');
  	$all_options = $form['type']['#options'];
  	$vsite_option = vsite_content_types($privacy = array(1,2));
  	$form['type']['#options'] = array_intersect($all_options, $vsite_option);
  	$form['type']['#options']['All'] = '<Any>';
    
    //@todo this is not used anymore. check
    $type = arg(2);
    //set action to current url
    $form['#action'] = request_uri();

    $options = array(
      'All' => check_plain('<Any>'),
      1 => 'Yes',
      0 => 'No'
    );
    
    //promoted to front page filter
    $form['promote']['#type'] = 'radios';
    $form['promote']['#options'] = $options;

    //published status filter
    $form['status']['#type'] = 'radios';
    $form['status']['#options'] = $options;

    //sticky on top of lists filter
    $form['sticky']['#type'] = 'radios';
    $form['sticky']['#options'] = $options;

    // ugly reset button
    $vsite = vsite_get_vsite();
    if (!$vsite) {
      return;
    }
    $active_menu = menu_get_item();
    $path = url($active_menu['path']);

    $form['reset'] = array(
      '#type' => 'markup',
      '#value' => '<input class="form-button" type="reset" value="Reset" onClick="javascript:window.location=\''. $path .'\';" />',
    );
  }
}


/**
 * Edit the content view form to put it into fieldsets
 */
function vsite_content_form_alter(&$form, $form_state, $form_id) {

  switch ($form_id) {
    case 'views_exposed_form':
      if ($form['#id'] == "views-exposed-form-vsite-content-page-1") {
        $vals = $form_state['input'];
        //is the filter set? if so don't collapse it
        $s_state = (!is_array($vals) || !(strlen($vals['title'] || $vals['promote'] != 'All' || $vals['sticky'] != 'All' || $vals['status'] != 'All' || count($vals['tid']))))?'collapsed':'';
      $form['#prefix'] = '<fieldset class="vsite_content_filter_box collapsible"><legend>Filter options</legend>';
        $form['#suffix'] = '</fieldset>';
      }
    break;
    case 'views_bulk_operations_form__1':
      if (arg(0) == 'cp' && arg(1) == 'content') {
        if (is_array($form['select']['#attributes'] )) {
          $form['select']['#attributes'] += array('class' => 'vsite_content_bulk_update collapsible collapsed');
        }
        else $form['select']['#attributes'] = array('class' => 'vsite_content_bulk_update collapsible collapsed');
      }
    break;
    default:
  }
}



/**
 * Implements hook_filefield_paths_process_file().
 */
function vsite_content_filefield_paths_process_file($new, $file, $settings, $node, $update) {
  if ($new) {
    $orig_alias = filefield_paths_process_string($settings['filealias']['value'], 'node', $node, $settings['filealias']);
    $orig_alias = filefield_paths_process_string($orig_alias, 'field', array(0 => $file['field']), $settings['filealias']);

    $path = 'filefield_paths/alias/' . $file['field']['fid'];
    $alias = drupal_get_path_alias($path);

    // Path has a different alias
    if ($alias != $orig_alias) {
      $old_file_path = drupal_lookup_path('source', $orig_alias);
      if(strpos($old_file_path,'filefield_paths/alias/') === 0){
        $n_old_fid = intval(substr($old_file_path,22));
        $n_old_pid = db_result(db_query("SELECT pid FROM {url_alias} WHERE dst = '%s' LIMIT 1", $orig_alias));

        if(!field_file_load($n_old_fid)){
          //The file alias is orphaned and we should delete it
          path_set_alias(NULL,$alias); //Delete unused alias
          path_set_alias($path,$orig_alias,$n_old_pid); //Reassign old alias

        }else{
	        //If the file exists and is part of the same node then rename the alias
	        $field_info = content_types($node->type);
	        if($file['module'] == 'upload'){
	          //Upload Node
	          $n_nid = db_result(@db_query("SELECT nid FROM {upload} WHERE fid = %d ",$n_old_fid));
	        }elseif($file['field']['field']['field_name']){
	          //CCK Node
	          $n_nid = db_result(@db_query("SELECT nid FROM {".current($field_info['tables'])."} WHERE ".$file['field']['field']['field_name']."_fid = %d ",$n_old_fid));
	        }

	        if($n_nid == $node->nid){
	          //Switch the two paths
	          $n_new_pid = db_result(db_query("SELECT pid FROM {url_alias} WHERE dst = '%s' LIMIT 1", $alias));
	          path_set_alias($path,$orig_alias,$n_old_pid); //Reassign old alias
	          path_set_alias($old_file_path,$alias,$n_new_pid); //Reassign new alias
	        }
        }
      }
    }
  }
}
