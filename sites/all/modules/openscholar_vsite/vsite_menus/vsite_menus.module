<?php


function vsite_menus_init() {
   drupal_add_css(drupal_get_path('module', 'vsite_menus') . '/theme/vsite_menus.css');
}

/**
 * Implementation of hook_vsite_settings().
 */
function vsite_menus_vsite_settings() {
  return array(
    'menus' => array(
      'class' => 'vsite_menus_menus',
      'file' => drupal_get_path('module', 'vsite_menus') . '/includes/vsite_menus.menus.inc'
    )
  );
}

/**
 * Implementation of hook_spaces_customizers().
 */
function vsite_menus_spaces_customizers_alter(&$customizers) {
  if (array_key_exists('menu', $customizers)) {
    $customizers['menu']['class'] = 'vsite_menus_customizer_menu';
    $customizers['menu']['file'] = drupal_get_path('module', 'vsite_menus') . '/includes/vsite_menus.customizer.inc';
  }
  
  return $customizers;
}


/**
 * Implements hook_menu_node_insert().
 */
function vsite_menus_menu_node_insert($item, $node) {
  require_once(drupal_get_path('module', 'vsite_menus') . '/includes/vsite_menus.menus.inc');
  vsite_include('vsiteapi');
  $site = vsite_get_vsite();
  $a_menus_settings = $site->controllers->variable->get('vsite_setting_menus');
  
  if (!is_array($a_menus_settings) || !is_array($a_menus_settings['menu_items'])) {
    return;
  }//If there are no spaces settings saved for menu then we don't have anything to do
  
  $a_scholar_types = vsite_content_types();
  
  if ($site && array_key_exists($node->type, $a_scholar_types) && ($item->menu_name == variable_get('scholar_primary_menu', FALSE) || $item->menu_name == variable_get('scholar_secondary_menu', FALSE))) {
    
    $s_menu_key = $item->menu_name == variable_get('scholar_primary_menu', FALSE)?'primary':'secondary';
    
    $a_menus_settings['menu_items'][$item->mlid] = array('menu' => $s_menu_key, 'weight' => $item->weight);
    
    $site->controllers->variable->set('vsite_setting_menus',vsite_menus_menus::create_menus($a_menus_settings));
  }
  elseif ($site && array_key_exists($item->mlid, $a_menus_settings['menu_items'])) {
    unset($a_menus_settings['menu_items'][$item->mlid]);
    $site->controllers->variable->set('vsite_setting_menus',vsite_menus_menus::create_menus($a_menus_settings));
  }//Add or remove t from the spaces menu
}

/**
 * Implements hook_menu_node_update().
 */
function vsite_menus_menu_node_update($item, $node) {
  vsite_menus_menu_node_insert($item, $node);
}

/**
 * Implements hook_menu_node_delete().
 */
function vsite_menus_menu_node_delete($item, $node) {
  require_once(drupal_get_path('module', 'vsite_menus') .'/includes/vsite_menus.menus.inc');
  vsite_include('vsiteapi');
  $site = vsite_get_vsite();
  $a_scholar_types = vsite_content_types();
  
  
  if ($site && is_array($a_scholar_types) && array_key_exists($node->type, $a_scholar_types) && ($a_menus_settings = $site->controllers->variable->get('vsite_setting_menus')) && array_key_exists($item->mlid, $a_menus_settings['menu_items'])) {
    $site->controllers->variable->get('vsite_setting_menus',vsite_menus_menus::create_menus($a_menus_settings));
  }
}


/**
 * Implementation of hook_theme().
 */
function vsite_menus_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'vsite_menus') ;
  
  $items['vsite_menus_radios'] = array(
    'arguments' => array('element' => NULL, 'disabled' => array()),
    'path' => $path,
    'file' => 'menu_theme.inc',
  );
  
  return $items;
}

/**
 * Change the options for the node save form so that only the active vsite menus are displayed
 *
 * @param $form array
 * @param $form_state array
 * @param $form_id string
 */
function vsite_menus_form_alter(&$form, $form_state, $form_id) {
	//Are we on a node form?
  if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id) {
    
  	require_once(drupal_get_path('module', 'vsite_menus') .'/includes/vsite_menus.menus.inc');
    vsite_include('vsiteapi');
    $a_scholar_types = vsite_content_types(array(0, 1, 2));
    $o_scholar = vsite_get_vsite();
    
    if ($o_scholar && is_array($form['menu'])) {
      //Add the site to the attributes for the menu
      if (!is_array($form['menu']['options']['#value'])) $form['menu']['options']['#value'] = array();
      if (!array_key_exists('attributes', $form['menu']['options']['#value'])) $form['menu']['options']['#value']['attributes'] = array();
      
      $form['menu']['options']['#value']['attributes']['site'] = $o_scholar->group->nid;
    }//If we are in a vsite and a menu entry can be made for this node type, add the group id to the menu entry
    
    if ($o_scholar && array_key_exists($form['type']['#value'], $a_scholar_types)) {
      
    	//Add some descriptive text to help people understand what this fieldset is for
      $form['menu']['#description'] = "Add a link to this post in one of your site's menus.  First add a link title, and then specify the menu.";
      $form['menu']['link_title']['#description'] = "The exact wording of how you would like the link to appear in your menu. Leave blank if you do not wish to add this post to any menu.";

    	$a_primary = menu_load(variable_get('scholar_primary_menu', FALSE));
      $a_secondary = menu_load(variable_get('scholar_secondary_menu', FALSE));
      
      $disabled_choices = vsite_menus_menus::get_disabled_menus();  //Get disabled menus
      $a_choices = array();
      $a_choices[variable_get('scholar_primary_menu', FALSE) . ":0"] = t($a_primary['title'].(in_array('primary', $disabled_choices)?" (Disabled)":""));
      $a_choices[variable_get('scholar_secondary_menu', FALSE) . ":0"] = t($a_secondary['title'].(in_array('secondary', $disabled_choices)?" (Disabled)":""));
      
      $form['menu']['#access'] = ($o_scholar->access_admin() || user_access('administer menu'));
      $form['menu']['link_title']['#title'] = "Link Title";
      $form['menu']['parent']['#type'] = "radios";
      $form['menu']['parent']['#title'] = "Choose a Menu";
      $form['menu']['parent']['#options'] = $a_choices;
      $form['menu']['parent']['#default_value'] = !in_array('primary', $disabled_choices)? variable_get('scholar_primary_menu', FALSE).":0": variable_get('scholar_secondary_menu', FALSE).":0";
      $form['menu']['parent']['#description'] = "Select the menu where you would like this link to appear. Menu's will show as 'disabled' if they are not included in your ".l("Page Layout",'cp/appearance/layout',array('attributes' => array('target' => '_blank'))).".";
      unset($form['menu']['hidden']);

      $a_menus_settings = $o_scholar->controllers->variable->get('vsite_setting_menus');
      if (is_array($a_menus_settings['menu_items']) && array_key_exists($form['menu']['mlid']['#value'], $a_menus_settings['menu_items'])) {
		    $form['menu']['weight']['#value'] = $a_menus_settings['menu_items'][$form['menu']['mlid']['#value']]['weight'];
		  }//Use the weight from the settings if there is one
		  
      $form['menu']['weight']['#type'] = 'value'; //Make the weight hidden
      
      //Alter the path settings to include the purl
      if (module_exists('path')) {
        $form['path']['#access'] = ($o_scholar->access_admin() || user_access('administer menu'));
        
        if (module_exists('pathauto')) {
          //BELOW HERE -- Create PathAuto Form Modifications
          $node = $form['#node'];
      
          // See if there is a pathauto pattern or default applicable
          if (isset($form['language'])) {
            $language = isset($form['language']['#value']) ? $form['language']['#value'] : $form['language']['#default_value'];
            $pattern = trim(variable_get('pathauto_node_'. $form['type']['#value'] .'_'. $language .'_pattern', ''));
          }
          if (empty($pattern)) {
            $pattern = trim(variable_get('pathauto_node_'. $form['type']['#value'] .'_pattern', ''));
            if (empty($pattern)) {
              $pattern = trim(variable_get('pathauto_node_pattern', ''));
            }
          }
          // If there is a pattern AND the user is allowed to create aliases AND the path textbox is present on this form
          if (!empty($pattern) &&isset($form['path']['path']) && ($o_scholar->access_admin() || user_access('administer menu'))) {
          
            $output = t('An alias will be generated for you. If you wish to create your own, untick this option.');
      
            drupal_add_js(drupal_get_path('module', 'pathauto') .'/pathauto.js');
            $form['path']['#collapsed'] = FALSE;
      
            $form['path']['pathauto_perform_alias'] = array(
              '#type' => 'checkbox',
              '#title' => t('Automatic alias'),
              '#default_value' => isset($node->pathauto_perform_alias) ? $node->pathauto_perform_alias : TRUE,
              '#description' => $output,
              '#weight' => -1,
            );
      
            if (!empty($node->pathauto_perform_alias) && !empty($node->old_alias) && $node->path == '') {
              $form['path']['path']['#default_value'] = $node->old_alias;
              $node->path = $node->old_alias;
            }
      
            //For Pathauto to remember the old alias and prevent the Path-module from deleteing it when Pathauto wants to preserve it
            if (isset($node->path)) {
              $form['path']['old_alias'] = array('#type' => 'value', '#value' => $node->path);
            }
            
            if ($o_scholar && strpos($form['path']['path']['#default_value'], $o_scholar->purl . '/') === 0) {
              $form['path']['path']['#default_value'] = substr($form['path']['path']['#default_value'], strlen($o_scholar->purl . '/'));
            }
          }
        }
      }
    }//If this is a active scholar type?
  }
}


/**
 * Implementation of hook_nodeapi().
 */
function vsite_menus_nodeapi(&$node, $op, $teaser, $page) {
  if (module_exists('path')) {
    switch ($op) {
      case 'presave':
        if (module_exists('path') && module_exists('pathauto')) {
          // About to be saved (before insert/update)
          // Only add to an alias if the checkbox was not provided or if the checkbox was provided and is unchecked
          if (!isset($node->pathauto_perform_alias) || !$node->pathauto_perform_alias) {
            $vsite = vsite_get_vsite();
            if(!$vsite && is_array($node->og_groups)){
              foreach ($node->og_groups as $n_gid){
                if(($vsite = vsite_get_vsite($n_gid))) break;
              }
            }//Try and load the vsite from the node object if we are not in the space
            
            if (strlen($node->path) && strpos($node->path, $vsite->purl . "/") !== 0 && $vsite && $node->nid != $vsite->group->nid && strlen($vsite->purl)) {
              $node->path = $vsite->purl . "/" . $node->path;
            }//Did they provide a path?  is the site purl already prepended?
          }
        }//Is Pathauto Enabled?
         
        break;
      default:
        break;
    }
  }
}

/**
 * Iplementation of hook block
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 */
function vsite_menus_block($op = 'list', $delta = 0, $edit = array()) {
  if (!user_access('access content')) return;
  
  $blocks = array();
  if ($op == 'list') {
    $blocks[0] = array('info' => t('Primary menu'), 'cache' => BLOCK_CACHE_PER_PAGE);
    $blocks[1] = array('info' => t('Secondary menu'), 'cache' => BLOCK_CACHE_PER_PAGE);
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        $block['subject'] = t(''); // intentionally left empty for now.
        $block['content'] = vsite_menus_get_menu_tree(variable_get('scholar_primary_menu', FALSE), TRUE, FALSE, TRUE);
        return $block ;
      case 1:
        $block['subject'] = t(''); // intentionally left empty for now.
        $block['content'] = vsite_menus_get_menu_tree(variable_get('scholar_secondary_menu', FALSE), TRUE, FALSE, TRUE);
        return $block;
    }
  }
}

/**
 * Implementation of hook_vsite_widgets
 * @return array
 */
function vsite_menus_vsite_widgets() {
  
  return array(
    'vsite_menus_0' => array(
      'module' => 'vsite_menus',
      'delta' => '0',
      'weight' => 20,
      'region' => 'navbar',
      'status' => '0',
      'label' => 'Primary menu',
      'type' => 'context_ui',
    ),
    'vsite_menus_1' => array(
      'module' => 'vsite_menus',
      'delta' => '1',
      'weight' => 20,
      'region' => 'left',
      'status' => '0',
      'label' => 'Secondary menu',
      'type' => 'context_ui',
    ),
  );
}

/**
 * Deletes a custom menu link created in the context of a vsite
 *
 *  @param $n_mlid (number) existing link id
 *  @param $sid (number)  optional - pass the site id allows for altering /adding menu links programatically to a site
 *
 * @return (number) the mlid of the created menu item or false on failure
 */
function vsite_menu_delete_vsite_menu_link($n_mlid, $sid = NULL) {
  $vsite = vsite_get_vsite();
  if (!$sid) {
    $sid = $vsite->group->nid;
  }
  elseif ($vsite->group->nid != $sid) {
    $vsite = spaces_load('og', $sid, TRUE);
  }
  
  menu_link_delete($n_mlid);
  $a_menus_settings = $o_scholar->controllers->variable->get('vsite_setting_menus');
  if (is_array($a_menus_settings)) {
    if (($n_p_index = array_search($n_mlid, $a_menus_settings['primary']))){
      unset($a_menus_settings['primary'][$n_p_index]);
    }
    if (($n_s_index = array_search($n_mlid, $a_menus_settings['secondary']))){
      unset($a_menus_settings['secondary'][$n_s_index]);
    }
  }
  
  if ($n_s_index || $n_p_index){
    $o_scholar->controllers->variable->set('vsite_setting_menus',$a_menus_settings);
  }
  
  return $n_mlid;
}

/**
 * Creates a custom menu link created in the context of a vsite
 *
 * @param $s_path (string) link path
 * @param $s_title (string) link title
 * @param $b_primary_menu (boolean) true for promary menu, false for secondary
 * @param $n_weight (number) menu weight
 * @param $n_plid (number) for menu trees, if you want this menu item to be the child of an existing item (use with caution)
 * @param $sid (number)  optional - pass the site id allows for altering /adding menu links programatically to a site
 *
 * @return (number) the mlid of the created menu item or false on failure
 */
function vsite_menu_create_vsite_menu_link($s_path, $s_title, $b_primary_menu = TRUE, $n_weight = 0, $n_plid = 0, $sid = NULL) {
  //Create the menu item
  return vsite_menu_update_vsite_menu_link(FALSE, $s_path, $s_title, $b_primary_menu, $n_weight, $n_plid, $sid);
}


/**
 * Updates an custom menu link created in the context of a vsite
 *
 * @param $n_mlid (number) existing link id
 * @param $s_path (string) link path
 * @param $s_title (string) link title
 * @param $b_primary_menu (boolean) true for promary menu, false for secondary
 * @param $n_weight (number) menu weight
 * @param $n_plid (number) for menu trees, if you want this menu item to be the child of an existing item (use with caution)
 * @param $sid (number)  optional - pass the site id allows for altering /adding menu links programatically to a site
 *
 * @return (number) the mlid of the affected menu or false on failure
 */
function vsite_menu_update_vsite_menu_link($n_mlid, $s_path, $s_title, $b_primary_menu = TRUE, $n_weight = 0, $n_plid = 0, $sid = NULL) {
  $vsite = vsite_get_vsite();
  if (!$sid) {
    $sid = $vsite->group->nid;
  }
  elseif ($vsite->group->nid != $sid) {
    $vsite = spaces_load('og', $sid, TRUE);
  }
  
  if (!$sid || !strlen($s_path) || !strlen($s_title)) return FALSE;

  $s_menu = $b_primary_menu? variable_get('scholar_primary_menu', FALSE):variable_get('scholar_secondary_menu', FALSE);
  
   $a_settings = array(
   'delete' => 0,
   'module' => 'menu',
   'has_children' => 0,
   'customized' => 0,
   'options' => array(
     'attributes' => array(
       'site' => $sid,
       'title' => $s_title,
     ),
   ),
   'expanded' => 0,
   'link_title' => $s_title,
   'parent' => $s_menu . ':' . $n_plid,  //(Menu Key and Parent link ID 0 for no parent    ie. scholar_secondary_menu:0 for secondary menu at root level)
   'weight' => $n_weight,  //(Link Weight)
   'plid' => $n_plid,  //(Parent Link ID again or 0 for root)
   'menu_name' => $s_menu,
   'link_path' => $s_path,
  );
  
  if (intval($n_mlid)) $a_settings['mlid'] = $n_mlid;
    
  $n_mlid = menu_link_save($a_settings);
  
  //Change Vsite Settings
  $b_settings_changed = FALSE;
  $a_menus_settings = $o_scholar->controllers->variable->get('vsite_setting_menus');
  $a_settings_menu = is_array($a_menus_settings)?$a_menus_settings[($b_primary_menu?'primary':'secondary')]:FALSE;
  if ($a_settings_menu && !in_array($n_mlid, $a_settings_menu)) {
    $a_settings_menu[] = intval($n_mlid);
    $b_settings_changed = TRUE;
    $a_menus_settings[($b_primary_menu?'primary':'secondary')] = $a_settings_menu;
  }//If thier are custom user settings add this menu to them
  
  $a_inactive_menu = is_array($a_menus_settings)?$a_menus_settings[($b_primary_menu?'secondary':'primary')]:FALSE;
  if ($a_inactive_menu && in_array($n_mlid, $a_inactive_menu)) {
    unset($a_inactive_menu[array_search($n_mlid, $a_inactive_menu)]);
    $b_settings_changed = TRUE;
    $a_menus_settings[($b_primary_menu?'secondary':'primary')] = $a_inactive_menu;
  }//Remove the custom link from the menus that it was in
  
  if ($b_settings_changed) spaces_save($vsite);
  
  return $n_mlid;
}





///////// NEW ///////////


/**
 * Implementation of hook_spaces_registry().
 */
function vsite_menus_spaces_registry() {
  return array(
    'controllers' => array(
      'vsite_menu' => array(
        'title' => t('Vsite Menu'),
        'plugin' => 'spaces_controller_vsite_menu',
      ),
    ),
  );
}

/**
 * Implementation of hook_spaces_plugins().
 */
function vsite_menus_spaces_plugins() {
  $plugins = array();
 
  //define the vsite controller for vsite_menu
  $plugins['spaces_controller_vsite_menu'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'vsite_menus') .'/plugins',
      'file' => 'spaces_controller_vsite_menu.inc',
      'class' => 'spaces_controller_vsite_menu',
      'parent' => 'spaces_controller',
    ),
  );
  return $plugins;
}

/**
 * Return the menu tree object for a scholar site, adapted for the current page
 *
 * @param string $s_menu
 */
function vsite_menus_get_menu_tree($s_menu){
  $space = vsite_get_vsite();
  if(!$space) return menu_tree($s_menu);
  
  static $menu_output = array();

  if (!isset($menu_output[$s_menu])) {
  	//Get Menu for this site
    $menu_links = $space->controllers->vsite_menu->get($s_menu);
    
    //Tmp MLID used for array keys when using menu's node access functions
    $n_tmp_mlid = 1;
    
    //Apply tmp mlid and menu_router information to links
    foreach ($menu_links as $key => $ml){
    	$router_info = db_fetch_array(db_query("SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description
    	    FROM {menu_router} m WHERE m.path = '%s' ", $ml['router_path']));
    	
    	$menu_links[$key] = array('link' => array_merge($router_info,$ml,array('mlid' => $n_tmp_mlid++)), 'below' => false);
    }
    //Gather Node access info
    $node_links = array();
    menu_tree_collect_node_links($menu_links,$node_links);
    
    //Check Node and menu access
    menu_tree_check_access($menu_links, $node_links);
    
    //Render the Menu
    $menu_output[$s_menu] = menu_tree_output($menu_links);
  }
  return $menu_output[$s_menu];
  
}