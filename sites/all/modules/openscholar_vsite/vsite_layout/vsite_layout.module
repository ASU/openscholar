<?php
module_load_include('inc', 'vsite_layout', 'vsite_layout.overrides');

/**
 * Implementation of hook_ctools_plugin_api().
 */
function vsite_layout_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "context" && $api == "context") {
    return array("version" => 3);
  }
}

function vsite_layout_menu() {
  $items = array();

  $items['cp/viste_layout/%ctools_js/%/%/remove'] = array(
    'title' => 'Remove this Widget',
    'page callback' => 'vsite_layout_remove_widget',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'cp_access_cp',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Addes a boxes 'Remove' link as a contextual link
 */
function vsite_layout_vsite_admin_link($type, $object) {
  $links = array();
  if ($type != 'block') return $links;


  if ($object->module == 'boxes' && ($box = boxes_load($object->delta)) && spaces_access_admin()) {
    
  	$active_feature = vsite_active_feature();
    if (!$active_feature) return $links;
      
    $links[] = array(
      'title' => 'Remove',
      'href' => 'cp/viste_layout/nojs/'.$object->delta.'/'.'openscholar-feature-'.$active_feature.'/remove',
      'attributes' => array(
        'class' => 'ctools-use-ajax',
      )
    );
  }
  return $links;
}

/**
 * Gets ALL the widgets!
 * Then runs an alter on them.
 */
function vsite_layout_get_widgets() {
  static $widgets = null;
  if (is_null($widgets)) {
    $widgets = module_invoke_all('vsite_widgets');
    drupal_alter('vsite_widgets', $widgets);
  }

  return $widgets;
}

/**
 *
 * Removes a widget from a single context
 * @param boolean $js			Called by AJAX or not
 * @param string $delta		The delta of the widget to remove
 * @param string $ctx			The context its being removed from
 */
function vsite_layout_remove_widget($js, $delta, $ctx) {
  // get the context
  // remove box from context
  // save context
  $vsite = vsite_get_vsite();
  if($vsite){
	  $ctx_key = $ctx.':reaction:block';
	  $ctx = $vsite->controllers->context->get($ctx_key);
	  
	  if($ctx && isset($ctx['blocks']['boxes-'.$delta])){
		  $ctx['blocks']['boxes-'.$delta]['region'] = false;
		  $vsite->controllers->context->set($ctx_key.':'.$vsite->group->og_theme, $ctx);
	  }
  }
  
  if (!$js) {
    drupal_goto('<front>');
  }

  ctools_include('ajax');
  $output[] = ctools_ajax_command_remove('#block-boxes-'.$delta);
  ctools_ajax_render($output);
}

/**
 * Alter the default location for the theme widgets
 *
 * @param $a_widgets
 */
function vsite_layout_vsite_default_blocks_alter(&$a_widgets) {

  static $a_settings = null;

  if (!is_array($a_settings)) {
  	$a_settings = array();
    $space = vsite_get_vsite();
    if ($space){

	    $s_path = drupal_get_path('theme', $space->group->og_theme);
	    if ($s_path){
		    $a_info = drupal_parse_info_file($s_path . "/" . $space->group->og_theme . ".info");
		    $a_settings = (is_array($a_info) && array_key_exists('os', $a_info) && array_key_exists('widgets', $a_info['os']))?$a_info['os']['widgets']:array();
	    }
    }//In a space
  }//Get theme settings?

  foreach ($a_settings as $s_widget => $s_region) {
    $s_region = (strlen($s_region) && $s_region != 'false')?$s_region:false;
    if (array_key_exists($s_widget, $a_widgets)) $a_widgets[$s_widget]['region'] = $s_region;
  }//alter based on theme settings

  //Add user blocks and module defined blocks to the preset blocks
  vsite_layout_merge_default_blocks($a_widgets);
}


/**
 * Add default blocks to current blocks
 *
 * Gathers default blocks via the hook and calls alter hook which
 * lets other modules make changes, an example is some themes like
 * to change the default region of a block
 */
function vsite_layout_merge_default_blocks(&$blocks) {
  if(!is_array($blocks)) return;


  static $default_blocks;

  if(!isset($default_blocks)){
	  $default_blocks = vsite_layout_get_widgets();
	  drupal_alter('vsite_default_blocks',$default_blocks);
  }

  $blocks = array_merge($default_blocks,$blocks);  //Everywhere plus the feature
}

/**
 * Change the boxes modal form so that it integrates with its various appearances in modals
 */
function vsite_layout_form_alter(&$form, $form_state, $form_id){
switch ($form_id) {
    case 'boxes_box_form' :
    	if(module_exists('os_boxes')){
        if(!is_array($form['#submit'])) $form['#submit'] = array();
        $form['#submit'][] = "vsite_layout_box_form_submit";
    	}
    break;
  }
}

/**
 * Handle submission of box form from modals
 */
function vsite_layout_box_form_submit($form, &$form_state) {
	$origin = arg(5);
	if (!isset($origin)) return;
	if($origin == "cp_layout" && $vsite = spaces_get_space()){
    //Load the full box
		$box = boxes_load($form_state['box']->delta);

		$form_state['js commands'] = array(
		  ctools_ajax_command_replace("div#cp-settings-layout dd#boxes-boxes_add__{$form_state['plugin_key']}", theme('vsite_layout_ui_cp_widget', "boxes-{$box->delta}", os_boxes_get_vsite_widget($box))),
		  array('command' => 'updateLayoutForm', 'warning' => true),
		);
	}
	elseif ($origin == "dropdown") {
	  // called from the 'Add New' dropdown on the layout page
	  $box = boxes_load($form_state['box']->delta);

	  $form_state['js commands'] = array(
	    ctools_ajax_command_before('#scholarlayout-top-widgets .scholarlayout-item:nth-child(2)', theme('vsite_layout_ui_cp_widget', 'boxes-'.$box->delta, os_boxes_get_vsite_widget($box))),
	    ctools_ajax_command_changed('#boxes-'.$box->delta),
	  );
	}
	elseif ($origin == "front") {
	  // called from the Configure links on the public side of a site
	  $form_state['js commands'] = array(
	    ctools_ajax_command_reload(),
	  );
	}

}

/**
 * Custom sort by block weight
 */
function vsite_layout_sort_block_by_weight($a, $b) {
  $a = (array)$a;
  $b = (array)$b;

  if ($a['weight'] == $b['weight']) return 0;

  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 *
 */
function vsite_layout_context_registry_alter(&$registry){

	//Use our own block context reaction
  if(isset($registry['reactions']['block'])){
    $registry['reactions']['block']['plugin'] = "vsite_context_reaction_block";
  }
}

/**
 * Implementation of hook_spaces_plugins().
 */
function vsite_layout_context_plugins() {
  $plugins = array();

  //define the vsite controller for contexts
  $plugins['vsite_context_reaction_block'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'vsite_layout') .'/plugins',
      'file' => 'vsite_context_reaction_block.inc',
      'class' => 'vsite_context_reaction_block',
      'parent' => 'context_reaction_block',
    ),
  );
  return $plugins;
}

/**
 * The default access function for vsite widgets
 *
 * If the parent is a feature module and it is disabled then lets not show this block
 * or if views does not give access (usually using the feature access)
 *
 * @param array $widget
 * @param user $user
 */
function vsite_layout_vsite_widgets_access($widget ,$account = false){
  $space_features = variable_get('spaces_features', array());
  
  if (array_key_exists($widget['module'], $space_features) && !$space_features[$widget['module']]) {
    //if this block is provided by a feature and that feature is disabled do not show the block
    return false;
  }
  elseif ($wgt['module'] == 'views') {
    if(!$account) $account = $GLOBALS['user'];
    //Insetad of checking as admin use the site owner so they see the same blocks
    if ($account->uid == 1) $account = user_load(array('uid' => $space->group->uid));

    //if this block is provided by views then check it's access
    list($name, $display_id) = explode('-', $widget['delta']);
    if (($view = views_get_view($name)) && !$view->access($display_id, $account)) {
      return false;
    }
    if (is_object($view)) $view->destroy();
  }
    
  return true;
}

/**
 * Add new permissions for layout admin functions
 */
function vsite_layout_perm(){
	return array(
    "reset layout to defaults",
  );
}