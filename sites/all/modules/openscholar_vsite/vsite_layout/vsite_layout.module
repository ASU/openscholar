<?php
module_load_include('inc', 'vsite_layout', 'vsite_layout.overrides');

/**
 * Implementation of hook_ctools_plugin_api().
 */
function vsite_layout_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "context" && $api == "context") {
    return array("version" => 3);
  }
}

/**
 * Define the themes used for the layout portion of the CP
 */
function vsite_layout_theme() {
  return array(
    //The layout page
    'vsite_layout_layout' => array(
      'template' => 'vsite_layout-layout',
      'path' => drupal_get_path('module', 'vsite_layout') . '/theme',
      'arguments' => array('regions' => NULL),
    ),

    'vsite_layout_layout_widgets' => array(
      'template' => 'vsite_layout-layout-widgets',
      'arguments' => array('wgts' => NULL, 'wgts_id' => NULL, 'wgts_class' => NULL, 'region_name' => NULL, 'wgts_tags' => NULL),
      'path' => drupal_get_path('module', 'vsite_layout') . '/theme'
    ),
    
    'vsite_layout_cp_widget' => array(
      'template' => 'vsite_layout-cp-widget',
      'arguments' => array('s_widget_key' => NULL, 'w' => NULL),
      'path' => drupal_get_path('module', 'vsite_layout') . '/theme'
    ),
  );
}

/**
 * Define the Menu Entries for the Cp Layout Management
 */
function vsite_layout_menu() {
  $items = array();

  $items['cp/build/layout'] = array(
    'title' => "Layout",
    'page callback' => 'vsite_layout_layout',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'cp',
    'access callback' => 'cp_access_cp',
    'file path' => drupal_get_path('module', 'vsite_layout') . '/includes',
    'file' => 'vsite_layout.admin.inc',
    'weight' => 10,
  );

  $items["cp/build/layout/region_widgets_js"] =
  $items["cp/build/region_widgets_js"] = array(
    'page callback' => 'vsite_layout_region_widgets_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'vsite_layout') . '/includes',
    'file' => 'vsite_layout.admin.inc',
  );
  $items["cp/build/layout/top_widgets_js"] =
  $items["cp/build/top_widgets_js"] = array(
    'page callback' => 'vsite_layout_top_widgets_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'vsite_layout') . '/includes',
    'file' => 'vsite_layout.admin.inc',
  );

  return $items;
}

/**
 * Alter the default location for the theme widgets
 *
 * @param $a_widgets
 */
function vsite_layout_vsite_default_blocks_alter(&$a_widgets) {

  static  $a_settings;

  if (!is_array($a_settings)) {
  	$a_settings = array();
    $space = vsite_get_vsite();
    if ($space){

	    $s_path = drupal_get_path('theme', $space->group->og_theme);
	    if ($s_path){
		    $a_info = drupal_parse_info_file($s_path . "/" . $space->group->og_theme . ".info");
		    $a_settings = (is_array($a_info) && array_key_exists('scholar', $a_info) && array_key_exists('widgets', $a_info['scholar']))?$a_info['scholar']['widgets']:array();
	    }
    }//In a space
  }//Get theme settings?

  foreach ($a_settings as $s_widget => $s_region) {
    $s_region = (strlen($s_region) && $s_region != 'false')?$s_region:false;
    if (array_key_exists($s_widget, $a_widgets)) $a_widgets[$s_widget]['region'] = $s_region;
  }//alter based on theme settings
  
  //Add user blocks and module defined blocks to the preset blocks
  vsite_layout_merge_default_blocks($a_widgets);
}


/**
 * Add default blocks to current blocks
 *
 * Gathers default blocks via the hook and calls alter hook which
 * lets other modules make changes, an example is some themes like
 * to change the default region of a block
 */
function vsite_layout_merge_default_blocks(&$blocks) {
  if(!is_array($blocks)) return;
  
  static $default_blocks;
  
  if(!isset($default_blocks)){
	  $default_blocks = module_invoke_all('vsite_widgets');
  }
  $blocks = array_merge($default_blocks,$blocks);  //Everywhere plus the feature
}

/**
 * Change the boxes modal form so that it integrates with the cp/layout
 */
function vsite_layout_form_alter(&$form, $form_state, $form_id){
switch ($form_id) {
    case 'boxes_box_form' :
    	if(module_exists('os_boxes')){
        if(!is_array($form['#submit'])) $form['#submit'] = array();
        $form['#submit'][] = "vsite_layout_box_form_submit";
    	}
    break;
  }
}

/**
 * Handle submittion of box form in "cp/build/layout"
 */
function vsite_layout_box_form_submit($form, &$form_state) {
	$origin = arg(5);
	if(isset($origin) && $origin == "cp_layout" && $vsite = spaces_get_space()){
    //Load the full box
		$box = boxes_load($form_state['box']->delta);
		
		$form_state['js commands'] = array(
		  ctools_ajax_command_replace("div#cp-settings-layout dd#boxes-boxes_add__{$form_state['plugin_key']}", theme('vsite_layout_cp_widget', "boxes-{$box->delta}", os_boxes_get_vsite_widget($box))),
		  array('command' => 'updateLayoutForm', 'warning' => true),
		);
	}
}

/**
 * Custom sort by block weight
 */
function vsite_layout_sort_block_by_weight($a, $b) {
  $a = (array)$a;
  $b = (array)$b;
  
  if ($a['weight'] == $b['weight']) return 0;
  
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 *
 */
function vsite_layout_context_registry_alter(&$registry){
	
	//Use our own block context reaction
  if(isset($registry['reactions']['block'])){
    $registry['reactions']['block']['plugin'] = "vsite_context_reaction_block";
  }
}

/**
 * Implementation of hook_spaces_plugins().
 */
function vsite_layout_context_plugins() {
  $plugins = array();
 
  //define the vsite controller for contexts
  $plugins['vsite_context_reaction_block'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'vsite_layout') .'/plugins',
      'file' => 'vsite_context_reaction_block.inc',
      'class' => 'vsite_context_reaction_block',
      'parent' => 'context_reaction_block',
    ),
  );
  return $plugins;
}
