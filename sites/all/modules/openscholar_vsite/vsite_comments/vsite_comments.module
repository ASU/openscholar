<?php

include_once('vsite_comments.features.inc');

/**
 * Implementation of hook_menu_alter
 */
function vsite_comments_menu_alter(&$items){
	//Change access permissions for comments menu entries
  $items['comment/delete']['access callback'] = 'vsite_comments_admin_access';
  $items['comment/edit']['access callback'] = 'vsite_comments_admin_access';
}


/**
 * Access function for comment/delete menu entry
 */
function vsite_comments_admin_access(){
  // if we are in a vsite, vsite admin can delete comments
  $vsite = vsite_get_vsite();
  if ($vsite && $vsite -> access_admin()){
    return TRUE;
  }
  
  return user_access('administer comments');
}


/**
 * Implementation of hook_views_handlers
 */
function vsite_comments_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('module', 'vsite_comments') .'/includes',
    ),
    'handlers' => array(
      'vsite_comments_handler_field_comment_link_delete' => array(
        'parent' => 'views_handler_field_comment_link',
      ),
      'vsite_comments_handler_field_comment_link_edit' => array(
        'parent' => 'views_handler_field_comment_edit',
      ),
    ),
  );
}


/**
 * Implementation of hook_views_data_alter
 * @see vsite_comments_views_handlers()
 */
function vsite_comments_views_data_alter(&$data) {
  // we want our handler to be used
  $data['comments']['delete_comment']['field']['handler'] = 'vsite_comments_handler_field_comment_link_delete';
  $data['comments']['edit_comment']['field']['handler'] = 'vsite_comments_handler_field_comment_link_edit';
  
}


/**
 * Implementation of hook_form_alter
 */
function vsite_comments_form_alter(&$form, &$form_state, $form_id){
  
	//Check if this is a feature form and add comment settings if the feature provides a node
	vsite_comments_add_comment_settings($form, $form_state, $form_id);
	
//
//	//Alter the avalible 'format types' for wysiwyg fields
//  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
//    if(is_array($form['body_field']) && is_array($form['body_field']['format'])){
//      $body_field = $form['body_field'];
//    }elseif (is_array($form['extra_fields_group']['body_field']) && is_array($form['extra_fields_group']['body_field']['format'])){
//      $body_field = $form['extra_fields_group']['body_field'];
//    }
//
//    if($body_field){
//      $a_formats = array();
//      foreach (element_children($body_field['format']) as $index) {
//        if($body_field['format'][$index]['#type'] == 'radio'){
//          //Remove comments HTML as option for nodes
//          if($body_field['format'][$index]['#title'] == "Comments HTML"){
//            unset($body_field['format'][$index]);
//          }else{
//            $a_formats[$index] = $index;
//          }
//        }
//      }
//
//      if(count($a_formats) == 1){
//        $body_field['format'] = array();
//        $body_field['format'][current($a_formats)] = array('#type' => 'value', '#value' => current($a_formats), '#parents' => array('format'));
//
//        $body_field['format']['format']['guidelines'] = array(
//          '#title' => t('Formatting guidelines'),
//          '#value' => '',
//        );
//      }
//
//      if(is_array($form['body_field']) && is_array($form['body_field']['format'])){
//        $form['body_field'] = $body_field;
//      }else{
//        $form['extra_fields_group']['body_field'] = $body_field;
//      }
//    }//Filters radios exist
//  }
}

/**
 * Check if this is a feature form and add comment settings if the feature provides a node
 */
function vsite_comments_add_comment_settings(&$form, &$form_state, $form_id){
	//Add node settings to the feature forms
	
	$feature_name = vsite_is_feature_settings_form($form_id);
	
	if(!$feature_name){
		return false;
	}
  
  //Get the nodes for this feature
  $a_info = features_get_features($feature_name);
  $node_types = $a_info->info['features']['node'];
      
  if(!empty($node_types)){
  	$node_names = node_get_types('names');
    
    foreach ($node_types as $node){
    	
    	if(!isset($form["{$node}_settings"])){
    		$form["{$node}_settings"] = array(
		      '#type' => 'fieldset',
		      '#id' => "{$node}_settings",
		      '#title' => t(ucfirst($node_names[$node]).' Settings'),
		      '#weight' => 0,
		    );
    	}
    	//Set the node type
    	$form["{$node}_settings"]['#node_type'] = $node;
    	
    	$form["{$node}_settings"]["vsite_comments_comment_type_{$node}"] = array(
	      '#type' => 'select',
    	  '#node_type' => $node,
	      '#title' => t(' Comment Settings'),
	      '#default_value' => variable_get("vsite_comments_comment_type_{$node}",0),
    	  '#options' => array(
    	    0 => "No Comments",
    	    'drupal' => "Standard System Comments",
    	  ),
    	  '#description' => "Choose the comment settings for {$node}.",
	    );
	    
	    if(module_exists('disqus')){
	    	$form["{$node}_settings"]["vsite_comments_comment_type_{$node}"]['#options']['disqus'] = "Disqus Comments";
	    	$form["{$node}_settings"]["vsite_comments_comment_type_{$node}"]['#description'] .= " Disqus must be configured with an 'API' key to work, you may do that ".l('here','cp/settings').".";
	    }
    }
    
    $form['#submit'][] = 'vsite_comments_comment_settings_submit';
  }

}

/**
 * Submit handler for the feature settings form
 */
function vsite_comments_comment_settings_submit($form, &$form_state){
	
	$a_comment_settings = array();
	foreach (element_children($form) as $element) {
		if(!isset($form[$element]['#node_type'])){
			continue;
		}//Not a node settings fieldset
		
		$s_node_type = $form[$element]['#node_type'];
		
		if(isset($form[$element]["vsite_comments_comment_type_{$s_node_type}"])){
			$a_comment_settings[$s_node_type] = $form_state['values']["vsite_comments_comment_type_{$s_node_type}"];
		}
	}//Gather comment settings
	
	foreach ($a_comment_settings as $node_type => $setting) {
	  //Set Drupal Comment Settings
		vsite_comments_update_drupal_comment_setings($node_type,($setting == 'drupal'));
		//Update Disqus Settings
		vsite_comments_update_disqus_comment_setings($node_type,($setting == 'disqus'));
	}
}

/**
 * Update the comment settings for a given content type
 *
 * @param $node_type (The node type to update)
 * @param $enable_comments (Should the comments for this node be enabled or disabled
 */
function vsite_comments_update_drupal_comment_setings($node_type, $enable_comments, $a_settings = array()){
	
	//Get the defaults from the feature export or for this content type, or apply defaults if none exist
	$a_defaults = array(
		"comment_default_order_{$node_type}" => variable_get("comment_default_order_{$node_type}","2"), //Default: OLDEST_FIRST
		"comment_default_mode_{$node_type}" => variable_get("comment_default_mode_{$node_type}","4"), //Default: THREADED_EXPANDED
		"comment_controls_{$node_type}" => variable_get("comment_controls_{$node_type}","3"), //Default: controls hidden
		"comment_anonymous_{$node_type}" => variable_get("comment_anonymous_{$node_type}","1"), //Default: anon may leave contact info
		"comment_default_per_page_{$node_type}" => variable_get("comment_default_per_page_{$node_type}","10"), //Default: 10 per page
		"comment_form_location_{$node_type}" => variable_get("comment_form_location_{$node_type}","1"), //Default: below post
		"comment_preview_{$node_type}" => variable_get("comment_preview_{$node_type}","0"), //Default: optional preview
		"comment_subject_field_{$node_type}" => variable_get("comment_subject_field_{$node_type}","1"), //Default: Enabled
	);
	
	if ($enable_comments){
		//Comments enabled
	  if(!isset($a_settings["comment_{$node_type}"]) || !intval($a_settings["comment_{$node_type}"])){
		  //t('Disabled'), t('Read only'), t('Read/Write')
			$a_settings["comment_{$node_type}"] = "2";
		}//Set commenting to read/write unless "read only" was passed as a parameter
		
		//Add default settings
		$a_settings = array_merge($a_defaults,$a_settings);
		
	}else{
	  //Set commenting to disabled
		$a_settings["comment_{$node_type}"] = "0";
	}
	
	foreach ($a_settings as $variable => $value) {
		if($vsite = vsite_get_vsite()){
	    $vsite->controllers->variable->set($variable,$value);
	    continue;
	  }//If we are in a vsite set an override
	  
	  variable_set($variable,$value);
	}
}

/**
 * Update the disqus comment settings for a given content type
 *
 * @param $node_type (The node type to update)
 * @param $enable_comments (Should the comments for this node be enabled or disabled
 */
function vsite_comments_update_disqus_comment_setings($node_type, $enable_comments){
  if(!module_exists('disqus')){
  	return false;
  }
  
  $enabled_types = variable_get('disqus_nodetypes',array());
  $enabled_types[$node_type] = $enable_comments? 1:0;
  
  if($vsite = vsite_get_vsite()){
  	$vsite->controllers->variable->set('disqus_nodetypes',$enabled_types);
  	return true;
  }//If we are in a vsite set an override
  
  variable_set('disqus_nodetypes',$enabled_types);
  return true;
}

/**
 * Implement Hook vsite_generic_settings
 * @return array
 */
function vsite_comments_vsite_generic_settings(){
  $a_settings = array();

  if(module_exists('disqus')){
	  $a_settings['disqus_userapikey'] = array(
	    'group' => array(
	      '#id' => 'social',
	      '#title' => t('Social'),
	      '#weight' => 0,
	    ),
	    'form' => array(
	      '#type' => 'textfield',
	      '#title' => t('Disqus User API Key'),
	      '#default_value' => variable_get('disqus_userapikey', ''),
	      '#description' => t('The API key of your administrator account on Disqus. You can get yours <a href="@key">here</a>.', array('@key' => 'http://disqus.com/api/get_my_key/')),
	    ),
	    'submit' => array('vsite_comments_disqus_settings_submit'),
	  );
  }

  return $a_settings;
}

/**
 * Automatically setup the disqus domain for this site
 */
function vsite_comments_disqus_settings_submit($form, &$form_state){
	$vsite = vsite_get_vsite();
	
	//Set the disqus domain to be the same as this site
	if($vsite && ($domain = $vsite->get_absolute_url())){
		$parsed = parse_url($domain); //$parsed['host'].$parsed['path']
		
		$vsite->controllers->variable->set('disqus_domain','scholar.harvard.edu');
	}
}