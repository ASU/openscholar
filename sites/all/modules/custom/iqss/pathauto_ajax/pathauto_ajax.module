<?php

/**
 * implementation of hook_menu()
 * provides a page for ajax to call so we can retrieve info from drupal
 */
function pathauto_ajax_menu() {
	$items['pathauto_ajax/alias_js'] = array (
		'page callback' => 'pathauto_ajax_alias_js', 
		'type' => 'MENU_CALLBACK', 
		'access arguments' => array('access content' ) 
	);
	return $items;
}

/**
 * implementation of hook_form_alter()
 * attaches javascript to node edit forms
 */
function pathauto_ajax_form_alter(&$form, $form_state, $form_id) {
	if (isset( $form['type'] ) && isset( $form['#node'] ) && $form['type']['#value'] . '_node_form' == $form_id && isset( $form['path']['pathauto_perform_alias'] )) {
		drupal_add_js( drupal_get_path( 'module', 'pathauto_ajax' ) . '/pathauto_ajax.js' );
	}
}

/**
 * @function pathauto_ajax_alias_js()
 * 
 * .js file calls this function to get info back from drupal
 * gets the pattern for formatting urls for this node type, tries to apply it
 * returns expected url.
 */
function pathauto_ajax_alias_js() {
 	
	//get pattern for this node type
	$pattern = trim( variable_get( 'pathauto_node_' . $_GET['type'] . '_pattern', FALSE ));
	if (empty( $pattern )) {
		$pattern = trim( variable_get( 'pathauto_node_pattern', FALSE ) );
	}

	//only replace known good token patterns.
	//ignoring types: images
	$replaceable_patterns = array();
	foreach(array('publications', 'announcements', 'classes', 'galleries') as $type) {
		$replaceable_patterns[] = '[space-og-path]/'.$type.'/[title-raw]';
	};
	$replaceable_patterns[] = 'content/[title-raw]';
	$replaceable_patterns[] = '[space-og-path]/blog/[yyyy]/[mm]/[title-raw]';
	
	if (in_array($pattern, $replaceable_patterns)) {
		//prepare arrays for replacing
		$search = array();
		$replace = array();
		foreach(array( 'space-og-path', 'title_raw') as $key) {
			if (isset($_GET[$key])) {
				$search[] = '[' . str_replace('_', '-', $key) . ']';
				$replace[] = $_GET[$key];
			}	
		}
		
		//replace tokens
		$path = str_replace($search, $replace, $pattern);
		
		//clear out spaces that may have been in title
		$path = str_replace(' ', '-', $path);
		
		//send back to jQuery
		drupal_json( array('status' => TRUE, 'data' => $path ) );
		
	} else {
		//don't know how to replace tokens in this pattern  
		drupal_json( array('status' => TRUE, 'data' => '', 'error' => 'pathauto_ajax has no token replacement set up for this pathauto pattern'));
	}
}

/**
 * implementation of hook_preproces_page
 * adds tokenizable variables to page's javascript, so pathauto_ajax.js can use them.
 */
function pathauto_ajax_preprocess_page(&$variables) {
	if (($g = og_get_group_context()) && in_array('page-node-add', $variables['template_files']) ) {
		
		$type_template = array_pop( preg_grep('/page-node-add-\w+/',$variables['template_files']) ); 
		$type = str_replace( 'page-node-add-', '', $type_template ); 

		$data = array('pathauto_ajax' => array(
			'space-og-path' => $g->name,
			'type' => $type,
		));
		drupal_add_js($data, 'setting');
	}	
}