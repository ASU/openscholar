<?php

/**
 * implementation of hook_menu()
 * provides a page for ajax to call so we can retrieve info from drupal
 */
function pathauto_extra_menu() {
  $items['pathauto_extra/alias_js/%/%'] = array(
    'page callback' => 'pathauto_extra_alias_js',
  	'page arguments' => array(2,3),   
    'type' => 'MENU_CALLBACK', 
    'access arguments' => array('access content'), 
  );
  return $items;
}

/**
 * implementation of hook_form_alter()
 * attaches javascript to node edit forms
 */
function pathauto_extra_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id ) {
    ctools_include('ajax');
    ctools_add_js('ajax-responder');
    
    $vsite=vsite_get_vsite();   
    $gid = $vsite->id;
    $type = arg(2); 
      
    ctools_ajax_associate_url_to_element($form, $form['title'], url('pathauto_extra/alias_js/'.$gid.'/'.$type), 'ctools-use-ajax-onchange');
  }
}

/**
 * @function pathauto_extra_alias_js()
 * 
 * gets the pattern for formatting urls for this node type, tries to apply it
 * returns expected url alias.
 */
function pathauto_extra_alias_js($gid, $type) {
  $path = _pathauto_extra_make_path($gid, $type, $_POST['ctools_changed']);
  pathauto_extra_ctools_value('#edit-path', $path);
}

/**
 * Enter description here ...
 * @param gid
 * @param type
 */
function _pathauto_extra_make_path($gid, $type, $title) {
  //get pattern for this node type
  $pattern = trim(variable_get('pathauto_node_' . $type . '_pattern', FALSE));
  if (empty($pattern)) {
    $pattern = trim(variable_get('pathauto_node_pattern', FALSE));
  }
  
  //if applicable, process this pattern for tokens
  if (isset($pattern) && strlen($pattern) > 0 ) {
    //Fake a simple node object to pass to path auto
    $node = array(
      'title' => $title,
      'type' => $type,
      'spaces_og' => array('gid' => $gid),
    );
    $node = (object)$node;
    module_load_include('inc', 'node', 'node.pages');
    node_object_prepare($node);
    
    //let pathauto apply tokens to path given our fake node
    module_load_include('inc', 'pathauto');
    $placeholders = pathauto_get_placeholders('node', $node);
    $path = pathauto_create_alias('node', 'return', $placeholders, null, null, $node->type, null);
  }
  return $path;
}

/**
 * wrapper function for ajax commands
 * changes value attribute of #$id
 */
function pathauto_extra_ctools_value($id, $value) {
  ctools_include( 'ajax');
  ctools_add_js('ajax-responder');
  
  $commands = array();
  $commands[] = ctools_ajax_command_attr($id, 'value', $value);
  
  ctools_ajax_render($commands);  
}

/**
 * implementation of hook_nodeapi	
 * checks that path alias from user is valid
 * we can't do this in ajax because the last thing users do is edit the path before clicking submit.  leads to unfinished ajax errors.
 */
function pathauto_extra_nodeapi(&$node, $op, &$form) {
  if ($op == 'validate' && !$form['path']['pathauto_perform_alias']['#value']) {
    $path = $form['path']['path']['#value'];
    $errors = array();
  
    //begins with slash
    if (strpos($path, '/') === 0) {
      $errors[] = 'URL path cannot begin with a forward slash.';
    }
    
    //return all errors
    if (count($errors) > 0) {
      form_set_error('path', implode(" ", $errors));
    }
  }
}