<?php

/**
 * @file
 * Allows faculty members to import a list of their publications.
*/
 
/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function harvard_activity_reports_help($path, $arg) {
  switch ($path) {
    case 'admin/help#harvard_activity_reports': // links from the main Drupal help section
      $output = '<p>'. t('Harvard Activity Report (HAR) will display a list of publications for a given faculty member.') .'</p>';
      return $output;
  }
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the onthisdate module
*/
function harvard_activity_reports_perm() {
  return array('access harvard_activity_reports content');
} // function har_perm()
 
 
/**
 * Implementation of hook_menu().
*/
function harvard_activity_reports_menu() {
  $items['harvard_activity_reports'] = array(
    'title' => 'Harvard Activity Report', // Give it a title
    'page callback' => 'harvard_activity_reports_page', // Call back is for page to display
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * 
 * Implementation har_query_user().
 * Custom query to pull the user publicatios from the passed HUID
 */
function harvard_activity_reports_query_user() {
	$bibContents = array();
	// use drupal_get_query_parameters when we switch over to 7
	
	// using an ID for right now since no hashs exists
	
	// get the ID from the "id" parameter of the link
	if(isset($_GET['id'])) { // make sure it's set first
		//assign it to a variable
		$hashID = $_GET['id'];
		
		// query the DB and check if the user exists for this hash
		$query = "SELECT uid FROM {iqss_pinserver_register} WHERE huid = '%s'"; // setup the query
		$results = db_query($query, $hashID); // perform the query
		// make sure there are results
		if($results) {
			$row = db_fetch_object($results); // grab the resulting uid
			$uid = $row->uid; // push it into a variable
			
			// now that we have the UID, grab their VSITE node ID from the Node table
			$nodeQuery = "SELECT nid FROM {node} WHERE uid = %d AND type='vsite'";
			$nodeResults = db_query($nodeQuery,$uid);
			if($nodeResults) {
				$nodeRow = db_fetch_object($nodeResults);
				$nid = $nodeRow->nid;
			}else{
				$nid = FALSE;
			}
		}
	}else{ // no id set, tell them
		$nid = FALSE;
	}
	
	// return the content
	return $nid;
}// end function

/**
 * 
 * Function to pull the users information via node load
 */
function harvard_activity_reports_load_user_info($nid){ 
	// make sure we have a proper nid first
	if($nid != FALSE){
		// query for all the biblio nodes
		// using a stand alone ID for right now until error checking and site url can be implemented
		$bibQuery = "SELECT n.nid FROM {node} n INNER JOIN {og_ancestry} oa ON n.nid = oa.nid WHERE oa.group_nid = 3543 AND n.type = 'biblio'";
		$bibResults = db_query($bibQuery,$nid);
		if($bibResults) {
			while($bibRow = db_fetch_array($bibResults)){
				// assign them to a variable
				$biblio[] = $bibRow;
			}
			//echo count($biblio);
		}else {
			$biblio = FALSE;
		}
	}else {
		$biblio = FALSE;
	}
	
	return $biblio;
}// end function

/**
 * 
 * Function to create the XML based on the info passed into it from the load_user_info functon
 * @param unknown_type $nodeLoad
 */
function harvard_activity_reports_create_xml($nodeLoad) {
	$xmlReturn = '';
	// pull in the xml
	$xml = $nodeLoad;
	print_r($xml);
	/* create a dom document with encoding utf8 */
    $domtree = new DOMDocument('1.0', 'UTF-8');
	
    /* create the root element of the xml tree */
    $xmlRoot = $domtree->createElement("xml");
    /* append it to the document created */
    $xmlRoot = $domtree->appendChild($xmlRoot);
	
    foreach($xml as $key=>$value) {
    	$currentPub = $domtree->createElement("publication");
    	$currentPub = $xmlRoot->appendChild($currentPub);
    	/* you should enclose the following two lines in a cicle */
    	$currentPub->appendChild($domtree->createElement('title',$value));
    	//$currentPub->appendChild($domtree->createElement('published',$xmlData['title']));
    }
    
    $xmlReturn = $domtree->saveXML();
    
    return $xmlReturn;
	
}// end function


/**
 * 
 *  Implementation of the hook_page() function
 */
function harvard_activity_reports_page() {
	// test to see if this works
	$xml = '';
	$nid = harvard_activity_reports_query_user();
	$xml = harvard_activity_reports_load_user_info($nid);
	foreach($xml as $xmlLoad) {
		//$newXML .= $xmlLoad['nid'];
		//$newXML[] = node_load($xmlLoad['nid'], NULL, TRUE);
		// node load was killing the page, using a simple query instead for testing right now
		$selTitle = "SELECT title FROM {node} WHERE nid = %d";
		$titleRes = db_query($selTitle,$xmlLoad['nid']);
		$titleRow = db_fetch_object($titleRes);
		$title[] = $titleRow->title;
	}
	$testXML = harvard_activity_reports_create_xml($title);
	
	return $testXML;	
}