<?php

function scholar_init(){
  drupal_add_css(drupal_get_path('module', 'scholar') . '/theme/scholar-admin-links.css');
  drupal_add_js(drupal_get_path('module', 'scholar') . '/theme/scholar.js');
  
}

/**
 * hook link
 */
function scholar_link($type, $object, $teaser = FALSE){
  $links = array();
  $vsite = vsite_get_vsite();
  if ($vsite && $vsite->admin_access()) {
    $links['scholar-admin'] = array(
      'title' => theme('scholar_admin_links', scholar_get_admin_links('node', $object)), 
      'html' => TRUE 
    );
  }
  return $links;
}

/**
 * hook link_alter (admin at the end of links)
 */
function scholar_link_alter(&$links, $node){
	if(!isset($links['scholar-admin'])) return;
	
  $old['scholar-admin'] = $links['scholar-admin'];
  unset($links['scholar-admin']);
  $links = array_merge($links, $old);
}


function scholar_menu(){
  $items = array();
  $items['admin/settings/scholar'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Scholar settings',
    'description' => 'Setting for scholars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholar_settings_form'),
    'file' => 'scholar.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'weight' => 10,
  );

  $items['admin/settings/scholar/settings'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scholar_settings_form'),
    'file' => 'scholar.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'weight' => 0,
  );
  return $items;
}

/**
 * hook strongarm
 */
function scholar_strongarm(){
 include_once('scholar.overrides.inc');

  $conf = array();
  //replacing scholar or vsite terms with more common terms using stringoverrides module
  $conf['locale_custom_strings_en'] = scholar_string_overrides();

  // User settings
  $conf['user_register'] = 0; // No registration is allowed; this is a closed group
  
  return $conf;
}

/**
 *  Hook preproces_page
 */
function scholar_preprocess_page(&$vars) {
  // need to know if there is anything in the navbar for css theming
  $body_class_extra = $vars['navbar'] ? ' navbar-on' : ' navbar-off';
    $vars['body_classes'] .= $body_class_extra;
}

/**
* Implementation of hook_mail_alter().
*/
function scholar_mail_alter(&$message) {

	switch ($message['id']) {
    //Edit the UCreate Email Message
		case 'ucreate_ucreate-create':
      	$params['subject'] = t('An account has been created for you at the !site', array('!site_name' => variable_get('site_name', 'Scholar\'s Web Sites Project')));
      	$a_body_parts = split("================================================",$message['body'],2);
      	$s_personal_message = (count($a_body_parts) == 2)?trim($a_body_parts[0]):"";

      	//Get the just created user
      	$n_new_user = db_result(db_query('SELECT u.uid FROM {users} u ORDER BY u.created DESC LIMIT 1'));
      	$o_user = user_load($n_new_user);
     	  $password = user_password();
     	  $edit = array('pass' => $password);
     	  $o_profile = content_profile_load('vsite_users_profile',$n_new_user);
     	  user_save($o_user,$edit);

      	$a_msg_variables = array(
      	  '!personal_message' => strlen($s_personal_message)?$s_personal_message."\n================================================\n\n":"",
			    '!username' => $o_user->name,
			    '!site' => variable_get('site_name', 'Scholar\'s Web Sites Project'),
			    '!login_url' => user_pass_reset_url($o_user),
			    '!uri' => $base_url,
			    '!uri_brief' => preg_replace('!^https?://!', '', $base_url),
			    '!mailto' => $o_user->mail,
			    '!date' => format_date(time(), 'medium', '', NULL, $message['language']->language),
			    '!login_uri' => url('user', array('absolute' => TRUE, 'language' => $message['language'])),
			    '!edit_uri' => url('user/'. $o_user->uid .'/edit', array('absolute' => TRUE, 'language' => $message['language'])),
      	  '!password' => $password,
      	  '!firstname' => $o_profile->vsite_users_first_name[0],
			  );

			  //This is unused: Alternatively using the following username and temporary password:\n\nUsername: !username\nTemporary password: !password\n\nAfter logging in, you will be redirected to !edit_uri so you can change your password.\n\n

      	$message['body'] = t("Dear !firstname,\n\nA site owner at the !site has created an account for you. You may now log in by either clicking through on the following link or pasting it into your browser:\n\n !login_url\n\n(Note: This is a one-time login; it can be used only once.)\n\n\Sincerely,\nThe !site Team", $a_msg_variables);

    break;
  }

}



/**
 * Implementation of hook_theme().
 */
function scholar_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'scholar');

  $items['scholar_admin_links'] = array(
    'arguments' => array('links' => array()),
    'template' => 'scholar-admin-links',
    'path' => $path . '/theme',
    'file' => 'theme.inc',
  );

  return $items;
}



/**
 * Retrieve the admin links for a given object.
 */
function scholar_get_admin_links($type, $object) {
  $links = array();
  //if (admin_is_enabled('admin inline')) {
    $links = module_invoke_all('scholar_admin_link', $type, $object);
    drupal_alter('scholar_admin_link', $links, $type, $object);
  //}
  return $links;
}

/**
 * Implementation of hook_scholar_admin_link() on behalf of the node module.
 */
function node_scholar_admin_link($type, $object) {
  $links = array();
  if ($type == 'node') {
    if (node_access('update', $object)) {
      $links['node-edit'] = array(
        'title' => t('Edit'),
        'href' => "node/{$object->nid}/edit",
        'attributes' => array('class' => 'icon-edit'),
        'query' => array('destination' => $_GET['q']),
      );
    }
    if (node_access('delete', $object)) {
      $links['node-delete'] = array(
        'title' => t('Delete'),
        'href' => "node/{$object->nid}/delete",
        'attributes' => array('class' => 'icon-delete'),
        'query' => array('destination' => $_GET['q']),
      );
    }
  }
  return $links;
}

/**
 * Implementation of hook_form_alter()
 **/
function scholar_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'vsite_node_form':
      //Customize the "Site Information" form
      if(arg(0) != 'cp') break;

      $form['title']['#title'] = "Main Headline:";
      $form['title']['#description'] = "Usually: First and Last name ex.(John Q. Smith)";
      $form['og_description']['#title'] = "Sub Headline:";
      $form['og_description']['#description'] = "Usually: Title ex.(Director of Mathematics)";
      $form['field_vsite_address'][0]['#title'] = "Address Line";
      $form['field_vsite_address'][0]['#description'] = "Usually: Your Address ex.(Cambridge, MA 02118)";
      
    break;
    default:
    	
  }
}
