<?php


/**
 * Begins import process
  */
function gkimport_import(){
  gkimport_clean();
  gkimport_create_site();
  gkimport_parse_files();
}

/**
 * Function to create gking user account and web site
 * @return 
 *  If vsite created , then  vsite object, otherwise false
 */
function gkimport_create_site(){
  vsite_include('vsiteapi');
  install_include(array('user'));

  //gary's site base info
  $settings = array(
  'name' => 'gking',
  'mail' => 'king@harvard.edu',
  'pass' => 'test',
  'roles' => array(variable_get('scholar_manager_role', 'scholar admin')),
  'domain' => 'gking',
  'preset' => variable_get('scholar_default_preset', 'scholar'),
  );

  //if user already exists then skip
  if(db_result(db_query("SELECT name from {users} WHERE name = '%s'", $settings['name']))){
    drupal_set_message(t("A user account already exists for %name", array('%name' => $settings['name'])));
    return FALSE;
  }

  //otherwise create user account/roles/site
  else{
    $rid = array_search(variable_get('scholar_manager_role', 'scholar admin'), user_roles());
    $user = install_add_user($settings['name'], $settings['pass'], $settings['mail'], $settings['roles'], $status = 1);
    $vsite = vsite_vsite_create($settings['name'], $settings['domain'], $settings['preset']);
    if ($vsite){
      drupal_set_message(t("A web site has been created for %name", array('%name' => $settings['name'])));
      return $vsite;
    }
  }
}

/**
 * Looks for files and calls approproiate handler functions
 * to import data
 */
function gkimport_parse_files(){
  //NOTE: Please do not change the order of these files as it can cause problems
  $files =array('pubs_taxonomy.csv', 'gkpubs.bib');  //files to parse
  $path = dirname(__FILE__) . '/files/';

  foreach($files as $file){
    $filepath = $path . $file;

    switch($file){

      case 'pubs_taxonomy.csv':
        gkimport_pubs_taxonomy($filepath);
        break;

      case 'gkpubs.bib':
        gkimport_import_pubs($file);
        break;
    }
  }
}

/**
 * Imports publication nodes from a Bibtex file
 */
function gkimport_import_pubs($filename, $owner = 'gking' ){
  module_load_include('inc', 'biblio', 'biblio.import.export');
  $account = user_load(array('name' => $owner));
  
  $file =new stdClass();
  $file -> filepath = dirname(__FILE__) . '/files/' . $filename;
  $file->filename = $filename;

  //settings params for biblio import
  $p = array(
  'import_file' => $file,
  'filetype' => 'bib',
  'userid' => $account -> uid,
  'terms' => NULL,
  'batch_proc' => TRUE, //set to TRUE to batch process import, otherwise set to false
  'session_id' => microtime(),
  'dummy' => array(),
  'context' => array(
  'message' => t('Parsing file')
    ),
  );
  //batch process the bibtex import
  if ( $p['batch_proc'] === TRUE){
    $session_id = microtime();
    $batch_op = array(
    'title' => t('Importing '. $p['import_file'] ->filename),
    'operations' => array(
    array('biblio_import', array($p['import_file'], $p['filetype'], $p['userid'], $p['terms'], $p['batch_proc'], $p['session_id'])),
    array('biblio_import_batch_operations', array($p['session_id'], $p['userid'], $p['terms'])),
    ),
    'progressive' => TRUE,
    'finished' => 'biblio_import_batch_finished',
    'init_message' => t('Parsing file...'),
    'progress_message' => t('Importing Gary\'s Publications...'),
    'file' => './'. drupal_get_path('module', 'biblio') .'/biblio.import.export.inc'
    );
    batch_set($batch_op);
    $base = variable_get('biblio_base', 'biblio');
    batch_process("$base/import");
  }
  //non-batch process the bibtex import
  else{
    //parse bibtex file and create publication nodes
    $content = biblio_import($p['import_file'], $p['import_file'], $p['userid'], $p['terms'], $p['batch_proc'], $p['session_id'], $p['context']);
  }
}

/**
 * Implementation of hook_nodeapi()
 */
function gkimport_nodeapi(&$node, $op){
  if ($node -> type != 'biblio') return;
  $name = 'gking';
  $account = user_load(array('name' => $name));
  switch ($op) {
    case 'presave':
      //add the taxonomy term to the node
        if (!vsite_get_vsite()){ 
         // install_include(array('taxonomy'));          
         // $site_vid = install_taxonomy_get_vid($name . '_vocabulary'); 
         // $node -> taxonomy['tags'][  $site_vid ] = '';
          $vid = variable_get('gkimport_vocab_id', '');          
          $node -> taxonomy['tags'][$vid] = trim(gkimport_match_terms($node -> title)); //add the term here       
        }
      break;
      
    case 'insert':
      if (!vsite_get_vsite()){      
      $spaces = vsite_get_vsite_by_owner($account -> uid); 
      if (count($spaces) == 1){
        //added publication to the og
        $ins = db_query("INSERT INTO {og_ancestry} (nid, group_nid) VALUES (%d, %d)", $node ->nid, $spaces[0] -> group -> nid);
       }
      else{
        return dpm("Error occured: users has more than 1 web site"); // this is very unlikely
        }
      }
      break;
  }
}

/**
 * gkimport_match_terms()
 * 
 * @param  
 *  Title of node
 * @return 
 *  Return the term for matching title otherwise return NULL
 */
function gkimport_match_terms($title){
  //term match data
  $tmd = variable_get('gkimport_taxonomy_data', array());
   return isset($tmd[$title]) ? $tmd[$title] : NULL;
}

/**
 * Import taxonomy terms and save csv information to a system variable
 */
function gkimport_pubs_taxonomy($filepath){
  install_include(array('taxonomy'));
  if (( $handle = fopen($path . $filepath, "r")) !== FALSE) {
    $all_terms = array();
    $account = user_load(array('name' => 'gking'));
    $space = vsite_get_vsite_by_owner($account -> uid);
    
    //create vocabulary(s)
    $properties = array(
    'tags' => 1,
    'description' => 'Gary King Research Interests',
    'help' => 'Gary King Research Interests',
    );
    $content_types = array(
    'biblio' => 'biblio',
    );

    $vid = install_taxonomy_add_vocabulary('Research Interests', $content_types, $properties);
    og_vocab_write_record($space[0] -> group -> nid, $vid);
    variable_set('gkimport_vocab_id', $vid); //keep track of vid because other vocabs may have same name
    
    $term_match_data = array();
    
    //parse csv data
    while (($data = fgetcsv($handle, 1024, ",")) !== FALSE) {      
      //if title exists already in the array, and another term is to be added
      if (key_exists($data[3], $term_match_data)){
                $val = $term_match_data[$data[3]];
                 $term_match_data[$data[3]] = $val . ', ' . trim($data[0]);
                 continue;
      }
      else{
      $term_match_data[$data[3]] = $data[0];  //set title to term mapping data in an array
      }
      $all_data[] = $data;
      $all_terms[] = trim($data[0]);      
      
    }
    
    //refine list of terms - remove duplicates
    $terms = array_unique($all_terms);
    //set title to term mapping data in system variable to be used later
    variable_set('gkimport_taxonomy_data', $term_match_data);

 //add all terms to vocab - TODO not sure if we need to pre-create all terms before nodes created ???
 foreach($terms as $term){
      if (trim(strlen($term))){
        install_taxonomy_add_term($vid, trim($term));
      }
    }
  }
}

/**
 * THESE FUNCTIONS ARE FOR DEVELOPMENT ONLY - DELETE WHEN FINISHED
 */

/**
 * Cleanup function for development only
 */



function gkimport_clean(){
  gkimport_cleanup($pass = '566eto');
}

function gkimport_cleanup($pass = ''){
  if (md5($pass) !== '81e7108bfde4c43094d5340d9b306de5'){
    return drupal_set_message(t("Invalid password: cannot complete function"));
  }
  //$account = user_load(array('name' => 'gking'));
  
  db_query("DELETE from {users} WHERE name = '%s'", 'gking');
  db_query("DELETE from {node} WHERE nid > %d", 0);
  db_query("DELETE from {node_revisions} WHERE nid > %d", 0); 
  db_query("DELETE from {url_alias} WHERE dst LIKE '%%%s%%'", 'gking');
  
  gkimport_cleanup_tax();
  gkimport_clean_og();
  
  return drupal_set_message(t("gking site has been removed"));
  
}


function gkimport_cleanup_tax(){
  db_query("DELETE from {term_data} WHERE tid > %d", 22);
  db_query("DELETE from {term_hierarchy} WHERE tid > %d", 22);
  db_query("DELETE from {vocabulary_node_types} WHERE vid > %d", 8);
  db_query("DELETE from {vocabulary} WHERE vid > %d", 7);
  db_query("DELETE from {og_vocab} WHERE vid > %d", 6);
  db_query("TRUNCATE TABLE {term_node}");
}

function gkimport_clean_og(){
   db_query("TRUNCATE TABLE {og}");
   db_query("TRUNCATE TABLE {og_uid}");
   db_query("TRUNCATE TABLE {og_vocab}");
   db_query("TRUNCATE TABLE {og_ancestry}");
   db_query("DELETE FROM {purl} WHERE value = '%s'", 'gking');
	
}
