<?php
include_once('psrimport.defaults.inc');
include_once('psrimport.api.inc');
DEFINE(PSR_FS_PATH, '/nfs/www/iq_drupal'); //absolute path to psr site files directory
DEFINE(PSRIMPORT_FS_PATH, '/nfs/www/edu-harvard-iq-scholar-dev3'); // absolute path to this module's drupal installation
  
/**
 * Begins import script
 */
function psrimport_import($drush_run = 0){
  DEFINE(PSR_DRUSH_RUN, $drush_run);
  psrimport_print( 'Beginning import...' );
  
  psrimport_import_users();
  psrimport_create_site();
  psrimport_import_content(array('event'));

  return psrimport_print( 'done' );
}

/**
 * Import the users and user data
 */
function psrimport_import_users(){
  install_include(array('user'));
  $psr_uid_map[] = array();
  //get the vocab data
  db_set_active('psrd5');
  $res = db_query("SELECT * FROM {users} WHERE uid > %d", 1);
  db_set_active('default');
  while($data = db_fetch_object($res)){
    if(in_array($data-> name, array('pmoynihan', 'gstone'))){
      $status = 1;
      $roles =array('scholar admin');
    }
    else{
      $status = 0;
      $roles =array('scholar user');
    }
    db_set_active('default');
    $user = install_add_user($data -> name, user_password(), $data -> mail, $roles, $status);
    psrimport_print("Added user: {$data -> name}");

    $psrimport_uid_map[$user -> uid] = $data -> uid; // keep track of old to new user id's

    //update created and access
    db_query("UPDATE {users} SET created = %d, access = %d WHERE name = '%s' ", $data -> created, $data -> access, $data -> name);

    // if active user then restore old password
    if ($status == 1) {
      db_query("UPDATE {users} SET pass = '%s' WHERE name = '%s' ", $data -> pass, $data -> name);
    }
  }
  $psrimport_uid_map[1] = 1; //add user 1
  variable_set('psrimport_uid_map', $psrimport_uid_map);
}

/**
 * Create the vsite
 */
function psrimport_create_site(){
  vsite_include('vsiteapi');
  install_include(array('user'));
  $vsite = vsite_vsite_create('pmoynihan',  'psr', variable_get('scholar_default_preset', 'project'));

  if ($vsite){
    psrimport_print("Created vsite: {$vsite -> title}");
    define(PSR_SID, $vsite -> sid);
    psrimport_create_files_directory($vsite -> purl); 
    //make sure these features are enabled
    $features = array('scholar_links', 'scholar_pages', 'scholar_profiles', 'scholar_announcements', 'scholar_events'); 
    psrimport_enable_features($vsite);
  }
}

/**
 * Controller function for importing content
 *
 * @param 
 *  $types - array of psr content types
 */
function  psrimport_import_content($types = array()){ 
  $type_map =psrimport_type_map(); //get map array of all content types
  //import content for specified types only
  if (count($types)){
    foreach($types as $type){
      psrimport_import_node( $type, $type_map[$type]);    
    }
  }
  //import content for all types
  else{
    foreach($type_map as $old_type => $new_type){
      psrimport_import_node($old_type, $new_type);
    }
  }
}

/**
 * Built generic node information and make call to content type specific 
 * function to add custom data (such as cck data) then save the node
 */
function psrimport_import_node($old_type, $new_type){
 db_set_active('psrd5');
    $res = db_query("SELECT nid FROM {node} WHERE type = '%s' ", $old_type);
  while ($node_list = db_fetch_object($res)){
    db_set_active('psrd5');
    $data = db_fetch_object(db_query("SELECT n.nid, n.uid, n.status, n.created, n.title, nr.body, nr.teaser 
    FROM {node_revisions} nr INNER JOIN {node} n USING(nid) HAVING n.nid = %d", $node_list  -> nid));
    
    //gerneric node data
    $node = new stdClass(); 
    $node -> type = $new_type;
    $node -> title = $data -> title;
    $node -> body = $data -> body;
    $node -> teaser = $data -> teaser;
    $node -> created = $data -> created;
    $node -> status = $data -> status;
    $node -> uid = array_search( $data -> uid, variable_get('psrimport_uid_map', array()));
   
    //now pass the node object by reference to add custom/cck field values
     if(function_exists('psrimport_' . $old_type)) call_user_func('psrimport_' . $old_type, $node, $data ->nid, 'content_type_' . $old_type); 
     
     //now save the node  - don't forget about the stuff happening in nodeapi    
     db_set_active('default');
     node_save($node);
     psrimport_print("Added node: {$node -> title}");
     //check for files
     psrimport_get_files($node, $node_list -> nid);     
  }
}

function psrimport_resource(&$node, $old_nid, $table){
  db_set_active('psrd5');
  $table = 'content_field_resource_link'; // resetting table to get links only, no other cck data
  $cck_data = db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
  $node -> field_link_href[0] = array('url' => $cck_data['field_resource_link_url']);
}

function psrimport_event(&$node, $old_nid, $table){
   db_set_active('psrd5');
   //since there are no address fields in content type link, take any exisiting data and merge with body text
   $address_text = '';
   $address =  db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
   if (strlen($address['field_event_address_street1'])) $address_text .= $address['field_event_address_street1'] . '<br />';
   if (strlen($address['field_event_address_street2'])) $address_text .= $address['field_event_address_street2'] . '<br />';
   if (strlen($address['field_event_address_apt'])) $address_text .= $address['field_event_address_apt'] . '<br />';
   if (strlen($address['field_event_address_city'])) $address_text .= $address['field_event_address_city'] . ' ';
   if (strlen($address['field_event_address_state'])) $address_text .= $address['field_event_address_state'] . ' ';
   if (strlen($address['field_event_address_zip'])) $address_text .= $address['field_event_address_zip'] . ' ';
   
   //add address information to body text
   if(strlen($address_text)) {
       $node -> body .= '<p>Address Information:<br />' . $address_text . '<p>';
   }
     
   //now add the event times
   $table = 'event';
   $times = db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
   $start = date("Y-m-d", $times['event_start']). 'T' . date("H:i:s", $times['event_start']);
   $end = date("Y-m-d", $times['event_end']). 'T' . date("H:i:s", $times['event_end']);
   $node -> field_date[0] = array('value' => $start, 'value2' => $end);  // datetime example  - '2010-04-15T15:11:00'
}

function psrimport_psr_profile(&$node, $old_nid, $table){
  db_set_active('psrd5');
  $cck_data = db_fetch_array(db_query("SELECT * FROM {$table} WHERE nid = %d", $old_nid));
  $node -> title = trim($cck_data['field_first_name_value']) . ' ' . trim($cck_data['field_last_name_value']); //overriding title
  $node -> field_person_firstname[0] = array('value' => trim($cck_data['field_first_name_value']));
  $node -> field_person_lastname[0] = array('value' =>trim($cck_data['field_last_name_value']));
  $node -> field_person_website[0] = array('url' => $cck_data['field_web_site_url']);
  $node -> field_person_institution[0] = array('value' => $cck_data['field_affiliation_value']);
  $node -> field_person_title[0] = array('value' => $cck_data['field_title_value']);
}

function psrimport_book(&$node, $old_nid, $table){

}
function psrimport_opportunity(&$node, $old_nid, $table){

}
function psrimport_psr_resource(&$node, $old_nid, $table){

}

function psrimport_faq(&$node, $old_nid, $table){

}
function psrimport_survey_news(&$node, $old_nid, $table){

}
function psrimport_project_issue(&$node, $old_nid, $table){

}

function psrimport_education(&$node, $old_nid, $table){

}

function psrimport_story(&$node, $old_nid, $table){

}

function psrimport_article(&$node, $old_nid, $table){
  //no cck fields to retreive
  return;

}



/**
 * Implementation of hook_vsite_vocabulary_default()
 */
function psrimport_vsite_vocabulary_default(){

  $vocabs = psrimport_vocabulary_defaults();

  //get the vocab data
  db_set_active('psrd5');

  foreach ($vocabs as $old_vid => $new_type){    //Import Vocabs
    $res = db_fetch_object(db_query("SELECT * FROM {vocabulary} WHERE vid = %d LIMIT 1", $old_vid));

    $tax[] = array(
    'name' => $res -> name,
    'content_types' => array($new_type => $new_type),
    'properties' => array (
    // 'tags' => 1,
    'description' =>  $res -> description,
    'help' =>  $res -> description,
    ),
    'terms' => psrimport_get_terms($old_vid),
    );

  }
  db_set_active('default');
  return $tax;
}

function psrimport_get_terms($old_vid){
  //get the vocab data
  db_set_active('psrd5');

  $term_data = array();
  //get all terms to merge into default vocab
  $res = db_query("SELECT * FROM {term_data} WHERE vid = %d", $old_vid);
  while ($data = db_fetch_object($res)){
    $term_data[] = array(
    'name' => $data -> name,
    'description' => $data -> description,
    'properties' => array (),
    );
  }
  return $term_data;
}

/**
 * Implementation of hook_nodeapi()
 */
function psrimport_nodeapi(&$node, $op){
  switch ($op) { 
    case 'insert':  
      //add node to og
      if (!vsite_get_vsite()){        
       psrimport_node_to_og($node -> nid);
      }
      break;     
  }
}


