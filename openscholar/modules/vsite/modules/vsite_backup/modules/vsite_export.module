<?php
/**
 * @file
 * Code for Open Scholar Vsite Export module, providing Vsite export functions.
 */


/**
 * @file vsite_export.module
 *
 */


/*****************************************************************************
 HOOKS
******************************************************************************/

/*****************************************************************************
 CALLBACKS
******************************************************************************/

/*****************************************************************************
 FORMS
******************************************************************************/

/*****************************************************************************
 INTERNAL
******************************************************************************/

/*****************************************************************************
 THEME
******************************************************************************/

/*****************************************************************************
 API
******************************************************************************/

/**
 * Function to return exportables related to a Vsite.
 *
 *
 *
 */
function vsite_export_get_vsite_exportables($vsite = NULL) {

  // If Vsite context is supplied, set it.
  if (isset($vsite)) {

    if (is_numeric($vsite)) { // NID
      $og_context = og_context('node', node_load($vsite));
    }
    else { // Node object
      $og_context = og_context('node', node_load($vsite->nid));
    }

  }
  // No Vsite context supplied, get it.
  else {

    $og_context = og_context();

  }

  // Obtain entity types used by OG.
  $vsite_entity_types = og_get_all_group_content_entity();

  // Get Vsite Node and Group Context
  $gid = $og_context['gid'];
  $nid = $gid;

  $exportables = array();

  // Set Vsite node as first in array.
  // TODO Use according to Hoyle group_type name here.
  $exportables['vsite'] = array('entity_type' => 'node', 'group_type' => 'vsite node', 'nid' => $nid);

  foreach ($vsite_entity_types as $key => $value) {

    // Get Nodes
    $og_contents = db_select('og_membership', 'ogm')
      ->fields('ogm', array('etid', 'type', 'entity_type'))
      ->condition('ogm.gid', $gid, '=')
      ->condition('ogm.entity_type', $key, '=') // 'node'
      ->execute()->fetchAll();

    foreach ($og_contents as $k => $v) {
     $exportables[$key][] = array('entity_type' => $v->entity_type, 'group_type' => $v->type, 'entity_id' => $v->etid);
    }

  }

  // TODO Registrations not getting pulled in?  - Per requirements, not needed.

  // TODO How about feeds? importers?

// separate function?
  // TODO Taxonomy vocabulary - get whole vocab, vid and machine name... per Vsite.
  // TODO Taxonomy vid for global organizations vocabulary
  if (module_exists('og_vocab')) {
    $group_vocabs = og_vocab_relation_get_by_group('node', $gid);
    foreach ($group_vocabs as $vk => $vv) {
      $exportables['taxonomy'][] = array('group_type' => $vv->group_type, 'gid' => $vv->gid, 'vid' => $vv->vid);
    }
  }

// separate function?
  // TODO Contents of spaces_overrides table.

  // TODO Roles
  // TODO User's roles.


  // TODO TOKENIZE IDs so referential entities can be re-mapped together at import.
    // {vsite_backup_mappings}
    // - entity type
    // - entity bundle
    // - entity original id
    // - New id

  // EXPORTABLES ARRAY
  // vsite
  // node
  // file
  // user
  // taxonomy

// global_org_taxonomy - Vocabulary ID of the global Organizations vocabulary
// spaces_overrides table for the site - select * from spaces_overrides where id = <vsite nid>;
// global_user_roles
// user_og_roles
// vsite_layout_block - select * from vsite_layout_block_table where sid = <vsite nid>;
// biblio_contributors - just let them be created during node save if they do not exist
// field_collections - Field Collections - think field_department_school is the only one
//  - check for field collections to export
//  - do from export submit? or process during a swipe through cron? tokenized keys will count here
// DELAY: feed_importers - Feed Importers (used to create feed items, and shown in the news import interface)
// DELAY: Redirects - We will need to copy over redirect entries?
//    - Redirects: I don't know. We should ask the clients.


// GATHER DURING CRON:
//URL aliases for nodes, vocabs/terms and users

  return $exportables;
}



/*****************************************************************************
 DEVELOPER NOTES
******************************************************************************/

// TODO UUID ?????????

// TODO function to queue response from vsite_export_get_vsite_exportables() into cron under the vsite

// TODO Cron processing of queue.
  // TODO secure download build location.
  // TODO process exportables from queue into RESTFUL representations
  // TODO stream to JSON
    // TODO Library module?
  // TODO stream to XML
    // TODO Library module?
  // TODO saving files.


/* Collect and Return
X Vsite node
x Users and their url aliases
x All nodes associated with site and their url aliases
x All files associated with site
All vocabs and taxonomy terms for a site and their url aliases
Vocabulary ID of the global Organizations vocabulary
Contents of spaces_overrides table for the site
  - select * from spaces_overrides where id = <vsite nid>;
Feed Importers (used to create feed items, and shown in the news import interface)
Permission sets for all roles, custom or not
Which users get which roles


EXTRAS to collect and return

vsite_layout_block table
  - NIX There is no vsite_layout_block table. It's stored in spaces_overrides. ... table exists?
  - select * from vsite_layout_block_table where sid = <vsite nid>;

biblio_contributors - just let them be created during node save if they do not exist

URL aliases for nodes, vocabs/terms and users

Field Collections - think field_department_school is the only one
  - check for field collections to export
  - do from export submit? or process during a swipe through cron? tokenized keys will count here

Feed Importers and Feed Items.... Do we need these? I think the feed items can def be skipped and maybe the feed importers as well.
Feed Importers and Feed Items: I think people will expect them to be included, and would want them so they can layout their site accurately.

- HOLD - Redirects - We will need to copy over redirect entries?
  - Redirects: I don't know. We should ask the clients.

X Event Registration Information
  - Event Registration: No. There's really no need, and it would cause registrants to receive multiple e-mails.


X - I say we throw away all revision info
  - revision info: We don't keep it anyway, do we?

X - I say we throw away all drupal comments
  - comments: I don't think anyone uses it, but yes, toss it.



RESTFUL:

Using programmatically: https://github.com/RESTful-Drupal/restful/wiki/Using-the-API-within-Drupal

$handler = restful()
  ->getResourceManager()
  ->getPlugin('pictures:1.0');

$get_result = restful()
  ->getFormatterManager()
  ->format($handler->doGet());

$result = json_decode($get_result);


*/

// Get Users -- Keeping this. We may want to use this anyway, as it allows for
// filtering based on OG membership state: To obtain only active, pending or
// blocked users, you can put 'members__1', 'members__2' or 'members__3' in
// place of 'members', like in this example:
//$uids = og_get_group_members_properties($vsite_node, array(), 'members__' . OG_STATE_ACTIVE, 'node'); // Only active users.
