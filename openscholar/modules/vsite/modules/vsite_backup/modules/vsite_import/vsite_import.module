<?php
/**
 * @file
 * Code for Open Scholar Vsite Import module, providing import UI.
 */


/**
 * @file vsite_import.module
 *
 */

define('VSITE_IMPORT_DIRECTORY_NAME', 'vsite-imports');

/*****************************************************************************
HOOKS
 ******************************************************************************/

/**
 * Implements hook_permission().
 *
 * @return array
 */
function vsite_import_permission() {
  return array(
    'administer vsite import' => array(
      'title' => t('Administer Vsite Import'),
      'description' => t('Access Vsite Import admin pages.'),
    ),
  );
}

/**
 * Implements hook_menu()
 *
 * @return array
 */
function vsite_import_menu() {
  $items = array();
  $items['admin/config/vsite-import'] = array(
    'title' => 'Vsite Import',
    'description' => 'Allows administrators to manage Vsite Imports',
    'weight' => -30,
    'page callback' => 'drupal_get_form',
//    'page arguments' => array('vsite_import_admin_settings_form'),
    'access arguments' => array('administer vsite import'),
  );

  $items['admin/config/vsite-import/manage'] = array(
    'title' => 'Vsite Import',
    'description' => 'Allows administrators to manage Vsite Imports',
    'page callback' => 'vsite_import_page',
    'access arguments' => array('administer vsite import'),
    'weight' => -10,
  );

  return $items;
}

/*****************************************************************************
CALLBACKS
 ******************************************************************************/

/**
 * Custom page callback to render configuration form along with associated
 * import views.
 *
 * @return string
 */
function vsite_import_page(){

  $form = drupal_get_form('vsite_import_form');

  $output = render($form);

  return $output;
}

/*****************************************************************************
FORMS
 ******************************************************************************/

/**
 * Implements hook_form()
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function vsite_import_form($form, &$form_state) {

  // This is the first form element. It's a textfield with a label, "Name"

  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Vsite Import File'),
    '#description' => t('Upload the Vsite Export file'),
  );

  $form['clone'] = array(
    '#title' => t('Clone Vsite'),
    '#type' => 'checkboxes',
    '#description' => t('Create a clone of an existing vsite under a new name.'),
    '#options' => drupal_map_assoc(array(t('Clone'))),
  );

  $form['name'] = array(
    '#title' => t('Vsite Namespace'),
    '#type' => 'textfield',
    '#description' => t('The name of the new Vsite to avoid conflicts with the site being cloned.'),
    '#size' => 60,
    '#maxlength' => 125,
    '#required' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="clone[Clone]"]' => array(
          'checked' => TRUE
        ),
      ),
      'required' => array(
        ':input[name="clone[Clone]"]' => array(
          'checked' => TRUE
        ),
      ),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Implements hook_form_validate()
 *
 * @param $form
 * @param $form_state
 */
function vsite_import_form_validate($form, &$form_state)
{

  $file = file_save_upload('file', array(
    'file_validate_extensions' => array('tar gz'), // Validate extensions.
  ));
  // If the file passed validation:
  if ($file) {
    $destination_folder = vsite_import_destination_folder($file);
    file_prepare_directory($destination_folder, FILE_CREATE_DIRECTORY);
    // Move the file, into the Drupal file system
    if ($file = file_move($file, $destination_folder)) {
      // Save the file for use in the submit handler.
      $form_state['storage']['file'] = $file;
    } else {
      form_set_error('file', t('Failed to write the uploaded file to the site\'s file folder.'));
    }
  } else {
    form_set_error('file', t('No file was uploaded.'));
  }
}

/**
 * Implements hook_form_submit()
 *
 * @param $form
 * @param $form_state
 */
function vsite_import_form_submit($form, &$form_state) {

  $file = $form_state['storage']['file'];
  // We are done with the file, remove it from storage.
  unset($form_state['storage']['file']);
  // Make the storage of the file permanent
  $file->status = FILE_STATUS_PERMANENT;
  // Save file status.
  $file = file_save($file);

  // Get location of import file
  $destination_folder = vsite_import_destination_folder($file);
  // Decompress and Untar the file
  $p = new PharData(drupal_realpath($file->uri));
  $p->decompress(); // creates /path/to/my.tar
  $p->extractTo(drupal_realpath($destination_folder));

  $json_files = array();
  foreach (glob(drupal_realpath($destination_folder) . "/*.json") as $json) {
    $json_files[] = $json;
  }

  $batch = array(
    'title' => t('Importing'),
    'finished' => 'vsite_import_finished_callback',
  );

    if ( $handle = fopen($json_files[0], 'r') ) {
      while ( $line = fgets($handle) ) {
        $batch['operations'][] = array('_vsite_import_import_line', array($json_files[0], $form_state['values']['clone']['Clone'], $line));
      }
    }
    fclose($handle);

  batch_set($batch);
}

/*****************************************************************************
INTERNAL
 ******************************************************************************/
/**
 * Generate a destination folder for the file being imported
 *
 * @param $file
 * @return string
 */
function vsite_import_destination_folder($file){

  $filename = explode('.', $file->filename);
  $foldername = $filename[0];
  $destination = 'private://' . VSITE_IMPORT_DIRECTORY_NAME . '/';
  $destination_folder = $destination . $foldername;

  return $destination_folder;

}

/**
 * Process a single line.
 *
 * @param $filepath String Path to file
 * @param $clone Boolean Determines whether the site is a clone or a restore. 1=clone 0=restore
 * @param $line String The line to be parsed
 * @param $context Batch API Context
 */
function _vsite_import_import_line($filepath, $clone, $line, &$context) {

}
/*****************************************************************************
THEME
 ******************************************************************************/

/*****************************************************************************
API
 ******************************************************************************/

/*****************************************************************************
DEVELOPER NOTES
 ******************************************************************************/




/**
 * Implement hook_menu()
 */
/*
function vsite_import_menu() {
  $items['admin/content/csv_import'] = array(
    'title' => 'Import CSV',
    'description' => 'Import content from a <abbr title="Comma Separated Values">CSV</abbr> or <abbr title="Tab Separated Values">TSV</abbr> file.',
    // 'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vsite_import_form'),
//  'file' => 'vsite_import.admin.inc',
  );
  return $items ;
}
*/

/**
 * Build a form to upload CSV to.
 */
/*
function vsite_import_form() {
  $form['#attributes'] = array(
    'enctype' => 'multipart/form-data'
  );
  $form['csvfile'] = array(
    '#title' => t('CSV File'),
    '#type'  => 'file',
    '#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', array('!max_size' => format_size($max_size))) : '',
  ) ;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Commence Import'),
  ) ;
  $form['#validate'] = array(
    'vsite_import_validate_fileupload',
    'vsite_import_form_validate',
  ) ;
  return $form ;
}
*/

/**
 * Validate the file upload. It must be a CSV, and we must
 * successfully save it to our import directory.
 */
/*function vsite_import_validate_fileupload(&$form, &$form_state) {
  $validators = array(
    'file_validate_extensions' => array( 'csv CSV' ),
  ) ;
  if ( $file = file_save_upload('csvfile', $validators, 'temporary://') ) {
    // The file was saved using file_save_upload() and was added to
    // the files table as a temporary file. We'll make a copy and let
    // the garbage collector delete the original upload.
    $csv_dir = 'temporary://csvfile';
    $directory_exists = file_prepare_directory($csv_dir, FILE_CREATE_DIRECTORY);
    if ($directory_exists) {
      $destination = $csv_dir .'/' . $file->filename;
      if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
        $form_state['values']['csvupload'] = $destination;
      }
      else {
        form_set_error('vsite_import', t('Unable to copy upload file to !dest', array('!dest' => $destination)));
      }
    }
  }
}*/

/**
 * Validate the upload. Ensure that the CSV looks something like we
 * expect it to.
 */
/*
function vsite_import_form_validate(&$form, &$form_state) {
  if ( isset( $form_state['values']['csvupload'] ) ) {
    if ( $handle = fopen($form_state['values']['csvupload'], 'r') ) {
      $line_count = 1 ;
      $first = TRUE ;
      if ( $line = fgetcsv($handle, 4096) ) {

        // Validate the uploaded CSV here.
        
        // The example CSV happens to have cell A1 ($line[0]) as
        // below; we validate it only.
         
        // You'll probably want to check several headers, eg:
        //   if ( $line[0] == 'Index' || $line[1] != 'Supplier' || $line[2] != 'Title' )
        // if ( $line[0] != 'Example CSV for vsite_import.module - http://github.com/xurizaemon/vsite_import' ) {
        //   form_set_error('csvfile', t('Sorry, this file does not match the expected format.')) ;
        // }
      }
      fclose($handle);
    }
    else {
      form_set_error('csvfile', t('Unable to read uploaded file !filepath', array('!filepath' => $form_state['values']['csvupload'])));
    }
  }
}
*/

/**
 * Handle form submission. Read the CSV into a set of batch operations
 * and fire them off.
 */
/*
function vsite_import_form_submit(&$form, &$form_state) {
  $batch = array(
    'title' => t('Importing CSV ...'),
    'operations' => array(),
    'init_message' => t('Commencing'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => 'vsite_import_import_finished',
  ) ;
  if ( isset( $form_state['values']['csvupload'] ) ) {
    if ( $handle = fopen($form_state['values']['csvupload'], 'r') ) {
      $batch['operations'][] = array('_vsite_import_remember_filename', array( $form_state['values']['csvupload'] ) ) ;
      $line_count = 1 ;
      $first = TRUE ;
      $line = fgetcsv($handle, 4096);
      while ( $line = fgetcsv($handle, 4096) ) {

         // we use base64_encode to ensure we don't overload the batch
         // processor by stuffing complex objects into it

        $batch['operations'][] = array('_vsite_import_import_line', array(array_map('base64_encode', $line)));
      }
      fclose($handle);
    } // we caught this in vsite_import_form_validate()
  } // we caught this in vsite_import_form_validate()
  batch_set($batch);
}
*/

/**
 * Handle batch completion.
 */
/*function vsite_import_import_finished($success, $results, $operations) {
  if ( !empty($results['failed_rows']) ) {
    $dir = 'public://vsite_import' ;
    $targs = array();
    if (file_prepare_directory( $dir, FILE_CREATE_DIRECTORY ) ) {
      $csv_filename = 'failed_rows-'. basename($results['uploaded_filename']); // we validated extension on upload
      $csv_filepath = $dir .'/'. $csv_filename;
      $targs = array(
        '!csv_url' => l(check_plain($csv_filename), file_create_url($csv_filepath)),
        '%csv_filename' => $csv_filename,
        '%csv_filepath' => $csv_filepath,
      ) ;
      if ( $handle = fopen($csv_filepath, 'w+') ) {
        foreach( $results['failed_rows'] as $failed_row ) {
          fputcsv($handle, $failed_row);
        }
        fclose($handle);
        drupal_set_message(t('Some rows failed to import. You may download a CSV of these rows: !csv_url', $targs), 'error');
      }
      else {
        drupal_set_message(t('Some rows failed to import, but unable to write error CSV to %csv_filepath', $targs), 'error');
      }
    }
    else {
      drupal_set_message(t('Some rows failed to import, but unable to create directory for error CSV at %csv_directory', $targs), 'error');
    }
  }
  return t('The CSV import has completed.');
}*/

/**
 * Remember the uploaded CSV filename
 *
 * @TODO is there a better way to pass a value from inception of the
 * batch to the finished function?
 */
/*function _vsite_import_remember_filename($filename, &$context) {
  $context['results']['uploaded_filename'] = $filename ;
}*/
