<?php

/**
 * Vsite public access field.
 */
define('VSITE_ACCESS_FIELD', 'group_access');

/**
 * Define group access
 */
// Publicly avalible and Indexed
define('VSITE_ACCESS_PUBLIC', 0);
// Temporarially Private, access restricted to logged in users. Files Public.
define('VSITE_ACCESS_PRIVATE', 1);
// Public and accesible but in ulisted/indexed.
define('VSITE_ACCESS_UNINDEXED', 2);
// Perminantly Private, access restricted to logged in users. All files Private.
define('VSITE_ACCESS_INTRANET_PRIVATE', 3);

/**
 * Implements hook_views_api().
 */
function vsite_access_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'vsite_access'),
  );
}

/**
 * Add additional lines to a site's robots.txt file.
 *
 * @return
 *   An array of strings to add to the robots.txt.
 */
function vsite_access_robotstxt() {
  global $base_url;

  $robots_settings = variable_get('vsite_access_unindexed_sites', array());
  $host = parse_url($base_url, PHP_URL_HOST);
  if (isset($robots_settings[$host])) {
    return $robots_settings[$host];
  }
}

/**
 * Implements hook_node_access().
 */
function vsite_access_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);

  // Handle access to Group Content
  if (og_is_group_content_type('node', $type)) {

    if ($op != 'view' || !($vsite = spaces_get_space())) {
      // If we are trying to create content outside a group and do not have permission to do so
      if ($op == 'create' && og_is_group_content_type('node', $type) && !user_access('create ' . $type . ' content', $account)) {
        return NODE_ACCESS_DENY;
      }

      // Do nothing
      return NODE_ACCESS_IGNORE;
    }

    // When trying to view group content, check the privacy of the site.
    if (is_object($vsite->group) && !og_is_group_content_type('node', $vsite->group->type) && !node_access('view', $vsite->group, $account)) {
      return NODE_ACCESS_DENY;
    }

    return NODE_ACCESS_IGNORE;
  }

  // Handle access to groups if this is a existing group node.
  if (!is_string($node) && og_is_group_type('node', $type) && isset($node->nid)) {
    $wrapper = entity_metadata_wrapper('node', $node);

    if (!empty($wrapper->{VSITE_ACCESS_FIELD})) {
      switch ($wrapper->{VSITE_ACCESS_FIELD}->value()) {
        case VSITE_ACCESS_INTRANET_PRIVATE:
        case VSITE_ACCESS_PRIVATE:
          // Private group.
          if (!user_access('administer group') && !og_is_member('node', $node->nid, 'user', $account)) {
            // They are not a member, deny access
            return NODE_ACCESS_DENY;
          }
          break;

        case VSITE_ACCESS_PUBLIC:
        case VSITE_ACCESS_UNINDEXED:
        default:
          return NODE_ACCESS_IGNORE;
      }
    }
  }
}

/**
 * Implements hook_cp_settings().
 *
 * Add the vsite privacy/publicity form element to CP settings.
 */
function vsite_access_cp_settings() {
  $form = array();
  $space = spaces_get_space();

  if (!empty($space)) {
    // Gets the vsite_users_contact_form_anonymous variable.
    $wrapper = entity_metadata_wrapper('node', $space->group);

    $form['vsite_private'] = array(
      'group' => array(
        '#id' => 'privacy',
        '#title' => t('Privacy'),
        '#weight' => 10,
      ),
      'form' => array(
        '#type' => 'radios',
        '#title' => t('Site visibility'),
        '#default_value' => $wrapper->{VSITE_ACCESS_FIELD}->value(),
        '#options' => vsite_access_privacy_available_values(),
        '#description' => t('Choose who has access to view your site.'),
      ),
      'submit' => array(
        'vsite_access_cp_settings_node_submit',
      ),
    );
  }

  return $form;
}

/**
 * Submit callback for cp/settings form.
 *
 * Sets vsite_privacy value for the node.
 *
 * @see vsite_cp_settings()
 */
function vsite_access_cp_settings_node_submit($form, &$form_state) {
  // Get the current vsite.
  $space = spaces_get_space();
  // Get the vsite_privacy value.
  if (isset($form_state['values']['vsite_private']) && $space) {
    $wrapper = entity_metadata_wrapper('node', $space->group);
    $wrapper->{VSITE_ACCESS_FIELD}->set($form_state['values']['vsite_private']);
    $wrapper->save();
  }
}

/**
 * Return available privacy types.
 *
 * @return array $options
 *   An indexed array with constant values as keys, and string descriptions.
 */
function vsite_access_privacy_available_values() {
  // Provides short human-friendly labels for the different options.
  $options = array(
    VSITE_ACCESS_PUBLIC => t('Public on the web'),
    VSITE_ACCESS_UNINDEXED => t('Anyone with the link'),
    VSITE_ACCESS_PRIVATE => t('Invite only'),
    // @todo get private intranet working.
    //VSITE_ACCESS_INTRANET_PRIVATE => t('Private intranet'),
  );

  // Otherwise, formats a second row of descriptive text if verbose is TRUE.
  // Note: This text is to be displayed on the site register form.
  // @fixme Labels shouldn't contain a period at the end.
  // Once this function has the option to return just labels, vs. labels AND
  // descriptions, the period should be removed from the label-only return vals.
  $prefix = '. <br><span class="radio-description">';
  $suffix = '</span>';
  $descriptions = array(
    VSITE_ACCESS_PUBLIC => t('Anyone on the Internet can find and access. No sign-in required.'),
    VSITE_ACCESS_UNINDEXED => t('Anyone who has the link can access. Not listed in Google. No sign-in required.'),
    VSITE_ACCESS_PRIVATE => t('Only people explicitly granted permission can access. Sign-in required.'),
    // @todo get private intranet working.
    //VSITE_ACCESS_INTRANET_PRIVATE => t('If you select this then your site will be private forever.'),
  );

  // Adds the description and markup to each of the option labels.
  foreach ($descriptions as $option => $description) {
    if (isset($options[$option])) {
      $options[$option] .= $prefix . $description . $suffix;
    }
  }

  drupal_alter('vsite_access_privacy_values', $options);

  return $options;
}

/**
 * Implement hook_og_fields_info().
 */
function vsite_access_og_fields_info() {

  $items[VSITE_ACCESS_FIELD] = array(
    'type' => array('group'),
    'description' => t('Determine site privacy.'),
    // Private access can be done only on node entity.
    'entity' => array('node'),
    'field' => array(
      'field_name' => VSITE_ACCESS_FIELD,
      'no_ui' => TRUE,
      'type' => 'list_integer',
      'cardinality' => 1,
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => 'vsite_access_privacy_available_values'),
    ),
    'instance' => array(
      'label' => t('Site visibility'),
      'required' => TRUE,
      // Default to public.
      'default_value' => array(0 => array('value' => VSITE_ACCESS_PUBLIC)),
      'widget_type' => 'options_buttons',
      'view modes' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
      ),
    ),
  );

  return $items;
}

/**
 * Act on the save of the privacy setting
 */
function vsite_access_update_privacy_settings($group) {

  $wrapper = entity_metadata_wrapper('node', $group);
  $privacy = $wrapper->{VSITE_ACCESS_FIELD}->value();

  // Updates Robots.txt
  vsite_access_update_robots($group, $privacy);
}

/**
 * Update Robots.txt Settigs
 */
function vsite_access_update_robots($group, $privacy) {
  global $base_url;

  // Loads space.
  $vsite = vsite_get_vsite($group->nid);

  // Robots.txt Base Domain Settings.
  $domain_robots = variable_get('vsite_access_unindexed_sites');
  $base_host = parse_url(variable_get('purl_base_domain', $base_url), PHP_URL_HOST);
  $vsite_domain = $vsite->controllers->variable->get('vsite_domain_name');

  // If this site has a group domain, retrieves the Host.
  if ($vsite_domain) {
    $vsite_domain = parse_url($vsite_domain, PHP_URL_HOST);
  }

  if ($privacy > VSITE_ACCESS_PUBLIC) {
    // Does not index if the site is not public.
    // Adds dissallow for base_domain.
    $domain_robots[$base_host][$group->nid] = "Disallow: /{$vsite->group->purl}/";

    // Adds Disallow for group domain indexing.
    if ($vsite_domain && $vsite_domain != $base_host) {
      $domain_robots[$vsite_domain][$group->nid] = "Disallow: /{$vsite->group->purl}/";
    }

    // Dissallows custom domain indexing.
    $vsite->controllers->variable->set('robotstxt', "User-agent: *\nDisallow: /");
  }
  else {
    // Removes base_domain any indexing.
    if (isset($domain_robots[$base_host][$group->nid])) {
      unset($domain_robots[$base_host][$group->nid]);
    }

    // Removes and Group Domain indexing.
    if ($vsite_domain && $vsite_domain != $base_host && isset($domain_robots[$vsite_domain][$group->nid])) {
      unset($domain_robots[$vsite_domain][$group->nid]);
    }

    // Deletes any custom domain indexing.
    $vsite->controllers->variable->del('robotstxt');
  }

  // Saves robots changes.
  variable_set('vsite_access_unindexed_sites', $domain_robots);
}

/**
 * Implements hook_field_attach_insert().
 */
function vsite_access_field_attach_insert($entity_type, $entity) {
  if ($entity_type == 'node' && 'group' == vsite_get_type_from_bundle($entity->type)) {
    vsite_access_update_privacy_settings($entity);
  }
}

/**
 * Implements hook_field_attach_update().
 */
function vsite_access_field_attach_update($entity_type, $entity) {
  if ($entity_type == 'node' && 'group' == vsite_get_type_from_bundle($entity->type)) {
    vsite_access_update_privacy_settings($entity);
  }
}

