<?php

/**
 * @file
 * Enhances node path alias entry with automatic preview on forms.
 */

/**
 * Implements hook_menu().
 *
 * Provides a page for ajax to call so we can retrieve info from drupal.
 */
function pathauto_extra_menu() {
  $items['pathauto_extra/alias_js'] = array(
    'title' => 'Pathauto preview',
    'page callback' => 'pathauto_extra_alias_js',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Attaches javascript to node edit forms.
 */
function pathauto_extra_form_node_form_alter(&$form, $form_state, $form_id) {
  $form['#after_build'][] = 'pathauto_extra_node_form_after_build';

  drupal_add_js(drupal_get_path('module', 'pathauto_extra') . '/pathauto_extra.js');
}

/**
 * After build callback for node_form().
 *
 * Moves the path alias field to the top of the form, after title.
 */
function pathauto_extra_node_form_after_build($form) {

  $field_prefix = url('<front>', array('absolute' => TRUE));
  $form['path']['alias']['#field_prefix'] = "$field_prefix/";
  if (module_exists('vsite') && $purl = vsite_get_purl()) {
    if ($original = $form['path']['alias']['#value']) {
      $new = substr($original, strlen($purl) + 1);
      $form['path']['alias']['#value'] = $new;
    }
  }
  $form['title']['#description'] = t('<strong>Link URL:</strong> <em>No preview</em>');
  return $form;
}

/**
 * Page callback; provides ajax callback to generate preview.
 *
 * Gets the pattern for formatting urls for this node type,
 * then tries to apply it and returns expected url alias.
 */
function pathauto_extra_alias_js() {
  $path = _pathauto_extra_make_alias($_GET['gid'], $_GET['type'], $_GET['title'], $_GET['purl']);
  if ($path) {
    $json = array('status' => TRUE, 'data' => $path, 'prefix' => $_GET['prefix']);
  }
  else {
    $json = array('status' => FALSE, 'data' => NULL, 'prefix' => NULL);
  }

  drupal_json_output($json);
}

/**
 * Generates the path for this node before saving.
 */
function _pathauto_extra_make_alias($gid, $type, $title, $purl = '') {
  // Gets the pattern variable for this node type.
  $pattern = trim(variable_get('pathauto_node_' . $type . '_pattern', FALSE));
  if (empty($pattern)) {
    $pattern = trim(variable_get('pathauto_node_pattern', FALSE));
  }

  // If applicable, processes this pattern for tokens.
  if (isset($pattern) && strlen($pattern) > 0) {
    // Makes a bare-minimum simple node object to pass to pathauto function.
    $pattern = "[site:url]/$pattern";
    $node = (object)array(
      'title' => $title,
      'type' => $type,
      'spaces_og' => array('gid' => $gid),
    );

    module_load_include('inc', 'node', 'node.pages');
    node_object_prepare($node);
    $fake_nid = 12341234;
    $source = $purl ? "$purl/node/$fake_nid" : "node/$fake_nid";
    // Lets pathauto apply tokens to path given our fake node.
    module_load_include('inc', 'pathauto');
    $alias = pathauto_create_alias('node', 'return', $source, array('node' => $node), $node->type, $node->language);
    if (module_exists('vsite') && $purl) {
      if (strpos($alias, "$purl/") !== 0) {
        $alias = "$purl/$alias";
      }
    }
    pathauto_alias_uniquify($alias, $source, $node->language);
  }
  return $alias;
}

/**
 * Implements hook_preprocess_page().
 *
 * Adds token-friendly variables to page for pathauto_ajax.js to use.
 */
function pathauto_extra_preprocess_page(&$variables) {
  // Alters only node edit and node add forms.
  if (!$variables['page']['content']['system_main']['#node_edit_form']) {
    return;
  }

  // Initializes module-specific Drupal JS settings variables.
  $settings = array();

  // Only continues to process if we can find the node's type.
  if (isset($variables['page']['content']['system_main']['#node']->type)) {
    // Prepares this form for alias preview generation.
    $type = $variables['page']['content']['system_main']['#node']->type;
    $settings['pathauto_extra']['type'] = $type;
    $settings['pathauto_extra']['make_alias'] = TRUE;

    // Integrates with vsite module.
    if (module_exists('vsite')) {
      $vsite = vsite_get_vsite();
      if ($vsite->id) {
        // Stores vsite id (sid) as groups id (gid) for preview generation.
        $settings['pathauto_extra']['gid'] = $vsite->id;

        if ($purl = vsite_get_purl($vsite)) {
          // Absolute path to homepage includes purl for standard sites.
          $prefix = url('<front>', array('absolute' => TRUE));
          $shared = variable_get('vsite_domain_shared');
          $domain = variable_get('vsite_domain_name');
          if (!$domain || ($domain && $shared == 1)) {
            // Stores the purl value for preview generation.
            $settings['pathauto_extra']['purl'] = $purl;
            $settings['pathauto_extra']['remove_purl'] = 1;
            $prefix = substr($prefix, 0, -1 * strlen($purl));
          }
          $settings['pathauto_extra']['prefix'] = $prefix;
        }
      }
    }
  }

  // Adds necessary variables as javascript settings to the page.
  drupal_add_css(drupal_get_path('module', 'pathauto_extra') . "/pathauto_extra.css");
  drupal_add_js($settings, 'setting');
}

