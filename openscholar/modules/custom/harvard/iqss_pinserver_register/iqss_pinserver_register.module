<?php
// $Id$

include_once (drupal_get_path('module', 'vsite_register') . '/vsite_register.form.inc');

/**
 * Implements hook_menu_alter().
 */
function iqss_pinserver_register_menu_alter(&$items) {
  // Alters page callback
  $items['site/register']['page callback'] = 'iqss_pinserver_register_vsite_register_form_page';
  $items['site/register']['module'] = 'iqss_pinserver_register';
  $items['site/register']['access callback'] = 'iqss_pinserver_register_exists_access';
  $items['user/register']['page callback'] = 'iqss_pinserver_register_vsite_register_form_page';
  $items['user/register']['module'] = 'iqss_pinserver_register';
  $items['user/register']['access callback'] = 'iqss_pinserver_register_exists_access';

  // Removes page arguments and file values.
  $remove_values = array('page arguments', 'file');
  foreach ($remove_values as $val) {
    unset($items['site/register'][$val]);
    unset($items['user/register'][$val]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for vsite_register_form.
 */
function iqss_pinserver_register_form_vsite_register_form_alter(&$form, $form_state, $form_id) {
  // Attaches submit and validate callbacks
  $form['#submit'][] = 'iqss_pinserver_register_submit';
  $form['#validate'][] = 'iqss_pinserver_register_validate';

  // Loads additional field(s) if user has permission
  if (user_access('create vsite content on behalf')) {
    _iqss_pinserver_register_huid_field($form);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for vsite_users_profile_node_form.
 */
function iqss_pinserver_register_form_vsite_users_profile_node_form_alter(&$form, $form_state, $form_id) {
  if (!isset($form['buttons']['submit'])) {
    return;
  }

  // Overrides submit function from vsite_users to prevent 'home' redirect.
  $key = array_search('vsite_users_form_vsite_users_profile_node_submit', $form['buttons']['submit']['#submit']);
  if ($key) {
    $form['buttons']['submit']['#submit'][$key] = 'iqss_pinserver_register_vsite_users_profile_node_submit';
  }
}

/**
  * Access callback for /[site|user]/register
  */
function iqss_pinserver_register_exists_access() {
  // Just override vsite_vsite_exists_access() -- handle actual access check in
  // iqss_pinserver_register_vsite_register_form_page().
  return TRUE;
}

/**
 * Submit callback; overrides vsite_users.module to prevent 'home' redirect.
 */
function iqss_pinserver_register_vsite_users_profile_node_submit($form, &$form_state) {
  if (isset($form_state['redirect'])) {
    unset($form_state['redirect']);
  }

  // Customizes confirmation message for add/edit form
  drupal_get_messages($type = NULL, $clear_queue = TRUE);
  drupal_set_message(t('Your personal information has been saved.'));
}

/**
 * Validation callback; for vsite_register_form.
 */
function iqss_pinserver_register_validate($form, &$form_state) {
  // Checks if multiple sites is limited and if site already exists
  if ($uid && !user_access('create vsite content on behalf') && count(vsite_get_vsite_by_owner($uid)) >= variable_get('openscholar_vsites_per_user', 1)) {
    $commands[] = ctools_ajax_command_html('#submit-suffix', 'The web site cannot be created. Please fix the errors and try again.');
    ctools_ajax_render($commands);
  }
}

/**
 * Submit callback; for vsite_register_form.
 */
function iqss_pinserver_register_submit($form, $state) {
  global $user;

  //new user and vsite should have already been created, check to make sure the user information is present
  if (isset($_SESSION['pinserver']['huid']) && !empty($_SESSION['pinserver']['huid']) && isset($user->uid) && !empty($user->uid)) {
    // Add user to database.
    iqss_pinserver_register_add_row($user->uid, $_SESSION['pinserver']['huid']);

    if (in_array('anonymous user', $user->roles) && !user_access('create vsite content on behalf')) {
      // log user in
      // Update the user table timestamp noting user has logged in.
      // This is also used to invalidate one-time login links.
      $user->login = time();

      db_update('users')->fields(array('login' => $user->login))->condition('uid', $user->uid, '=')->execute();
    }
  }
  else {
    error_log('WARNING: The module could not insert the new user information into the database because the user information was not supplied.');
    return;
  }

  // Removes pinserver session vars.
  pinserver_remove_session();
}

/**
 * Checks if HUID is numeric and is a new unique ID number.
 *
 * @param int $huid
 *   The HUID to validate
 *
 * @return array $errors
 *   Empty if no errors.
 */
function iqss_pinserver_register_validate_huid($huid) {
  $errors = array();

  // Empty string is okay.
  if ($huid == '') {
    return $errors;
  }

  // Verifies HUID is numeric.
  if (!is_numeric($huid)) {
    $errors[] = t('The @harvard_id must be numeric.', array('@harvard_id' => 'Harvard ID'));
  }

  // Verifies HUID does not already exist in database.
  elseif (iqss_pinserver_register_get_uid_from_huid($huid)) {
    $errors[] = t('The @harvard_id you have entered already exists in the database.', array('@harvard_id' => 'Harvard ID'));
  }

  return $errors;
}

/**
 * AJAX callback; for huid field
 */
function iqss_pinserver_register_ajax_validation(&$form, &$state) {
  // clear this to avoid having notices clutter the form during ajax validation
  drupal_get_messages();
  $elem = $state['triggering_element']['#name'];
  return theme('vsite_register_form_errors', array(
    'name' => $elem,
    'errors' => iqss_pinserver_register_validate_huid($state['values']['huid']),
  ));
}

/**
 * Menu callback; provides vsite_register_form for authorized users.
 */
function iqss_pinserver_register_vsite_register_form_page() {
  global $user;

  // Handle users logged in already.
  if ($user->uid) {
    return iqss_pinserver_register_redirect($user->uid);
  }

  // Sends user to pinserver if not logged-in locally or via the pinserver
  if (!pinserver_check_status()) {
    return pinserver_redirect();
  }

  // Redirects pinserver-logged-in user if they don't own a vsite.
  $uid = iqss_pinserver_register_get_uid_from_huid();
  return iqss_pinserver_register_redirect($uid);
}


/**
  * Check if user can create vsites or not, and redirect appropriately.
  */
function iqss_pinserver_register_redirect($uid) {
  $vsites = vsite_get_vsite_by_owner($uid);

  if (vsite_vsite_exists_access($vsites)) {
    // Can create new vsites; provide form to create a new vsite.
    return drupal_get_form('vsite_register_form');
  }
  else if (count($vsites)) {
    // Can't create new sites; redirect user to existing vsite(s).
    return iqss_pinserver_register_login_redirect($uid, $vsites);
  }

  return drupal_goto('node');  // This shouldn't happen.
}


/**
 * Logs in the pinserver user and redirects to any passed destination.
 */
function iqss_pinserver_register_login_redirect($uid, $vsites) {
  global $user;

  if ($uid) {
    // Logs the user in based on the HUID->UID association.
    $user = user_load(array('uid' => $uid));
    $user->login = time();
    db_update('users')->fields(array('login' => $user->login))->condition('uid', $user->uid, '=')->execute();
  }

  if (isset($_GET['redirect'])) {
    // Redirects user to requested private file (or other private destination).
    drupal_goto(preg_replace('|^/|', '', $_GET['redirect']));
  }

  // Redirects user to existing vsite(s).
  $count = count($vsites);

  drupal_get_messages();  // Clear message queue.
  drupal_set_message(t('You have already registered your maximum number of !count !websites.', array(
    '!count' => "<i>$count</i>",
    '!websites' => t('website' . ($count == 1 ? '' : 's')),
  )));

  if (count($vsites) == 1) {
    drupal_goto($vsites[0]->get_absolute_url());
  }
  else {
    drupal_goto('user');
  }
}

/**
 * Writes a record to the table.
 *
 * @param int $uid
 * @param int $huid
 *
 * @return bool
 *   TRUE if database update was run.
 */
function iqss_pinserver_register_add_row($uid, $huid) {
  $object           = new stdClass();
  $object->uid      = (int)$uid;
  $object->huid     = (int)$huid;
  $object->reg_time = time();
  if (!db_query("SELECT uid FROM {iqss_pinserver_register} WHERE huid = $huid")->fetchField()) {
    drupal_write_record('iqss_pinserver_register', $object);
    return TRUE;
  }

  return FALSE;
}

/**
 * Checks if user exists in pinserver table and returns uid
 *
 * @param int $huid
 *
 * @return user id
 */
function iqss_pinserver_register_get_uid_from_huid($huid = NULL) {
  $id = ($huid) ? $huid : $_SESSION['pinserver']['huid'];

  if ($id) {
    return db_query("SELECT uid FROM {iqss_pinserver_register} WHERE huid = :huid", array(':huid' => $id))->fetchField();
  }

  return FALSE;
}

/**
  * Implements hook_user_logout().
  */
function iqss_pinserver_register_user_logout($account) {
  pinserver_remove_session();
}

/**
  * Implements hook_user_delete().
  */
function iqss_pinserver_register_user_delete($account) {
  db_delete('iqss_pinserver_register')->condition('uid', (int)$account->uid)->execute();
}

/**
 * Returns the relative path a user should be redirected to on authentication.
 *
 * @return string $path
 */
function iqss_pinserver_register_pinserver_landing_path() {
  global $user;
  $vsites = vsite_get_vsite_by_owner($user->uid);

  if (!vsite_vsite_exists_access($vsites)) {
    $path = (!$vsites || (count($vsites) > 1) ? 'user' : $vsites[0]->get_absolute_url());
  }
  else {
    $path = 'site/register';
  }

  return $path;
}

/**
 * Returns the Harvard ID (HUID) of linked to the given Drupal user id (UID).
 */
function iqss_pinserver_register_get_huid($uid) {
  return db_query("SELECT huid{iqss_pinserver_register} WHERE uid = %d", (int)$uid)->fetchField();
}

/**
 * Attaches a new HUID textfield element to the given form.
 */
function _iqss_pinserver_register_huid_field(&$form) {
  $form['huid'] = array(
    '#type' => 'textfield',
    '#title' => t('Harvard ID'),
    '#size' => 35,
    '#weight' => 10,
    '#required' => FALSE,
    '#description' => t('Optional: Enter the @huid of the web site owner', array('@huid' => 'Harvard ID')),
    '#ajax' => array(
      'callback' => 'iqss_pinserver_register_ajax_validation',
      'wrapper' => 'huid-errors',
    ),
    '#field_suffix' => theme('vsite_register_form_errors', array('name' => 'huid')),
  );
}
