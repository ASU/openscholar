<?php
// $Id$

/**
 * @file
 * Code for the OS Bio/CV feature.
 *
 * @see ./profiles/openscholar/modules/os/modules/os_boxes/plugins/os_boxes_bio/os_boxes_bio.inc
 */

include_once 'os_biocv.features.inc';

/**
 * Implements hook_os_app_info().
 */
function os_biocv_os_app_info() {
  $apps = array();

  $apps['os_biocv'] = array(
    'path' => 'biocv',
    'nodetypes' => array(
      'bio',
      'cv',
    ),
    'browse_pages' => array(
      'bio' => FALSE,
      'cv' => FALSE,
    ),
  );

  return $apps;
}

/**
 * Implements hook_menu().
 */
function os_biocv_menu() {
  $items = array();
  $items['biocv'] = array(
    'title' => 'Bio',
    'page callback' => '_os_biocv_bio_page_contents',
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'os_biocv'),
    'menu_name' => 'primary-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['biocv/bio'] = array(
    'title' => 'Biography',
    'page callback' => '_os_biocv_bio_page_contents',
    'access callback' => '_os_biocv_show_local_tasks',
    // Add to features menu. If added to "primary-menu", it appears in CP.
    'menu_name' => 'features',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['biocv/cv'] = array(
    'title' => 'Curriculum Vitae',
    'page callback' => '_os_biocv_cv_page_contents',
    'access callback' => '_os_biocv_show_local_tasks',
    // Add to features menu. If added to "primary-menu", it appears in CP.
    'menu_name' => 'features',
    'type' => MENU_LOCAL_TASK,
  );
  // Named like 'features/$feature_name' by features/spaces convention.
  $items['features/os_biocv'] = array(
    'title' => 'Bio/CV Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_biocv_settings'),
    'access callback' => '_os_biocv_access_admin',
    'type' => MENU_CALLBACK,
    'file' => 'os_biocv.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_form_alter() for cv_node_form
 */
function os_biocv_form_cv_node_form_alter(&$form, &$form_state, $form_id) {
  $settings_link = l(t('Bio/CV settings'), 'features/os_biocv');
  $form['field_biocv_pdf_upload'][LANGUAGE_NONE][0]['#media_options']['global']['override_extensions'] = true;
}

/**
 * Implements hook_form_FORM_ID_form_alter() for bio_node_form
 */
function os_biocv_form_bio_node_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = '_os_biocv_node_form_submit';
}

/**
 * Form submit callback; redirects to "biocv".
 */
function _os_biocv_node_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'biocv';
}

/**
 * Implements hook_node_access().
 *
 * Denies users from creating more than 1 Bio or CV node.
 * Site-wide for single tenant, or per-vsite on multi-tenant.
 */
function os_biocv_node_access($node, $op, $account) {
  if ($op !== 'create') {
    return NODE_ACCESS_IGNORE;
  }
  $type = is_string($node) ? $node : $node->type;
  if (!in_array($type, array('bio', 'cv'))) {
    return NODE_ACCESS_IGNORE;
  }
  $node_exists = _os_biocv_get_first_node($type);
  if ($node_exists === FALSE) {
    return NODE_ACCESS_IGNORE;
  }
  return NODE_ACCESS_DENY;
}

/**
 * Implements hook_process_hook() for node.
 *
 * Removes the username from $submitted info on blog type nodes.
 */
function os_biocv_process_node(&$vars) {
  if ($vars['type'] == 'cv' && $vars['view_mode'] != 'title') {
    // Build the submitted variable used by default in node templates
    $last_updated = format_date($vars['changed'], 'custom', 'F j, Y');
    $title_suffix = '<p class="submitted">' . t('(Last updated: @time)', array('@time' => $last_updated)) . '</p>';

    if ($vars['view_mode'] == 'slide_teaser') {
      $vars['content']['body'][0]['#markup'] .= $title_suffix;
    } else {
      $vars['title_suffix'] = $title_suffix;
    }
  }

  elseif ($vars['type'] == 'bio' && empty($vars['show_title']) && !in_array($vars['view_mode'], array('title', 'slide_teaser'))) {
    // hides the title
    $vars['page'] = true;
  }
}

/**
 * Implements hook_os_add_new_links_alter()
 *
 * Removes "Add new > Bio" link from "Add new" contextual links if Bio exists.
 */
function os_biocv_os_add_new_links_alter(&$links) {
  if (!isset($links['bio']) && !isset($links['cv'])) {
    return;
  }
  $bio_exists = _os_biocv_bio_exists();
  if ($bio_exists && isset($links['bio'])) {
    unset($links['bio']);
  }
  $cv_exists = _os_biocv_cv_exists();
  if ($cv_exists && isset($links['cv'])) {
    unset($links['cv']);
  }
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_biocv_vsite_og_node_type_info() {
  return array(
    'bio' => 'group content',
    'cv' => 'group content',
  );
}

/**
 * Implements hook_vsite_admin_link().
 *
 * Adds the "(config-gear) > Edit CV" link when admin view Bio node.
 */
function os_biocv_vsite_admin_link($type, $object) {
  $links = array();

  // Only proceeds for admin links when viewing Bio and CV exists.
  $cv_node = os_biocv_get_cv_node();
  if (!($type == 'node' && $object->type == 'bio' && $cv_node !== FALSE)) {
    return $links;
  }

  // Only proceeds if the current user can access the CV edit page.
  $path = "node/{$cv_node->nid}/edit";
  $item = menu_get_item($path);
  if (!($item && $item['access'])) {
    return $links;
  }

  $links['node-edit-cv'] = array(
    'title' => t('Edit CV'),
    'href' => $path,
    'attributes' => array(
      'class' => 'icon-edit',
    ),
    'query' => array(
      'destination' => $_GET['q'],
    ),
  );

  return $links;
}

/**
 * Finds the Bio of the user with the lowest NID value, FALSE if none.
 */
function os_biocv_get_bio_node() {
  return _os_biocv_get_first_node('bio');
}

/**
 * Finds the CV of the user with the lowest NID value, FALSE if none.
 */
function os_biocv_get_cv_node() {
  return _os_biocv_get_first_node('cv');
}

/**
 * Finds the node of the user with the lowest NID value of the given type.
 *
 * @return bool|object
 *   A Drupal node object in the current space, if found; otherwise FALSE.
 */
function _os_biocv_get_first_node($type = 'bio') {
  // Note that this OSNodeFieldQuery will filter the current space if
  // vsite module is enabled. Otherwise it leaves out that condition and will
  // tell us whether any published bio nodes exist on this installation at all.
  // In case there are multiple bio nodes, defaults to order by nid ASC.
  ctools_include('node', 'os');

  $query = new OSNodeFieldQuery($type);
  $query->propertyOrderBy('nid');

  $result = $query->execute();

  if (!isset($result['node']) || !sizeof($result['node'])) {
    return FALSE;
  }

  $item = array_shift($result['node']);
  $node = node_load($item->nid);
  return $node;
}

/**
 * Returns TRUE if Bio node exists.
 *
 * @see os_biocv_menu_alter()
 * @see os_biocv_os_add_new_links_alter()
 */
function _os_biocv_bio_exists() {
  $node = os_biocv_get_bio_node();
  return (bool)($node !== FALSE);
}

/**
 * Returns TRUE if CV node exists.
 *
 * @see os_biocv_menu_alter()
 * @see os_biocv_os_add_new_links_alter()
 */
function _os_biocv_cv_exists() {
  $node = os_biocv_get_cv_node();
  return (bool)($node !== FALSE);
}

/**
 * Page callback; renders a Bio node with optional CV link.
 */
function _os_biocv_bio_page_contents() {
  $output = array();

  // Optionally adds CV download link.
  if (!_os_biocv_show_local_tasks()) {
    $cv_node = os_biocv_get_cv_node();
    if ($cv_node) {
      $cv_filepath = _os_biocv_get_cv_filepath($cv_node);
      if ($cv_filepath) {
        $output['cv'] = array(
         '#markup' => "<h3 class='cv-direct-download'>".t("Download CV: ") . l('PDF', $cv_filepath) . "</h3>",
        );
        // Prompts admin user to edit CV PDF upload.
        if (_os_biocv_access_admin()) {
          //$edit_link = l(t('Remove or replace your CV'), "node/{$cv_node->nid}/edit");
          //$output['cv']['#markup'] .= $edit_link;
        }
      }
      // Prompts admin user to upload a CV PDF if they have a CV node without a PDF.
      else {
        //$upload_link = l(t('Upload a PDF do display as your CV'), "node/{$cv_node->nid}/edit");
        //$output['cv']['#markup'] .= $upload_link;
      }
    }
  }
  // Loads the Bio node
  $node = os_biocv_get_bio_node();
  if ($node) {
    if (empty($node->body) && _os_biocv_access_admin()) {
      // Spoofs a node body in order to print contextual links, etc.
      // Note: this makes no changes to the bio node because we don't save it.
      $markup = '<p>' . t('Oops! Nothing to show here yet.') . ' ' . l(t('Add some text to your bio'), "node/{$node->nid}/edit") . '</p>';
      $node->body['und'] = array(
        array(
          'value' => $markup,
          'summary' => '',
          'format' => 'filtered_html',
          'safe_value' => $markup,
          'safe_summary' => '',
        ),
      );
    }
    drupal_set_title($node->title);
    $output['node'] = node_view($node, 'full');
  }
  else if (_os_biocv_access_admin()) {
    $output['node'] = array();
    $output['node']['#markup'] = t('Oops! Nothing to show here yet.') . ' ' . l(t('Create a bio post now'), 'node/add/bio');
  }
  return $output;
}

/**
 *
 */
function _os_biocv_cv_page_contents() {
  if (!_os_biocv_show_local_tasks()) {
    return '';
  }
  $output = '';

  if (_os_biocv_access_admin()) {
    $links = array();
    $node = os_biocv_get_cv_node();
    if ($node !== FALSE) {
      $links[] = array(
        'title' => 'Edit your CV',
        'href' => "node/{$node->nid}/edit",
        'query' => drupal_get_destination(),
      );
    }
    else {
      // an appropriate message and a link for the user to create their CV
      $links[] = array(
        'title' => 'Add your CV',
        'href' => "node/add/cv",
        'query' => drupal_get_destination(),
      );
    }

    $vars['links'] = $links;
    $vars['attributes'] = array('class' => 'links _os_biocv_cv_page_contents');
    $output .= theme('links', $vars);
  }

  $node = os_biocv_get_cv_node();

  if ($node === FALSE) {
    return $output;
  }
  drupal_set_title($node->title);

  // Removes duplicate title (linking to node) because it's already the page title.
  $node->title = '';
  $output .= render(node_view($node, 'full', TRUE, TRUE));
  return $output;
}

/**
 * Returns the filepath for PDF download of given CV node, or FALSE if none.
 *
 * @see os_biocv_settings()
 */
function _os_biocv_get_cv_filepath($node) {
  if ($node === FALSE) {
    return FALSE;
  }
  $field_name = 'field_biocv_pdf_upload';
  $items = field_get_items('node', $node, $field_name);
  if (!isset($items[0]['uri']) || strlen($items[0]['uri']) < 1) {
    return FALSE;
  }
  $filepath = file_create_url($items[0]['uri']);
  return $filepath;
}

/**
 * Returns TRUE if user has selected to display Bio/CV as two separate sections.
 */
function _os_biocv_show_local_tasks() {
  return ((int)variable_get('os_biocv_use_pdf_as_cv', 0) === 0);
}

/**
 *
 */
function _os_biocv_access_admin() {
  if (module_exists('spaces')) {
    return spaces_access_admin();
  }
  return user_access('administer site configuration');
}

/**
 * Get bio and cv data, add to data array and return
 */
function _get_vsite_biocv_data() {
  $query = db_select('og_membership', 'ogm')
    ->condition('ogm.entity_type', 'node', '=');
  $query->innerJoin('node', 'n', "ogm.etid = n.nid AND (n.type = 'cv' OR n.type = 'bio') AND n.status = 1");
  $query->leftJoin('field_data_body', 'body', 'n.nid = body.entity_id AND body.deleted <> 1 AND n.vid = body.revision_id');
  $query->leftJoin('field_data_field_biocv_pdf_upload', 'pdf', 'n.nid = pdf.entity_id');
  $query->leftJoin('spaces_overrides', 'so', "so.id = ogm.gid AND so.object_type='variable' AND so.object_id = 'os_biocv_use_pdf_as_cv'");
  $query = $query->fields('ogm', array('gid'))
                 ->fields('n', array('nid','title', 'uid', 'type'))
                 ->fields('body', array('body_value'))
                 ->fields('pdf', array('field_biocv_pdf_upload_fid'))
                 ->fields('so', array('value'));
  $query->addExpression('MIN(n.created)');
  $query->groupBy('ogm.gid');
  $query->groupBy('n.type');
  $results = $query->execute();

  $vsites = array();
  while ($row = $results->fetchObject()) {
    if($row->gid) {
      if (!isset($vsites[$row->gid . ".0"])) {
        $values = array();
      }
      else {
        $values = $vsites[$row->gid . ".0"];
      }
      if($row->type == "bio") {
        $values['uid'] = $row->uid;
        $values['bio_nid'] = $row->nid;
        _os_biocv_set_not_empty($values, 'bio_title', $row->title);
        _os_biocv_set_not_empty($values, 'bio_body', $row->body_value);

        // figure out if vsite was set up to display Bio & CV as tabs
        switch($row->value) {
          case 'b:1;':
            $setting = 0;
            break;
          case 'i:1;':
            $setting = 0;
            break;
          case 's:1:"1";':
            $setting = 0;
            break;
          case 'i:0;':
            $setting = 1;
            break;
          case 's:1:"0";':
            $setting = 1;
            break;
          case 's:4:"b:0;";':
            $setting = 1;
            break;
          default:
            $setting = 1;
        }
        $values['tabs'] = $setting;
        $vsites[$row->gid . ".0"] = $values;
      }
      else {
        $values['cv_nid'] = $row->nid;
        _os_biocv_set_not_empty($values, 'cv_title', $row->title);
        _os_biocv_set_not_empty($values, 'cv_body', $row->body_value);
        _os_biocv_set_not_empty($values, 'cv_fid', $row->field_biocv_pdf_upload_fid);

        if (!isset($values['uid'])) {
          $values['uid'] = $row->uid;
        }
        $vsites[$row->gid . ".0"] = $values;
      }
    }
  }
  return $vsites;
}

/**
 * converts all used bio & cv content nodes to pages;
 * converts bio widget instances into Featured Posts widget with "Hide Titles" checked
 */
function _replace_biocvs_with_pages($vsite_data) {
  global $conf;
  $conf['expire_status'] = 0;
  $output = "";
  foreach ($vsite_data as $gid => $vsite_values) {
    $gid = (int)$gid;
    $vsite_obj = vsite_get_vsite($gid);

    if (!$vsite_values['uid']) {
      $vsite_values['uid'] = 1;
    }

    // prepare body content for bio page
    $bio_body = isset($vsite_values['bio_body']) ? $vsite_values['bio_body'] : "";

    // if user has cv content, add link to either cv page or cv file
    $cv_link = "";
    $cv_file_obj = FALSE;
    if (isset($vsite_values['cv_body']) || isset($vsite_values['cv_fid'])) {
      if (isset($vsite_values['tabs']) && $vsite_values['tabs'] && isset($vsite_values['cv_body'])) {
        $cv_link = '<span class="os-cvlinkwrap"><a href="/' . $vsite_obj->group->purl . '/biocv/cv" class="os-cvlink">Curriculum Vitae</a></span><br /><br />';
      }
      elseif (isset($vsite_values['cv_fid'])) {
        // add link to CV file and attach file to vsite so that when CV node is deleted, the file won't be
        $cv_file_obj = file_load($vsite_values['cv_fid']);

        if ($cv_file_obj === FALSE) {
          $output .= "Unable to load cv file object for vsite [" . $gid . "]. ";
          continue;
        }
        else {
          $cv_link = '<span class="os-cvlinkwrap"><a href="' . file_create_url($cv_file_obj->uri) . '" class="os-cvlink" data-fid="' . $vsite_values['cv_fid'] . '">Curriculum Vitae</a></span><br /><br />';
        }
      }
    }

    // create bio page node
    $bio_body = $cv_link . $bio_body;
    $vsite_values['bio_title'] = isset($vsite_values['bio_title']) ? $vsite_values['bio_title'] : "Bio";
    $bio_node = os_create_node($vsite_values['bio_title'], 'page', $vsite_values['uid']);

    if (!$bio_node) {
      $output .= "Unable to create bio page for vsite " . $gid . ". ";
      continue;
    }

    if ($cv_file_obj && (!isset($vsite_values['tabs']) || !$vsite_values['tabs'] || !isset($vsite_values['cv_body']))) {
      file_usage_add($cv_file_obj, "os_files", "node", $bio_node->nid);
    }

    // get all files (if any) attached to old bio node, besides CV file
    if (isset($vsite_values['bio_nid'])) {
      $old_bio_node = node_load($vsite_values['bio_nid']);
      $fileObj = NULL;
      if(is_array($old_bio_node->field_upload) && count($old_bio_node->field_upload)) {
        foreach ($old_bio_node->field_upload[LANGUAGE_NONE] as $bio_file) {
          $fileObj = NULL;
          if (!isset($vsite_values['cv_fid']) || $bio_file['fid'] != $vsite_values['cv_fid']) {
            $fileObj = file_load($bio_file['fid']);
            if ($fileObj) {
              file_usage_add($fileObj, "os_files", "node", $bio_node->nid);
            }
          }
        }
      }
    }

    // Add the new page to the vsite
    vsite_add_node($bio_node, $gid, FALSE);

    $bio_node_wrapper = entity_metadata_wrapper('node', $bio_node);
    $bio_node_wrapper->body->set(array('value' => $bio_body, 'format' => 'filtered_html'));
    node_save($bio_node);

    // give the new page the right url alias
    $path = array(
      "source" => "node/" . $bio_node->nid,
      "alias" => $vsite_obj->group->purl . "/biocv"
    );
    path_save($path);

    // create cv page (if necessary)
    $cv_node = NULL;
    if (isset($vsite_values['tabs']) && $vsite_values['tabs'] && isset($vsite_values['cv_nid']) && isset($vsite_values['cv_body'])) {
      $cv_body = "";
      if(isset($vsite_values['cv_body'])) {
        $cv_body = $vsite_values['cv_body'];
      }

      $old_cv_node = NULL;
      if(isset($vsite_values['cv_fid'])) {
        if (!$cv_file_obj) {
          $cv_file_obj = file_load($vsite_values['cv_fid']);
        }
        $old_cv_node = node_load($vsite_values['cv_nid']);
        $cv_display = array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'file_default',
        );
        $cv_body .= render(field_view_field('node', $old_cv_node, 'field_biocv_pdf_upload', $cv_display, LANGUAGE_NONE));
      }

      $vsite_values['cv_title'] = isset($vsite_values['cv_title']) ? $vsite_values['cv_title'] : "CV";
      $cv_node = os_create_node($vsite_values['cv_title'], 'page', $vsite_values['uid']);
      if (!$cv_node) {
         $output .= "Unable to create cv page for vsite " . $gid . ". ";
         continue;
      }

      if ($cv_file_obj) {
        file_usage_add($cv_file_obj, "os_files", "node", $cv_node->nid);
      }

      // get all files (if any) attached to old CV node, besides CV file
      if (isset($vsite_values['cv_nid'])) {
        if(!$old_cv_node) {
          $old_cv_node = node_load($vsite_values['cv_nid']);
        }
        $fileObj = NULL;
        if(isset($old_cv_node->field_upload) && is_array($old_cv_node->field_upload) && count($old_cv_node->field_upload)) {
          foreach ($old_cv_node->field_upload[LANGUAGE_NONE] as $cv_file) {
            $fileObj = NULL;
            if (!isset($vsite_values['cv_fid']) || $cv_file['fid'] != $vsite_values['cv_fid']) {
              $fileObj = file_load($cv_file['fid']);
              if ($fileObj) {
                file_usage_add($fileObj, "os_files", "node", $cv_node->nid);
              }
            }
          }
        }
      }
      // Add the new page to the vsite
      vsite_add_node($cv_node, $gid, FALSE);

      $cv_node_wrapper = entity_metadata_wrapper('node', $cv_node);
      $cv_node_wrapper->body->set(array('value' => $cv_body, 'format' => 'filtered_html'));
      node_save($cv_node);

      // give the new page the right url alias
      $path = array(
        "source" => "node/" . $cv_node->nid,
        "alias" => $vsite_obj->group->purl . "/biocv/cv"
      );
      path_save($path);
    }

    // if either a new bio page or a new cv page has been created, make sure os_pages app is enabled and menus are fixed
    if ($bio_node || $cv_node) {
      // get all bio and cv nodes associated with vsite and then delete them
      $query = db_select('spaces_overrides', 'so');
      $query->condition("so.type", 'og');
      $query->condition("id", $gid, "=");
      $query->condition("so.object_id", array('spaces_features'), '=');
      $query = $query->fields('so', array('object_type', 'object_id', 'value'));
      $results = $query->execute();

      // if there are existing app settings, make sure os_pages is enabled
      if ($results->rowCount()) {
        while ($settings = $results->fetchObject()) {
          $apps = unserialize($settings->value);
          $update = NULL;
          if (isset($apps['os_biocv'])) {
            unset($apps['os_biocv']);
            $update = 1;
          }
          if(!isset($apps['os_pages']) || $apps['os_pages'] == 0) {
            $apps['os_pages'] = 1;
            $update = 1;
          }
          if ($update) {
            db_update('spaces_overrides')
              ->fields(array('type' => 'og', 'id' => $gid, 'object_type' => 'variable', 'object_id' => 'spaces_features', 'value' => serialize($apps)))
              ->condition('id', $gid, "=")
              ->condition('object_id', 'spaces_features', "=")
              ->condition('object_type', $settings->object_type, "=")
              ->execute();
          }
        }
      }

      // Get primary menu info for bio & cv links
      $primary_menu = array();
      foreach (_vsite_menu_get_menu_links('primary-menu',  $vsite_obj) as $mlid => $menu_item) {
        if (isset($menu_item['link_path']) && ($menu_item['link_path'] == "biocv" || $menu_item['link_path'] == "biocv/cv")) {
          $primary_menu[$menu_item['link_path']] = $menu_item;
        }
      }
      // Get secondary menu info for bio & cv links
      $secondary_menu = array();
      foreach (_vsite_menu_get_menu_links('secondary-menu',  $vsite_obj) as $mlid => $menu_item) {
        if (isset($menu_item['link_path']) && ($menu_item['link_path'] == "biocv" || $menu_item['link_path'] == "biocv/cv")) {
          $secondary_menu[$menu_item['link_path']] = $menu_item;
        }
      }

      // create new primary menu item(s) for bio/cv page node(s)
      if (count($primary_menu)) {
        foreach ($primary_menu as $type => $menu) {
          $new_menu = array(
            "menu_name" => 'primary-menu',
            "router_path" => "node/%",
            "link_title" => $menu['link_title'],
            "options" => $menu['options'],
            "weight" => $menu['weight'],
            "module" => 'system',
            "hidden" => $menu['hidden'],
            "external" => $menu['external'],
            "plid" => $menu['plid'],
            "mlid" => $menu['mlid'],
          );
          if ($type == "biocv") {
            $new_menu['link_path'] = 'node/' . $bio_node->nid;
            $mlid = vsite_menu_menu_link_save($new_menu, $gid);
          }
          elseif ($type == "biocv/cv") {
            $new_menu['link_path'] = 'node/' . $cv_node->nid;
            $mlid = vsite_menu_menu_link_save($new_menu, $gid);
          }
        }
        vsite_menu_cache_clear('primary-menu', $gid);
      }

      // create new primary menu item(s) for bio/cv page node(s)
      if (count($secondary_menu)) {
        foreach ($secondary_menu as $type => $menu) {
          $new_menu = array(
            "menu_name" => 'secondary-menu',
            "router_path" => "node/%",
            "link_title" => $menu['link_title'],
            "options" => $menu['options'],
            "weight" => $menu['weight'],
            "module" => 'system',
            "hidden" => $menu['hidden'],
            "external" => $menu['external'],
            "plid" => $menu['plid'],
            "mlid" => $menu['mlid'],
          );
          if ($type == "biocv") {
            $new_menu['link_path'] = 'node/' . $bio_node->nid;
            $mlid = vsite_menu_menu_link_save($new_menu, $gid);
          }
          elseif ($type == "biocv/cv") {
            $new_menu['link_path'] = 'node/' . $cv_node->nid;
            $mlid = vsite_menu_menu_link_save($new_menu, $gid);
          }
        }
        vsite_menu_cache_clear('secondary-menu', $gid);
      }
    }

    // get all bio and cv nodes associated with vsite and then delete them
    $query = db_select('node', 'n');
    $or = db_or();
    $or->condition("n.type",'bio', '=');
    $or->condition("n.type",'cv', '=');
    $query->condition($or);
    $query->innerJoin('og_membership', 'ogm', "n.nid = ogm.etid AND gid = $gid AND entity_type = 'node'");
    $query = $query->fields('n', array('nid'));
    $all_bio_nids = $query->execute()->fetchAllKeyed($key_index = 0, $value_index = 0);
    node_delete_multiple(array_keys($all_bio_nids));

    // find out if this vsite has a customized instance of the bio widget
    $query = db_select('spaces_overrides', 'so');
    $query->condition("so.type", 'og');
    $query->condition("id", $gid, "=");
    $query->condition("so.object_type", array('boxes','context'), 'in');
    $or = db_or();
    $or->condition("so.value",'%bio_teaser%', 'like');
    $or->condition("so.value",'%os_boxes_bio%', 'like');
    $query->condition($or);
    $query = $query->fields('so', array('object_type', 'object_id', 'value'))
                  ->orderBy('so.object_type', 'ASC');
    $results = $query->execute();

    // set flag to track whether or not new bio widget has been created
    $bio_widget_created_flag = 0;
    // the user has changed the default display for the bio widget
    if ($results->rowCount()) {
      $existing_bio_widget = NULL;
      while ($row = $results->fetchObject()) {
        // if user has a bio_teaser entry, save settings for when/if the new bio widget is created
        if($row->object_id == "bio_teaser" && $results->rowCount() > 1) {
          $existing_bio_widget = unserialize($row->value);
        }
        // if user has only a bio_teaser entry, then there will be layout data in the db, so set up default
        elseif($row->object_id == "bio_teaser") {
          $existing_bio_widget = unserialize($row->value);
          $vsite_values['options'] = $existing_bio_widget->options;
          if (!$bio_widget_created_flag) {
            $featured_delta = _os_biocv_create_bio_featured_posts_widget($gid, $vsite_values, $bio_node->nid, "converted-bio");
            $bio_widget_created_flag = 1;
          }
        }
        else {
          $row_values = unserialize($row->value);
          foreach ($row_values as $value => $instances) {
            if (is_array($instances)) {
              foreach ($instances as $type => $data) {
                if (is_array($data) && ((isset($data['plugin']) && $data['plugin'] == "os_boxes_bio") || (isset($data['delta']) && $data['delta'] == "bio_teaser"))) {
                  $transaction = db_transaction();
                  try {
                    // replace implemented bio widget with new featured posts widget
                    if($data['region']) {
                      if($existing_bio_widget) {
                        $vsite_values['options'] = $existing_bio_widget->options;
                      }
                      if (!$bio_widget_created_flag) {
                         $featured_delta = _os_biocv_create_bio_featured_posts_widget($gid, $vsite_values, $bio_node->nid, "converted-bio");
                        $bio_widget_created_flag = 1;
                      }

                      $box_position = array(
                        "region" => $data['region'],
                        "weight" => $data['weight'],
                        "module" => $data['module'],
                        "delta" => $featured_delta,
                        "status" => 0,
                        "title" => NULL,
                      );

                      $instances["boxes-" . $featured_delta] = $box_position;
                    }
                    // remove entry in serialized array for bio widget and update database entry
                    unset($instances[$type]);
                    db_update('spaces_overrides')
                      ->fields(array('type' => 'og', 'id' => $gid, 'object_type' => $row->object_type, 'object_id' => $row->object_id, 'value' => serialize(array($value => $instances))))
                      ->condition('id', $gid, "=")
                      ->condition('object_id', $row->object_id, "=")
                      ->condition('object_type', $row->object_type, "=")
                      ->execute();

                    // delete instance of bio widget
                    db_delete('spaces_overrides')
                      ->condition('id', $gid, "=")
                      ->condition('object_id', "bio_teaser", "=")
                      ->condition('object_type', "boxes", "=")
                      ->execute();
                  }
                  catch (Exception $e) {
                    $transaction->rollback();
                    $output .= "DB transaction error trying to replace bio widget with featured posts widget: " . $e->getMessage() . "\n";
                    throw $e;
                  }
                }
              }
            }
          }
        }
      }
    }
    // the user hasn't changed the default display,
    // but we still need to add in the featured posts bio widget
    else {
      if (!$bio_widget_created_flag) {
        $featured_delta = _os_biocv_create_bio_featured_posts_widget($gid, $vsite_values, $bio_node->nid, "converted-bio");
        $bio_widget_created_flag = 1;
      }
    }
    // find out if this vsite has List of Posts or Featured Posts widgetd that reference the old bio or cv node
    $conditions = 0;

    $query = db_select('spaces_overrides', 'so');
    $or = db_or();
    if (isset($vsite_values['bio_nid']) && isset($vsite_values['bio_body'])) {
      $conditions = 1;
      $or->condition("so.value",'%"content_type";s:3:"bio"%', 'like');
      $or->condition("so.value", _os_biocv_serial_snippet("nid", $vsite_values['bio_nid']), 'like');
    }
    if (isset($vsite_values['cv_nid']) && isset($vsite_values['cv_body'])) {
      $conditions = 1;
      $or->condition("so.value",'%"content_type";s:2:"cv"%', 'like');
      $or->condition("so.value", _os_biocv_serial_snippet("nid", $vsite_values['cv_nid']), 'like');
    }

    if ($conditions) {
      $query->condition("type", 'og');
      $query->condition("id", $gid, "=");
      $query->condition("object_type", "boxes", "=");
      $query->condition($or);
      $query = $query->fields('so', array('object_type', 'object_id', 'value'));
      $results = $query->execute();

      if ($results->rowCount()) {
        while ($box = $results->fetchObject()) {
          $box_data = unserialize($box->value);
          // box is a featured posts widget, so the node id(s) need to be replaced
          if ($box_data->plugin_key == "os_boxes_manual_list") {
            foreach ($box_data->options['nodes'] as $index => $featured_node) {
              if ($featured_node['nid'] == $vsite_values['bio_nid']) {
                if (isset($bio_node)) {
                  $box_data->options['nodes'][$index]['nid'] = $bio_node->nid;
                }
                else {
                  unset($box_data->options['nodes'][$index]);
                }
              }
              elseif ($featured_node['nid'] == $vsite_values['cv_nid']) {
                if (isset($cv_node)) {
                  $box_data->options['nodes'][$index]['nid'] = $cv_node->nid;
                }
                else {
                  unset($box_data->options['nodes'][$index]);
                }
              }
            }
            $update_query = db_update('spaces_overrides')
              ->fields(array('type' => 'og', 'id' => $gid, 'object_type' => $box->object_type, 'object_id' => $box->object_id, 'value' => serialize($box_data)))
              ->condition('id', $gid, "=")
              ->condition('object_id', $box->object_id, "=")
              ->condition('object_type', $box->object_type, "=")
              ->execute();
          }
          // otherwise, it's a list of posts widget, so we need to convert it to a featured posts widget
          else {
            // create new featured posts widget based on LOP options
            $vsite_values['options']['additional_classes'] = isset($box_data->options['additional_classes']) ? $box_data->options['additional_classes'] : "";
            $vsite_values['options']['make_embeddable'] = isset($box_data->options['make_embeddable']) ? $box_data->options['make_embeddable'] : "";
            $vsite_values['options']['style'] = isset($box_data->options['display']) ? $box_data->options['display'] : "";
            if ($box_data->options['content_type'] == "bio" && $bio_node) {
              $featured_delta = _os_biocv_create_bio_featured_posts_widget($gid, $vsite_values, $bio_node->nid, "converted-bio", 1);
            }
            elseif ($box_data->options['content_type'] == "cv" && $cv_node) {
              $featured_delta = _os_biocv_create_bio_featured_posts_widget($gid, $vsite_values, $cv_node->nid, "converted-bio", 1);
            }

            // check for where LOP widget was being used and replace with new Featured Posts widget
            if($featured_delta) {
              $query = db_select('spaces_overrides', 'so')->fields('so', array('object_type', 'object_id', 'value'));
              $query->condition("type", 'og');
              $query->condition("id", $gid, "=");
              $query->condition("object_type", "context", "=");
              $query->condition("value", "%" . $box->object_id . "%", "like");
              $contexts = $query->execute();

              while ($context = $contexts->fetchObject()) {
                $context_data = unserialize($context->value);
                foreach ($context_data['blocks'] as $block_id => $block_data) {
                  if($block_id == "boxes-" . $box->object_id) {
                    if (isset($context_data['blocks']['boxes-' . $box->object_id]['plugin'])) {
                      unset($context_data['blocks']['boxes-' . $box->object_id]['plugin']);
                    }
                    $context_data['blocks']["boxes-" . $featured_delta] = $context_data['blocks']['boxes-' . $box->object_id];
                    $context_data['blocks']["boxes-" . $featured_delta]['delta'] = $featured_delta;
                    unset($context_data['blocks']['boxes-' . $box->object_id]);
                    break;
                  }
                }
                // update context data in db
                $update_query = db_update('spaces_overrides')
                  ->fields(array('type' => 'og', 'id' => $gid, 'object_type' => $context->object_type, 'object_id' => $context->object_id, 'value' => serialize($context_data)))
                  ->condition('id', $gid, "=")
                  ->condition('object_id', $context->object_id, "=")
                  ->condition('object_type', $context->object_type, "=")
                  ->execute();
              }
            }
            // delete instance of old widget
            $delete_query = db_delete('spaces_overrides')
              ->condition('id', $gid, "=")
              ->condition('object_id', $box->object_id, "=")
              ->condition('object_type', "boxes", "=")
              ->execute();
          }
        }
      }
    }
  }
  return $output;
}

/**
 * helper function to make the distinction between a field
 * with only whitespace, HTML tags and/or HTML entities in it
 * and actual content and only set an indexed array value
 * if there is actual content
 */
function _os_biocv_set_not_empty(&$array, $key, $value) {
  $pattern = '/\s/';
  if (preg_replace($pattern, "", html_entity_decode(strip_tags($value))) != "") {
    // remove file metadata to avoid problems when creating new nodes with existing content
    $value = preg_replace('/\<[^>]*data-file_info=".*?"[^>]*>[^<]*\<\/[^>]*>/', '\1', $value);
    $array[$key] = $value;
  }
}

/**
 * helper function to create the featured posts object the replaces the bio widget
 */
function _os_biocv_create_bio_featured_posts_widget($vsite_id, $vsite_values, $bio_nid, $class = "", $context = NULL) {
  $featured_delta = "og-" . $vsite_id . "-" . substr(md5(time()), -8);
  $featured_box = new stdClass();
  $featured_box->changed = NULL;
  $featured_box->delta = $featured_delta;
  $featured_box->title = NULL;
  $featured_box->description = "Bio";
  $featured_box->options = array(
    "make_embeddable" => 0,
    "nodes" => array(array("nid" => $bio_nid, "title" => $vsite_values['bio_title'])),
    "random" => 0,
    "additional_classes" => $class,
    "hide_title" => ((isset($vsite_values['options']['show_title']) && $vsite_values['options']['show_title']) ? NULL : 1),
  );

  $featured_box->embed_as = array("iframe", "oembed");
  $featured_box->plugin_key = "os_boxes_manual_list";

  if (isset($vsite_values['options']) && isset($vsite_values['options']['teaser']) && ($vsite_values['options']['teaser'] != "full")) {
    $featured_box->options['style'] = "teasers";
  }
  elseif (isset($vsite_values['options']) && isset($vsite_values['options']['style'])) {
    $featured_box->options['style'] = $vsite_values['options']['style'];
  }
  else {
    $featured_box->options['style'] = "full";
  }

  try {
    db_insert('spaces_overrides')
      ->fields(array('type' => 'og', 'id' => $vsite_id, 'object_type' => 'boxes', 'object_id' => $featured_delta, 'value' => serialize($featured_box)))
      ->execute();

    if (!$context) {
      // if a context doesn't exist for this widget, create one
      $query = db_select('spaces_overrides', 'so')->fields('so');
      $query->condition("so.type", 'og');
      $query->condition('so.id', $vsite_id, '=');
      $query->condition('so.object_type','context', '=');
      $query->condition('so.object_id', "os_front:reaction:block", '=');
      $results = $query->execute();

      if (!$results->rowCount()) {
        $box_position = array(
          "region" => "content_top",
          "weight" => "-10",
          "module" => "boxes",
          "delta" => $featured_delta,
          "status" => 0,
          "title" => NULL,
        );

        db_insert('spaces_overrides')
          ->fields(array('type' => 'og', 'id' => $vsite_id, 'object_type' => 'context', 'object_id' => "os_front:reaction:block", 'value' => serialize(array('blocks' => array("boxes-" . $featured_delta => $box_position)))))
          ->execute();
      }
    }
    return $featured_delta;
  }
  catch (Exception $e) {
    throw new Exception("DB error trying to create featured posts widget for vsite $vsite_id: " . $e->getMessage());
    return FALSE;
  }
}

/**
 * helper function return the serial data snippet to search for
 */
function _os_biocv_serial_snippet($key, $value) {
  if ($key && $value) {
    return "%s:" . strlen($key) . ":\"$key\";s:" . strlen($value) . ":\"$value\";%";
  }
}

