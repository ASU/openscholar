<?php
/**
 * @file
 * Main file for the OS importer module.
 */
include_once 'os_importer.features.inc';

/**
 * Implements hook_feeds_plugins().
 */
function os_importer_feeds_plugins() {
  $info = array();
  $info['OsImporterFetcher'] = array(
    'name'        => t('OS importer fetcher'),
    'description' => t('Fetch node from a url.'),
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class'  => 'OsImporterFetcher',
      'file'   => 'OsImporterFetcher.inc',
      'path'   => drupal_get_path('module', 'os_importer') . '/plugins',
    ),
  );
  $info['OsImporterNodeProcessor'] = array(
    'name' => t('OS importer Node processor'),
    'description' => t('Import node from source. Including files form external URL.'),
    'help' => t('Create and update nodes from parsed content.'),
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'OsImporterNodeProcessor',
      'file' => 'OsImporterNodeProcessor.inc',
      'path' => drupal_get_path('module', 'os_importer') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Implements hook_node_insert().
 *
 * Import feed item when the user add the feed importer for the first time.
 */
function os_importer_node_insert($node) {
  if (!$node->is_new || $node->type != 'blog_import') {
    return;
  }

  feeds_source('os_blog_import_rss', $node->nid)->startImport();
}

/**
 * Implements hook_admin_paths().
 */
function os_importer_admin_paths() {
  return array(
    'os-importer/*' => TRUE,
    'cp/content/import/*'
  );
}

/**
 * Implements hook_os_add_new_links_alter().
 */
function os_importer_os_add_new_links_alter(&$links) {
  $item = menu_get_item();
  $apps = os_app_info();

  $current_app = '';
  foreach ($apps as $app) {
    if ($item['path'] == $app['path']) {
      $current_app = $app;
      break;
    }
  }

  if (!$current_app || empty($current_app['importers'])) {
    return;
  }

  foreach ($current_app['importers'] as $type => $importer) {
    if (!os_importer_import_access($importer)) {
      continue;
    }

    $links['os-importer-' . $type] = array(
      'title' => t('Import from @type', array('@type' => $type)),
      'href' => 'os-importer/' . $importer,
    );
  }
}

/**
 * Implements hook_menu().
 */
function os_importer_menu() {
  $items = array();

  $items['os-importer/%'] = array(
    'title' => 'Importing from a CSV',
    'access callback' => 'os_importer_import_access',
    'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_importer_import', 1),
  );

  return $items;
}

/**
 * Access callback - determine if the user can import content from csv.
 *
 * @param $type
 *  The type of the feeds importer.
 *
 * @return bool
 *  Return TRUE/FALSE.
 */
function os_importer_import_access($type) {
  $source = feeds_source($type);
  $config = $source->importer->getConfig();

  if (!$bundle = $config['processor']['config']['content_type']) {
    return FALSE;
  }

  $string = "create {$bundle} content";

  if ($vsite = vsite_get_vsite()) {
    return og_user_access('node', $vsite->id, $string);
  }
  else {
    return user_access($string);
  }
}

/**
 * Callback function for importing files from out source.
 *
 * @param $source
 *   Field mapper source settings.
 * @param $entity
 *   An entity object, for instance a node object.
 * @param $target
 *   A string identifying the target on the node.
 * @param $value
 *   The value to populate the target with.
 * @param $mapping
 *  Associative array of the mapping settings from the per mapping
 *  configuration form.
 */
function os_importer_map_files($source, $entity, $target, $value, $mapping) {
  if (!$value) {
    return;
  }
  $field_name = $source->importer->processor->config['file_field'];
  $files = array();

  $sources = explode('|', $value);
  foreach ($sources as $source) {
    $file = system_retrieve_file($source, 'public://', TRUE);
    $files[] = array(
      'fid' => $file->fid,
      'display' => 1,
      'description' => '',
    );
  }

  $entity->{$field_name}[$entity->language] = $files;
}

/**
 * Callback function for importing OG vocab terms.
 *
 * @see os_importer_map_files().
 */
function os_importer_map_og_vocab_terms($source, $entity, $target, $value, $mapping) {
  if (!$value) {
    return;
  }

  $terms = explode("|", $value);
  $vocabs = og_vocab_get_accessible_vocabs('node', $entity->type, OG_VOCAB_FIELD);

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabs, 'IN')
    ->propertyCondition('name', $terms, 'IN')
    ->execute();

  $terms = array_keys($result['taxonomy_term']);

  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->{OG_VOCAB_FIELD}->set($terms);
}

/**
 * Form callback - Adding an importer.
 */
function os_importer_import($form, &$form_state, $type) {
  $form_state['type'] = $type;

  $form['file'] = array(
    '#title' => t('File'),
    '#type' => 'managed_file',
    '#description' => t('Select a file form your computer to import.'),
    '#upload_location' => 'public://',
    '#upload_validators' => array(
      'file_validate_extensions' => array('ics csv'),
    ),
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    ),
  );

  return $form;
}

/**
 * Form submit.
 */
function os_importer_import_submit($form, &$form_state) {
  $values = $form_state['values'];
  $fid = $values['file'];
  $file = file_load($fid);

  $source = feeds_source($form_state['type']);
  $fetcher_config = $source->getConfigFor($source->importer->fetcher);
  $fetcher_config['source'] = $file->uri;
  $fetcher_config['file'] = $file;
  $source->setConfigFor($source->importer->fetcher, $fetcher_config);
  $source->save();

  $source->startImport();
}

/**
 * Implements hook_feeds_presave().
 *
 * Supporting creation of vocabularies on the fly from the CSV file.
 */
function os_importer_feeds_presave(FeedsSource $source, $entity, $item) {
  if (!$vsite = vsite_get_vsite()) {
    return;
  }

  $config = $source->importer->getConfig();

  // Getting the mappings from the processor config.
  $mappings = array();
  foreach ($config['processor']['config']['mappings'] as $mapping) {
    $mappings[] = strtolower($mapping['source']);
  }

  // Now when we know what the original mapping was we can get the names of the
  // new vocabularies.
  $new_vocabs = array_diff(array_keys($item), $mappings);
  foreach ($new_vocabs as $vocab) {
    // Create the terms and the vocabulary.
    $info = _os_importer_create_vocab($vocab, $item[$vocab]);

    // Create the OG vocabulary and the relation to the group.
    og_vocab_create_og_vocab($info['vid'], 'node', $entity->type)->save();
    og_vocab_relation_save($info['vid'], 'node', $vsite->id);

    // Add the terms the field.
    $wrapper = entity_metadata_wrapper('node', $entity);
    $wrapper->{OG_VOCAB_FIELD}->set($info['tids']);
  }
}

/**
 * Create OG vocab on the fly.
 *
 * @param $name
 *  The new vocabulary title.
 * @param $terms
 *  The taxonomy terms of the new vocabulary.
 *
 * @return array
 *  Array with the vocabulary ID and the his term IDs.
 */
function _os_importer_create_vocab($name, $terms) {
  $machine_name = strtolower($name);
  // Verify first that there isn't a vocabulary that exists in that name.
  if (taxonomy_vocabulary_machine_name_load($machine_name)) {
    // Start iterating over machine names until we hit one that doesn't
    // exist yet.
    $i = 1;
    while (taxonomy_vocabulary_machine_name_load($machine_name)) {
      $machine_name = substr($machine_name, 0, 32 - strlen($i)) . $i;
      ++$i;
    }
  }

  // Creating the new vocabulary.
  $vocabulary = new stdClass();
  $vocabulary->name = $name;
  $vocabulary->machine_name = $machine_name;
  taxonomy_vocabulary_save($vocabulary);

  $tids = array();

  // Creating the terms for the new vocabulary.
  $taxonomy_terms = explode("|", $terms);
  foreach ($taxonomy_terms as $taxonomy_terms) {
    $term = new stdClass();
    $term->name = $taxonomy_terms;
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);
    $tids[] = $term->tid;
  }

  return array(
    'vid' => $vocabulary->vid,
    'tids' => $tids,
  );
}
