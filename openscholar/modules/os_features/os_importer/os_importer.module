<?php
/**
 * @file
 * Main file for the OS importer module.
 */
include_once 'os_importer.features.inc';

/**
 * Implements hook_feeds_plugins().
 */
function os_importer_feeds_plugins() {
  $info = array();
  $info['OsImporterFetcher'] = array(
    'name'        => t('OS importer fetcher'),
    'description' => t('Fetch node from a url.'),
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class'  => 'OsImporterFetcher',
      'file'   => 'OsImporterFetcher.inc',
      'path'   => drupal_get_path('module', 'os_importer') . '/plugins',
    ),
  );
  $info['OsImporterNodeProcessor'] = array(
    'name' => t('OS importer Node processor'),
    'description' => t('Import node from source. Including files form external URL.'),
    'help' => t('Create and update nodes from parsed content.'),
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'OsImporterNodeProcessor',
      'file' => 'OsImporterNodeProcessor.inc',
      'path' => drupal_get_path('module', 'os_importer') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Implements hook_node_insert().
 *
 * Import feed item when the user add the feed importer for the first time.
 */
function os_importer_node_insert($node) {
  if (!$node->is_new || $node->type != 'blog_import') {
    return;
  }
  $wrapper = entity_metadata_wrapper('node', $node);

  $type = $wrapper->field_rss_url->value() ? 'os_blog_import_rss' : 'os_blog_import_file';

  feeds_source($type, $node->nid)->startImport();
}

/**
 * Implements hook_admin_paths().
 */
function os_importer_admin_paths() {
  return array(
    'os-importer/*' => TRUE,
    'cp/content/import/*'
  );
}

/**
 * Implements hook_os_add_new_links_alter().
 */
function os_importer_os_add_new_links_alter(&$links) {
  $item = menu_get_item();
  $apps = os_app_info();

  $current_app = '';
  foreach ($apps as $app) {
    if ($item['path'] == $app['path']) {
      $current_app = $app;
      break;
    }
  }

  if (!$current_app) {
    return;
  }

  foreach ($current_app['importers'] as $type => $importer) {
    $links['os-importer-' . $type] = array(
      'title' => t('Import from @type', array('@type' => $type)),
      'href' => 'os-importer/' . $importer,
    );
  }
}

/**
 * Implements hook_menu().
 */
function os_importer_menu() {
  $items = array();

  $items['os-importer/%'] = array(
    'title' => 'Importing from a CSV',
    'access arguments' => array('import via os importer'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_importer_import', 1),
  );

  $items['cp/content/import/group-content/%/%'] = array(
    'title' => 'Group content',
    'page callback' => 'os_import_group_content',
    'page arguments' => array(4, 5),
    'access arguments' => array('import via os importer'),
  );

  return $items;
}

/**
 * Constructing the title of the importer page.
 *
 * @param $type
 *  The type of the importer.
 *
 * @return String
 *  The string of the menu item.
 */
function os_importer_menu_item_title($type) {
  return t('Importing @type content', array('@type' => $type));
}

/**
 * Implements hook_permission().
 */
function os_importer_permission() {
  return array(
    'import via os importer' => array(
      'title' => t('Import content from CSV or RSS'),
      'description' => t('Allow to the user permission to import from a CSV or RSS.'),
    ),
  );
}

/**
 * Display the imported nodes that can imported to a viste.
 */
function os_importer_import_content($type) {
  $vsite = vsite_get_vsite();
  $query = db_select('feeds_item', 'fi');
  $result = $query
    ->fields('fi', array('entity_id'))
    ->execute()
    ->fetchAllAssoc('entity_id');

  $nodes = node_load_multiple(array_keys($result));

  foreach ($nodes as $node) {
    if (og_is_member('node', $vsite->id, 'node', $node)) {
      $imported = t('Imported. <a href="@view-href">View</a>', array('@view-href' => url('node/' . $node->nid)));
    }
    else {
      $options = array(
        'attributes' => array(
          'class' => array('use-ajax'),
          'id' => array($node->type . '-' . $vsite->id . '-' . $node->nid),
        ),
      );

      $imported = l('Import', 'cp/content/import/group-content/' . $node->nid . '/' . $vsite->id, $options);
    }

    $rows[] = array(drupal_render(node_view($node)), $imported);
  }

  $content = theme('table', array(
    'header' => array(t('Content'), t('Imported')),
    'rows' => $rows,
  ));

  return $content;
}

/**
 * Callback function for importing files from out source.
 *
 * @param $source
 *   Field mapper source settings.
 * @param $entity
 *   An entity object, for instance a node object.
 * @param $target
 *   A string identifying the target on the node.
 * @param $value
 *   The value to populate the target with.
 * @param $mapping
 *  Associative array of the mapping settings from the per mapping
 *  configuration form.
 */
function os_importer_map_files($source, $entity, $target, $value, $mapping) {
  if (!$value) {
    return;
  }
  $field_name = $source->importer->processor->config['file_field'];
  $files = array();

  $sources = explode('|', $value);
  foreach ($sources as $source) {
    $file = system_retrieve_file($source, 'public://', TRUE);
    $files[] = array(
      'fid' => $file->fid,
      'display' => 1,
      'description' => '',
    );
  }

  $entity->{$field_name}[$entity->language] = $files;
}

/**
 * Callback function for importing OG vocab terms.
 *
 * @see os_importer_map_files().
 */
function os_importer_map_og_vocab_terms($source, $entity, $target, $value, $mapping) {
  if (!$value) {
    return;
  }

  $terms = explode("|", $value);
  $vocabs = og_vocab_get_accessible_vocabs('node', $entity->type, OG_VOCAB_FIELD);

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabs, 'IN')
    ->propertyCondition('name', $terms, 'IN')
    ->execute();

  $terms = array_keys($result['taxonomy_term']);

  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->{OG_VOCAB_FIELD}->set($terms);
}

/**
 * Grouping an imported content into my group.
 */
function os_import_group_content($node, $vsite, $ajax = 'nojs') {
  $wrapper = entity_metadata_wrapper('node', $node);
//  $wrapper->{OG_AUDIENCE_FIELD}[] = $vsite;
//  $wrapper->save();

  if ($ajax == 'ajax') {
    $commands[] = ajax_command_html("#" . $node->type . '-' . $vsite->id . '-' . $node->nid, 'fo');
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    drupal_goto('cp/content/import/' . $wrapper->getBundle());
  }
}

/**
 * Form callback - Adding an importer.
 */
function os_importer_import($form, &$form_state, $type) {
  $source = feeds_source($type);
  $form_state['type'] = $type;

  $form['file'] = array(
    '#title' => t('File'),
    '#type' => 'managed_file',
    '#description' => t('Select a file form your computer to import.'),
    '#upload_location' => 'public://',
    '#upload_validators' => array(
      'file_validate_extensions' => array('ics csv'),
    ),
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    ),
  );

  return $form;
}

/**
 * Form submit.
 */
function os_importer_import_submit($form, &$form_state) {
  global $language, $user;

  $values = $form_state['values'];
  $fid = $values['file'];
  $file = file_load($fid);

  $source = feeds_source($form_state['type']);
  $fetcher_config = $source->getConfigFor($source->importer->fetcher);
  $fetcher_config['source'] = $file->uri;
  $fetcher_config['file'] = $file;
  $source->setConfigFor($source->importer->fetcher, $fetcher_config);
  $source->save();

  $source->startImport();
}
