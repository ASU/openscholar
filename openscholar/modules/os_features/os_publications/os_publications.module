<?php
/**
 * @file
 * Code for the os_publications feature.
 */

include_once 'os_publications.features.inc';

/**
 * Implements hook_os_app_info().
 */
function os_publications_os_app_info() {
  $apps = array();

  $apps['os_publications'] = array(
    'path' => 'publications',
    'importers' => array(
      'biblio' => array(
        'csv' => 'os_publication',
      ),
    ),
  );

  return $apps;
}

/**
 * Implements hook_os_add_new_links_alter().
 */
function os_publications_os_add_new_links_alter(&$links) {
  if (!in_array($_GET['q'], array('publications'))) {
    return;
  }

  $links['add_publication'] = array(
    'title' => t('publication'),
    'href' => 'biblio/add',
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function os_publications_ctools_plugin_directory($module, $plugin) {
  if ($module == 'biblio') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function os_publications_theme() {
  $theme['os_publications_citeproc'] = array(
    'variables' => array(
      'id' => NULL,
      'image' => NULL,
      'citation' => NULL,
      'abstract' => NULL,
      'pdf_list' => NULL,
    ),
    'path' => drupal_get_path('module', 'os_publications') . '/templates',
    'template' => 'os-publications-citeproc',
  );

  return $theme;
}

/**
 * Implements hook_menu().
 */
function os_publications_menu_alter(&$items) {
  $items['features/os_publications'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_publications_settings'),
    'access callback' => module_exists('vsite') ? 'spaces_access_admin' : 'user_access',
    'access arguments' => module_exists('vsite') ? array() : array('administer site configuration'),
  );
}

/**
 * Implements hook_migrate_api_alter().
 *
 * Replace BiblioMigrateEntries with OS own implementation that maintains the
 * group audience field.
 *
 */
function os_publications_migrate_api_alter(&$info) {
  if (!db_table_exists('_biblio_1x')) {
    return;
  }

  $info['biblio']['migrations']['BiblioMigrateEntries'] = array('class_name' => 'OsBiblioMigrateEntries', 'group_name' => 'biblio_3');
}

/**
 * Implements hook_preprocess_ctools_dropdown().
 *
 * Since it's difficult to set the context for the publications we alter the
 * theme of ctools sections links and add the links for the settings page.
 */
function os_publications_preprocess_ctools_dropdown(&$variables) {
  if ($variables['class'] != 'section_links' || strpos($_GET['q'], 'publications') !== 0) {
    return;
  }

  $variables['links']['settings'] = array(
    'title' => t('Settings'),
    'href' => 'cp/build/features/os_publications',
  );
}

/**
 * Define the behaviour of OS publications settings page.
 */
function os_publications_settings() {
  $form['left'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('column', 'column-left'),
    ),
  );

  $form['right'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('column', 'column-right'),
    ),
  );

  $form['left']['biblio_order'] = array(
    '#type' => 'radios',
    '#title' => t('Select default order of the sort category'),
    '#default_value' => variable_get('biblio_order', 'DESC'),
    '#options' => array(
      'DESC' => t('Descending'),
      'ASC' => t('Ascending')
    ),
  );

  $form['left']['biblio_sort'] = array(
    '#type' => 'radios',
    '#title' => t('By default, sort publications by which category'),
    '#default_value' => variable_get('biblio_sort', 'biblio_publisher'),
    '#options' => array(
      'title' => t('Title'),
      'type' => t('Type'),
      'biblio_publisher' => t('Author'),
      'biblio_year' => t('Year'),
    ),
  );

  $types = biblio_types();
  foreach ($types as $type => $info) {
    $results[$type] = $info->name;
  }
  asort($results);

  $form['right']['os_publications_filter_publication_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Show only publications of type'),
    '#default_value' => variable_get('os_publications_filter_publication_types', array_keys($results)),
    '#options' => $results,
    '#description' => t('The main list of publications on your publications page will list the types selected here.'),
    '#attributes' => array('class' => array('form-checkboxes-scrolling')),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_views_query_alter().
 */
function os_publications_views_query_alter(&$view, views_plugin_query_default &$query) {
  if ($view->name != 'os_publications') {
//    return;
  }
  // @todo: Support old biblio settings.

  // Store the settings of OS publication in variables.
  $order_field = variable_get('biblio_sort', 'biblio_year');
  $order_type = variable_get('biblio_order', 'ASC');
  $filter_type = variable_get('os_publications_filter_publication_types', array_keys(biblio_types()));

  // Order the publication by types.
  if (in_array($order_field, array('biblio_year', 'biblio_publisher'))) {
  }
  else {
  }

  // Filter types the user selected.
  if ($filter_type) {
    $group_key = key($query->where);
    $query->add_where($group_key, 'biblio.type', $filter_type, 'IN');
  }
}
