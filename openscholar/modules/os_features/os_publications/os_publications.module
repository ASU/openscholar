<?php

/**
 * @file
 * Code for the os_publications feature.
 */

include_once 'os_publications.features.inc';

/**
 * Implements hook_menu_alter().
 */
function os_publications_menu_alter(&$items) {
  $items['features/os_publications'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_publications_settings'),
    'access callback' => module_exists('vsite') ? 'spaces_access_admin' : 'user_access',
    'access arguments' => module_exists('vsite') ? array() : array('administer site configuration'),
  );

  $items['biblio/%biblio']['title callback'] = 'os_publications_biblio_title_callback';
  $items['biblio/%biblio']['title arguments'] = array(1);

  // Don't display the tabs of the edit and delete.
  $items['biblio/%biblio/edit']['type'] = MENU_CALLBACK;
  $items['biblio/%biblio/delete']['type'] = MENU_CALLBACK;
}

/**
 * Title callback; Change the title of a single biblio page.
 */
function os_publications_biblio_title_callback(Biblio $biblio) {
  return $biblio->label();
}

/**
 * Implements hook_os_app_info().
 */
function os_publications_os_app_info() {
  $apps = array();

  $apps['os_publications'] = array(
    'path' => 'publications',
    'importers' => array(
      'biblio' => array(
        'csv' => 'os_publication',
      ),
    ),
    'views tabs' => array(
      'os_publications_issued' => array('page'),
    ),
    'browse_pages' => array(
      'biblio' => array(
        'url' => 'browse/publications',
        'title' => t('Publications'),
        'display_mode' => 'teaser',
        'menu_item' => 'publications',
      ),
    ),
  );

  return $apps;
}

/**
 * Implements hook_os_add_new_links_alter().
 */
function os_publications_os_add_new_links_alter(&$links) {
  if (!in_array($_GET['q'], array('publications'))) {
    return;
  }


  $links['add_publication'] = array(
    'title' => t('Biblio'),
    'href' => 'biblio/add',
  );
}


/**
 * Implememnts hook_menu_alter().
 */
function os_publications_menu_alter(&$items) {
  $items['publications'] = array(
    'title' => 'Publications',
    'description' => 'Publications',
    'page callback' => 'os_publications_overview',
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'os_publications'),
    'file' => drupal_get_path('module', 'os_publications') . '/os_publications.pages.inc',
    'menu_name' => 'primary-menu',
  );

  $items['publications/export'] = array(
    'title' => '',
    'page callback' => 'os_publications_export',
    'access callback' => 'os_publications_export_access',
    'file' => drupal_get_path('module', 'os_publications') . '/os_publications.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['publications/reset'] = array(
    'title' => 'Reset OS Publications Defaults',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_publications_reset'),
    'access arguments' => 'administer nodes',
    'file' => drupal_get_path('module', 'os_publications'). '/os_publications.pages.inc',
    'type' => MENU_CALLBACK,
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function os_publications_ctools_plugin_directory($module, $plugin) {
  if ($module == 'biblio') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function os_publications_theme() {
  return array(
    'os_publications_citeproc' => array(
      'variables' => array(
        'id' => NULL,
        'image' => NULL,
        'citation' => NULL,
        'abstract' => NULL,
        'pdf_list' => NULL,
      ),
      'path' => drupal_get_path('module', 'os_publications') . '/templates',
      'template' => 'os-publications-citeproc',
    ),
  );
}

/**
 * Adds process function to text_format to remove our filter format when necessary
 */
function os_publications_element_info_alter(&$info) {
  $info['text_format']['#process'][] = 'os_publications_process_format';
}

/**
 * Implementation of hook_form_user_profile_form_alter
 * This hook will remove the "bibio" fieldset from the users profile form
 */
function os_publications_form_user_profile_form_alter(&$form, &$form_state) {
  // check to make sure it's set
  if (isset($form['biblio_fieldset'])) {
    $form['biblio_fieldset']['#access'] = FALSE;
  }
}

/**
 * Implements hook_migrate_api_alter().
 *
 * Replace BiblioMigrateEntries with OS own implementation that maintains the
 * group audience field.
 */
function os_publications_migrate_api_alter(&$info) {
  if (!db_table_exists('_biblio_1x')) {
    return;
  }

  $info['biblio']['migrations']['BiblioMigrateEntries'] = array('class_name' => 'OsBiblioMigrateEntries', 'group_name' => 'biblio_3');
}

/**
 * Define the behaviour of OS publications settings page.
 */
function os_publications_settings() {
  $form['left'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('column', 'column-left'),
    ),
  );

  $form['right'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('column', 'column-right'),
    ),
  );

  $biblio_views_settings = variable_get('biblio_views_biblio_render_options');

  // Iterate over the files in the styles directory.
  $styles = array();
  $files = new DirectoryIterator(libraries_get_path('citeproc-php') . '/style');
  foreach ($files as $file) {

    if ($file->isDot()) {
      continue;
    }

    // Get the title of the style and its name.
    $xml = simplexml_load_file($file->getRealPath());
    $name = str_replace('.csl' , '', $file->getFilename());
    $styles[$name] = $xml->info->title;
  }

  $form['left']['os_publications_style_type'] = array(
    '#type' => 'radios',
    '#title' => t('Select the style type'),
    '#default_value' => empty($biblio_views_settings['style_name']) ? 'chicago-author-date' : $biblio_views_settings['style_name'],
    '#options' => $styles,
  );

  $form['left']['biblio_order'] = array(
    '#type' => 'radios',
    '#title' => t('Select default order of the sort category'),
    '#default_value' => variable_get('biblio_order', 'DESC'),
    '#options' => array(
      'DESC' => t('Descending'),
      'ASC' => t('Ascending')
    ),
  );

  // Backward compatibility with the old OS publication field order settings.
  $order_field = variable_get('biblio_sort', 'biblio_publisher');

  $form['left']['biblio_sort'] = array(
    '#type' => 'radios',
    '#title' => t('By default, sort publications by which category'),
    '#default_value' => $order_field,
    '#options' => array(
      'title' => t('Title'),
      'type' => t('Type'),
      'biblio_publisher' => t('Author'),
      'biblio_year' => t('Year'),
    ),
  );

  $types = biblio_types();
  foreach ($types as $type => $info) {
    $results[$type] = $info->name;
  }
  asort($results);

  $form['right']['os_publications_filter_publication_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Show only publications of type'),
    '#default_value' => variable_get('os_publications_filter_publication_types', array_keys($results)),
    '#options' => $results,
    '#description' => t('The main list of publications on your publications page will list the types selected here.'),
    '#attributes' => array('class' => array('form-checkboxes-scrolling')),
  );

  $form['#submit'][] = 'os_publications_set_style_name';

  return system_settings_form($form);
}

/**
 * Submit handler; set the style name of citeproc.
 *
 * @see biblio_handler_field_biblio_render::render();
 */
function os_publications_set_style_name($form, $form_state) {
  $settings = variable_get('biblio_views_biblio_render_options');
  $settings['style_name'] = $form_state['values']['os_publications_style_type'];
  variable_set('biblio_views_biblio_render_options', $settings);

  // The variable 'os_publications_style_type' created automatically during the
  // form submit; Delete it.
  variable_del('os_publications_style_type');
}

/**
 * Implements hook_biblio_fields_info().
 */
function os_publications_biblio_fields_info() {
  // Add biblio_extra field to a Biblio entry.
  $items['biblio_extra'] = array(
    'field' => array(
      'active' => '1',
      'cardinality' => '-1',
      'entity_types' => array(),
      'field_name' => 'biblio_extra',
      'module' => 'dyntextfield',
      'settings' => array(
        'size' => '60',
      ),
      'translatable' => '0',
      'type' => 'dyntextfield',
    ),
    'instance' => array(
      'default_value' => NULL,
      'label' => 'Extra Fields',
      'description' => 'You may use these fields to add extra information about your publication that may not be common to publications if this type. For example, key "Publication Global ID" and value "http://hdl.handle.net/1902.1".',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'dyntextfield',
        'settings' => array(),
        'type' => 'dyntextfield_widget',
        'weight' => '34',
      ),
    ),
  );

  return $items;
}

/**
 * Removes our title field format from fields we don't want it to be in
 */
function os_publications_process_format($element) {
  if (isset($element['#field_name']) && $element['#field_name'] == 'title_field') {
    $format = &$element['format']['format'];
    unset($format['#options']['filtered_html']);
    $element['#format'] = $format['#default_value'] = 'title_filter';
  }
  else {
    unset($element['format']['format']['#options']['title_filter']);
  }
  return $element;
}

/**
 * Implements hook_preprocess_node().
 */
function os_publications_preprocess_node(&$vars) {
  if ($vars['type'] == 'biblio') {
    $vars['display_submitted'] = false;
    if ($vars['teaser']) {
      $vars['title'] = false;
    }
  }
}

/**
 * Removes the export links from the full view of the node
 * Adds 'Abstract' link to toggle a sliding box with the full abstract
 * Adds in the biblio_url to the external link.
 */
function os_publications_node_view_alter(&$build, $type) {
  $spaces = spaces_get_space();
  if ($type != 'node' || $build['#bundle'] != 'biblio') {
    return;
  }

  switch ($build['#view_mode'])  {
    case 'full':
      // Remove the publication image as it's called in theme_os_publications_tabular instead.
      if (isset($build['field_biblio_image'])) {
      	$build['field_biblio_image']['#access'] = FALSE;
      }

      // Remove the Google Scholar link that appears at the bottom of full view publications.
      if (isset($build['links']['biblio_google_scholar'])) {
        unset($build['links']['biblio_google_scholar']);
      }
      break;

    case 'slide_teaser':
      $build['teaser']['#markup'] = theme('biblio_style', array('node' => $build['#node'], 'base' => variable_get('biblio_base', 'biblio'), 'style_name' => biblio_get_style()));
      //FALLTHROUGH!  slide_teaser should run just like teaser, except we need to load up the markup from biblio_view().
    case 'teaser':
      // Alter the teaser to remove the external URL as the URL title and
      // replace it with either the biblio_url_title or "website".
      if (isset($build['teaser']['#markup'])) {
        $node = node_load($build['#node']->nid);
        $build['teaser']['#markup'] = _os_publications_biblio_entry_alter($build['teaser']['#markup'], $node);
      }

      // Add the abstract slider.
	    _os_publications_attach_abstract($build, $build['#node'], 'teaser');
	    // Add in notes.
      if(isset($spaces) && is_object($spaces) && $spaces->controllers->variable->get('os_publications_note_in_teaser', 'space') == TRUE) {
        _os_publications_attach_notes($build, $build['#node']);
      }
      $build['teaser']['#weight'] = 1;
      $build['links']['#access'] = FALSE;
      break;

    default:
      $links = &$build['links'];
      foreach ($links as $k => $l) {
        if (is_array($l) && isset($l['#links'])) {
          foreach ($l['#links'] as $id => $arr) {
            if (strpos($arr['href'], 'export') !== FALSE) {
              unset($links[$k]['#links'][$id]);
            }
          }
        }
      }
      break;

  }
}

/**
 * Implements hook_views_query_alter().
 */
function os_publications_views_query_alter(&$view, views_plugin_query_default &$query) {
  $item = menu_get_item();

  // Show only the publications that belong to the current vsite.
  if (module_exists('vsite') && $vsite = vsite_get_vsite()) {
    $group_key = key($query->where);
    $query->add_table('og_membership');
    $query->add_where($group_key, 'og_membership_biblio.gid', $vsite->id, '=');
  }

  if ($view->name != 'os_publications_issued') {
    return;
  }

  // Change the query when filtering by publication type.
  if ($item['original_map'][0] == 'publications' && isset($item['original_map'][1]) && $item['original_map'][1] == 'type' && !empty($item['original_map'][2])) {
    $group_key = key($query->where);
    $query->add_where($group_key, 'biblio.type', array($item['original_map'][2]), 'IN');
  }


  // Get the settings of OS publication in variables.
  $order_field = variable_get('biblio_sort', 'biblio_year');
  $order_type = variable_get('biblio_order', 'ASC');
  $filter_types = variable_get('os_publications_filter_publication_types', array_keys(biblio_types()));

  // Backward compatibility with the old OS publication field order settings.
  switch ($order_field) {
    case 'author':
      $order_field = 'biblio_publisher';
      break;

    case 'year':
      $order_field = 'biblio_year';
      break;
  }

  $field = 'biblio.' . $order_field;

  // Order the publications by the selected field in OS publications settings.
  if (in_array($order_field, array('biblio_year', 'biblio_publisher'))) {
    $field_info = field_info_field($order_field);
    $table = _field_sql_storage_tablename($field_info);
    $field = $order_field . '_value';

    $query->add_field($table, $field, 'field');
    $field = $table . '.' . $field;
  }

  $query->orderby = array(
    array(
      'field' => $field,
      'direction' => $order_type,
    )
  );

  // Filter types the user selected.
  if ($filter_types) {
    $group_key = key($query->where);
    $query->add_where($group_key, 'biblio.type', $filter_types, 'IN');
  }
}

/**
 * Preprocess of biblio_ui_entity_export_area.
 *
 * Adding OS Publications CSS for Biblio export when showing Biblio entity.
 */
function os_publications_preprocess_biblio_ui_entity_export_area(&$variables) {
  drupal_add_css(drupal_get_path('module', 'os_publications') . '/css/os_publications.css');
}

/**
 * Preprocess of biblio_ui_view_export_area().
 *
 * Adding OS Publications CSS for Biblio export when showing Biblio view.
 */
function os_publications_preprocess_biblio_ui_view_export_area(&$variables) {
  drupal_add_css(drupal_get_path('module', 'os_publications') . '/css/os_publications.css');
}

/**
 * Implements hook_entity_view_alter().
 */
function os_publications_entity_view_alter(&$build, $type) {
  if ($type != 'biblio') {
    return;
  }

  $build['biblio_get_text']['#prefix'] = '<h3>'. t('Citation') . ':</h3><div id="citation-wrapper">';
  $build['export']['#suffix'] = '</div>';
}

/**
 * Implements hook_biblio_fields_info_alter().
 */
function os_publications_biblio_fields_info_alter(&$fields) {
  foreach ($fields as &$field) {
    $field['instance']['display']['default']['type'] = 'hidden';
  }
}

/**
 * Implements hook_field_extra_fields_alter().
 *
 * Set the dummy fields of the biblio rendered text and the export in a specific
 * order.
 */
function os_publications_field_extra_fields_alter(&$info) {
  $info = entity_get_info('biblio');
  if (empty($info['bundles'])) {
    return;
  }
  foreach (array_keys($info['bundles']) as $bundle) {
    $info['biblio'][$bundle]['display'] = array(
      'biblio_get_text' => array(
        'weight' => 10,
        'label' => t('Rendered text'),
      ),
      'export' => array(
        'weight' => 15,
        'label' => t('Export'),
      ),
    );
  }
}

