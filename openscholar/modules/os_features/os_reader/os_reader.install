<?php
/**
 * @file
 * Install file of the OS reader module.
 */

/**
 * Implements hook_schema().
 */
function os_reader_schema() {
  $schema = array();

  $schema['os_feed_item'] = array(
    'description' => 'Base table of the feed item.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier of the entry.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'guid' => array(
        'description' => 'Unique identifier for the feed item.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'the title of the feed item.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'The body of the feed item.',
        'type' => 'blob',
      ),
      'created' => array(
        'description' => 'The timestamp the feed created',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'url' => array(
        'description' => 'The URL of the news.',
        'type' => 'blob',
      ),
      'type' => array(
        'description' => 'The type of the entity.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'feed_item',
      ),
      'importer_type' => array(
        'description' => 'The type of the importer.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'news',
      ),
      'importer_nid' => array(
        'description' => 'The feed importer NID',
        'type' => 'int',
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Perform some setup items for the feed / feed_item content types provided by the feeds module
 */
function os_reader_install() {
  // Turn comments off by default.
  variable_set('comment_feed', COMMENT_NODE_CLOSED);
  variable_set('comment_feed_item', COMMENT_NODE_CLOSED);

  drupal_static_reset('og_fields_info');
  $og_field = og_fields_info(OG_AUDIENCE_FIELD);
  // Enable Entity reference prepopulate.
  $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
    'status' => TRUE,
    'action' => 'hide',
    'fallback' => 'hide',
    'skip_perm' => FALSE,
    'og_context' => TRUE,
    'action_on_edit' => TRUE
  );
  og_create_field(OG_AUDIENCE_FIELD, 'os_feed_item', 'feed_item', $og_field);
}

/**
 * Creating the OS feed item schema.
 */
function os_reader_update_7000() {
  $schema = os_reader_schema();
  db_create_table('os_feed_item', $schema['os_feed_item']);

  module_enable(array('feeds', 'feeds_xpathparser'));
}

/**
 * Adding an importer type.
 */
function os_reader_update_7001() {
  $schema = os_reader_schema();
  db_add_field('os_feed_item', 'importer_type', $schema['os_feed_item']['fields']['importer_type']);
}

/**
 * Adding field group reference to the feed importer entity.
 */
function os_reader_update_7002() {
  $og_field = og_fields_info(OG_AUDIENCE_FIELD);
  // Enable Entity reference prepopulate.
  $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
    'status' => TRUE,
    'action' => 'hide',
    'fallback' => 'hide',
    'skip_perm' => FALSE,
    'og_context' => TRUE,
    'action_on_edit' => TRUE
  );
  og_create_field(OG_AUDIENCE_FIELD, 'os_feed_item', 'feed_item', $og_field);
}

/**
 * Remove duplicate feed importers items.
 */
function os_reader_update_7003(&$sandbox) {
  // Each batch process only one.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'feed_importer')
    ->execute();

  if (empty($result['node'])) {
    return;
  }

  $importers = node_load_multiple(array_keys($result['node']));

  // Each batch process 100 feed item of each feed importer.
  foreach ($importers as $importer) {
    $group = og_get_entity_groups('node', $importer);
    $gid = reset($group['node']);
    $delete = array();

    // TODO: Get only the feed items which not yet imported.
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'os_feed_item')
      ->propertyCondition('importer_nid', $importer->nid)
      ->propertyOrderBy('title')
      ->propertyOrderBy('id')
      ->execute();

    if (empty($result['os_feed_item'])) {
      continue;
    }

    $feed_items = os_reader_feed_item_load_multiple(array_keys($result['os_feed_item']));
    $unique = array();

    foreach ($feed_items as $feed_item) {
      if (in_array($feed_item->title, $unique)) {
        $delete[] = $feed_item->id;
      }
      else {
        // Set the OG group ref field of this feed to the group which the node
        // importer belong to.
        $unique[] = $feed_item->title;
      }
    }

    entity_delete_multiple('os_feed_item', $delete);
  }
}
