<?php
// $Id$

include_once 'os_reader.features.inc';

/**
 * Implements hook_os_app_info().
 */
function os_reader_os_app_info() {
  $apps = array();

  $apps['os_reader'] = array(
    'path' => 'reader',
  	'nodetypes' => array(
  	  'feed',
    ),
    'views tabs' => array(
      'reader' => array('page'),
    ),
  );

  return $apps;
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_reader_vsite_og_node_type_info() {
  return array(
    'feed' => 'group content',
  );
}

/**
 * Implements hook_entity_info().
 */
function os_reader_entity_info() {
  return array(
    'os_feed_item' => array(
      'label' => t('OS feed item'),
      'entity class' => 'Entity',
      'base table' => 'os_feed_item',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
      ),
    ),
  );
}

/**
 * Create an OS feed item object.
 *
 * @param $values
 *  The initialized values of the OS feed item object.
 *
 * @return Entity
 *  The entity object of the OS feed item entry.
 */
function os_reader_create($values = array()) {
  global $user;

  $values += array(
    'time' => time(),
    'uid' => $user->uid,
  );

  return entity_create('os_feed_item', $values);
}

/**
 * Load an OS feed item entry.
 *
 * @param $id
 *  The OS feed item identifier.
 *
 * @return Entity
 *  The OS feed item object.
 */
function os_reader_load($id) {
  $results = entity_load('os_feed_item', array($id));
  return reset($results);
}

/**
 * Load multiple OS feed item entries.
 *
 * @param $ids
 *  List of IDs to load.
 *
 * @return Entity
 *  List of OS feed item entries.
 */
function os_reader_load_multiple($ids) {
  return entity_load('os_feed_item', $ids);
}

/**
 * Delete multiple imported entities.
 *
 * @param $ids
 *  The identifiers of the imported entities.
 */
function os_reader_delete_multiple($ids) {
  entity_delete_multiple('os_feed_item', $ids);
}

/**
 * Implements hook_feeds_plugins().
 */
function os_reader_feeds_plugins() {
  $info = array();
  $info['OsFeedReaderFetcher'] = array(
    'name' => t('OS feed reader fetcher'),
    'description' => t('Fetch info from a out source.'),
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'OsFeedReaderFetcher',
      'file' => 'OsFeedReaderFetcher.inc',
      'path' => drupal_get_path('module', 'os_reader') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Create a news node based on a feed item.
 *
 * @param $feed_id
 *   The identifier of the feed to copy.
 * @param $vsite_id
 *   VSite ID to which to assign the new node.
 */
function os_reader_save_to_news($feed_id, $vsite_id) {
  global $user;

  $feed = os_reader_load($feed_id);

  $node = entity_create('node', array('type' => 'news'));
  $wrapper = entity_metadata_wrapper('node', $node);

  $wrapper->title->set($feed->title);
  $wrapper->body->value->set($feed->description);
  $wrapper->field_news_date->set($feed->time);
  $wrapper->field_photo->set($feed->image);
  $wrapper->{OG_AUDIENCE_FIELD}->set(array($vsite_id));
  $wrapper->author->set($user->uid);
  $wrapper->save();
}
