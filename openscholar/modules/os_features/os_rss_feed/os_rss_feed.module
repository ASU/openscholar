<?php
/**
 * @file
 * Code for the OS RSS feed feature.
 */

include_once 'os_rss_feed.features.inc';
/**
 * @file
 * os_rss_feed.module
 */

/**
 * Implements hook_menu().
 */
function os_rss_feed_menu() {
  $items = array();

  $items['cp/build/features/os_rss_feed'] = array(
    'title' => 'OS RSS feed settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_rss_feed_settings'),
    'access callback' => 'spaces_access_admin',
  );

  $items['rss-feed'] = array(
    'title callback' => 'os_rss_feed_title_callback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_rss_feed_create'),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Title callback;
 */
function os_rss_feed_title_callback() {
  return t('@site-name RSS Feeds', array('@site-name' => variable_get('site_name')));
}

/**
 * Supply form for create RSS feed links.
 */
function os_rss_feed_create($form, $form_state) {
  global $base_url;

  if (!empty($form_state['input'])) {
    $links = array();

    if (!empty($form_state['input']['os_rss_feed_content_types'])) {
      $items = array();

      foreach ($form_state['input']['os_rss_feed_content_types'] as $bundle) {
        $items[] = array('key' => $bundle, 'link' => node_type_get_name($bundle));
      }

      $links = _os_rss_feed_create($items, 'type');
    }

    if (!empty($form_state['input']['os_rss_feed_vocabs'])) {
      $items = array();
      foreach ($form_state['input']['os_rss_feed_vocabs'] as $terms) {
        $taxonomy_terms = taxonomy_term_load_multiple($terms);

        foreach ($taxonomy_terms as $term) {
          $items[] = array('key' => $term->tid, 'link' => $term->name);
        }
      }

      $links = array_merge($links, _os_rss_feed_create($items, 'term'));
    }

    $form['results'] = array(
      '#type' => 'item',
      '#markup' => implode("<br />", $links),
    );

    $form['go_back'] = array(
      '#type' => 'item',
      '#markup' => t('!go-back and select more filters.', array('!go-back' => l(t('Go back'), 'rss-feed'))),
    );

    return $form;
  }

  $form['os_rss_feed_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => os_get_bundles(array(1)),
    '#description' => t('Select the content types whose rss deeds will be shown by default.'),
  );

  $vsite = module_exists('vsite') && vsite_get_vsite() ? vsite_get_vsite() : 0;
  ctools_include('taxonomy', 'vsite_vocab');
  $vocabs = vsite_vocab_get_vocabularies($vsite);

  // The 'vocabs' tree will contain select fields - one for each vocabulary.
  $vocab_form = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#title' => 'Filter by Vocabulary',
    '#description' => t('Only include posts tagged with terms from the following vocabularies.'),
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(libraries_get_path('select2') . '/select2.css'),
      'js' => array(
        array('type' => 'setting', 'data' => array(
          'sv_list_vocab_bundles' => $vocabs,
          'url' => $base_url,
        )),
        libraries_get_path('select2') . '/select2.js',
        drupal_get_path('module', 'os_rss_feed') . '/js/os_rss_feed.js',
      ),
    ),
  );

  // Create a select field for each vocabulary, with the vocabulary's terms as
  // the field's options.
  $selected_terms = variable_get('os_rss_feed_vocabs');
  foreach (array_keys($vocabs) as $vid) {
    $vocabulary = taxonomy_vocabulary_load($vid);

    // Get the vocabulary's terms.
    $terms = array();
    foreach (taxonomy_get_tree($vid) as $item) {
      $term = taxonomy_term_load($item->tid);
      $terms[$term->tid] = $term->name;
    }

    $element = 'vocab_' . $vid;
    $vocab_default_value = (isset($selected_terms[$element])) ? $selected_terms[$element] : array();

    // Create select field with the terms as options.
    $vocab_form[$element] = array(
      '#type' => 'select',
      '#options' => $terms,
      '#title' => $vocabulary->name,
      '#multiple' => TRUE,
      '#default_value' => $vocab_default_value,
      '#description' => t('Select vocab/terms that will show on RSS links in the page.'),
      '#attributes' => array('class' => array('terms-select')),
    );
  }

  $form['os_rss_feed_vocabs'] = $vocab_form;

  $form['actions'] = array(
    '#type' => 'actions',
    '#weight' => 10,
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    ),
  );

  $form['results'] = array(
    '#type' => 'item',
    '#weight' => 11,
    '#markup' => '',
    '#prefix' => '<div id="os_rss_feed_results">',
    '#suffix' => '</div>',
  );

  $form['#attached']['css'][] = drupal_get_path('module', 'os_rss_feed') . '/css/os_rss_fees_results.css';

  return $form;
}

/**
 * Build the links for the RSS.
 */
function _os_rss_feed_create($items, $key) {
  $links = array();
  foreach ($items as $item) {
    $options = array(
      'query' => array(
        $key => $item['key'],
      ),
    );

    $links[] = l($item['link'], 'os_rss_feed_export', $options);
  }

  return $links;
}

/**
 * Get RSS in xml format according to filter criteria.
 */
function os_rss_feed_export() {
  if (empty($_GET['type'])) {
    return;
  }

  if ($_GET['type'] == 'bundle') {
    $nids = os_rss_feed_get_nids('bundle', $_GET['type']);
  }
  else {
    $nids = os_rss_feed_get_nids('term', $_GET['term']);
  }

  return implode(",", $nids);
}

/**
 * Build the Content with the RSS feeds.
 *
 * @param $type
 *  The type we need search by: bundle or term.
 * @param $value
 *  The value we need to search for.
 *
 * @return Array
 *  List of node IDs.
 */
function os_rss_feed_get_nids($type, $value) {
  $nids = array();

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node');

  if (module_exists('vsite') && $vsite = vsite_get_vsite()) {
    $query->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $vsite->id);
  }

  if ($type == 'bundle') {
    $query->propertyCondition('type', $value);
  }
  else {
    $query->fieldCondition(OG_VOCAB_FIELD, 'target_id', $value);
  }

  $results = $query->execute();

  if (!empty($results['node'])) {
    $nids = array_keys($results['node']);
  }

  return $nids;
}
