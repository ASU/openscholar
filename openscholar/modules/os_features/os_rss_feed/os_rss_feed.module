<?php
/**
 * @file
 * Code for the OS RSS feed feature.
 */

include_once 'os_rss_feed.features.inc';
/**
 * @file
 * os_rss_feed.module
 */

/**
 * Implements hook_menu().
 */
function os_rss_feed_menu() {
  $items = array();

  $items['cp/build/features/os_rss_feed'] = array(
    'title' => 'OS RSS feed settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_rss_feed_settings'),
    'access callback' => 'spaces_access_admin',
  );

  $items['rss-feed'] = array(
    'title' => 'RSS export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_rss_feed_create'),
    'access arguments' => array('access content'),
  );

  $items['os_rss_feed_export'] = array(
    'title' => 'RSS export',
    'page callback' => 'os_rss_feed_export',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Supply form for create RSS feed links.
 */
function os_rss_feed_create() {

  $form['os_rss_feed_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => os_get_bundles(array(1)),
    '#description' => t('Select the content types whose rss deeds will be shown by default.'),
  );

  $vsite = module_exists('vsite') && vsite_get_vsite() ? vsite_get_vsite() : 0;
  ctools_include('taxonomy', 'vsite_vocab');
  $vocabs = vsite_vocab_get_vocabularies($vsite);

  // The 'vocabs' tree will contain select fields - one for each vocabulary.
  $vocab_form = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#title' => 'Filter by Vocabulary',
    '#description' => t('Only include posts tagged with terms from the following vocabularies.'),
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(libraries_get_path('select2') . '/select2.css'),
      'js' => array(
        array('type' => 'setting', 'data' => array('sv_list_vocab_bundles' => $vocabs)),
        libraries_get_path('select2') . '/select2.js',
        drupal_get_path('module', 'os_rss_feed') . '/js/os_rss_feed.js',
      ),
    ),
  );

  // Create a select field for each vocabulary, with the vocabulary's terms as
  // the field's options.
  $selected_terms = variable_get('os_rss_feed_vocabs');
  foreach (array_keys($vocabs) as $vid) {
    $vocabulary = taxonomy_vocabulary_load($vid);

    // Get the vocabulary's terms.
    $terms = array();
    foreach (taxonomy_get_tree($vid) as $item) {
      $term = taxonomy_term_load($item->tid);
      $terms[$term->tid] = $term->name;
    }

    $element = 'vocab_' . $vid;
    $vocab_default_value = (isset($selected_terms[$element])) ? $selected_terms[$element] : array();

    // Create select field with the terms as options.
    $vocab_form[$element] = array(
      '#type' => 'select',
      '#options' => $terms,
      '#title' => $vocabulary->name,
      '#multiple' => TRUE,
      '#default_value' => $vocab_default_value,
      '#description' => t('Select vocab/terms that will show on RSS links in the page.'),
    );
  }

  $form['os_rss_feed_vocabs'] = $vocab_form;

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    ),
  );

  return $form;
}

/**
 * Get RSS in xml format according to filter criteria.
 */
function os_rss_feed_export() {
  header('Content-type: text/xml');
  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";
  $output .= "<xml>";

  if (isset($_GET['type'])) {
    $nids = os_rss_feed_get_nids('bundle', $_GET['type']);
  }
  else {
    $nids = os_rss_feed_get_nids('terms', explode(",", $_GET['terms']));
  }

  $nodes = node_load_multiple($nids);

  foreach ($nodes as $node) {
    $render = node_view($node, 'teaser');
    unset($render['#contextual_links']);
    $output .= render($render);
  }

  $output .= "</xml>";

  echo $output;
}

/**
 * Build the Content with the RSS feeds.
 *
 * @param $type
 *  The type we need search by: bundles or terms.
 * @param $value
 *  The value we need to search for. For bundle pass a single arguments for
 *  terms pass an array.
 *
 * @return Array
 *  List of node IDs.
 */
function os_rss_feed_get_nids($type, $value) {
  $nids = array();

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node');

  if (module_exists('vsite') && $vsite = vsite_get_vsite()) {
    $query->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $vsite->id);
  }

  if ($type == 'bundle') {
    $query->propertyCondition('type', $value);
  }
  else {
    dpm($value);
    $query->fieldCondition(OG_VOCAB_FIELD, 'target_id', $value, 'IN');
  }

  $results = $query->execute();

  if (!empty($results['node'])) {
    $nids = array_keys($results['node']);
  }

  return $nids;
}
