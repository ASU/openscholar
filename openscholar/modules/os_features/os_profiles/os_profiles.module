<?php
// $Id$

/**
 * @file
 * Code for the Profiles feature.
 */

include_once 'os_profiles.features.inc';

/**
 * Implements hook_os_app_info().
 */
function os_profiles_os_app_info() {
  $apps = array();

  $apps['os_profiles'] = array(
    'path' => 'people',
  	'nodetypes' => array(
  	  'person',
    ),
    'views tabs' => array(
      'os_profiles' => array('page'),
    ),
    'importers' => array(
      'person' => array(
        'csv' => 'os_people',
      ),
    ),
  );

  return $apps;
}

/**
 * Implements hook_os_entity_view_modes()
 */
function os_profiles_os_entity_view_modes() {
  return array('node' => array(
    'person' => array('sidebar_teaser')
  ));
}


/**
 * Implements hook_process_hook() for node.
 *
 * Enter description here...
 */
function os_profiles_process_node(&$vars) {
  if ($vars['type'] !== 'person') {
    return;
  }

  // Helps poor theme developers find these changes to $variables
  $vars['classes'] .= ' modified-in-os_profiles_process_node';
  
  // Moves the profile photo thumbnail before teaser title (full name)
  if (isset($vars['content']['field_person_photo'])) {
    $vars['title_prefix'] += $vars['content']['field_person_photo'];
    unset($vars['content']['field_person_photo']);
  }

  //sidebar teaser
  if ($vars['view_mode'] == 'sidebar_teaser') {

    if (isset($vars['content']['pic_bio'])) {
      $vars['title_prefix'] = $vars['content']['pic_bio'];
      unset($vars['content']['pic_bio']);
      $vars['classes'] .= ' with-person-photo';
    }

    //move the title inside
    $vars['content']['node_title'] = array(
      '#weight' => -50,
      '#markup' => '<h1 ' . $vars['title_attributes'] . '><a href="' . $vars['node_url'] . '">' . $vars['title'] . '</a></h1>'
    );
    $vars['title'] = NULL;
  }

  // No image teaser.
  if ($vars['view_mode'] == 'no_image_teaser') {
    // Move the title inside.
    $vars['content']['node_title'] = array(
      '#weight' => -99,
      '#markup' => '<h1 ' . $vars['title_attributes'] . '><a href="' . $vars['node_url'] . '">' . $vars['title'] . '</a></h1>'
    );
    $vars['title'] = NULL;
  }

  // Includes custom CSS
  $vars['title_prefix']['#attached'] = array(
    'css' => array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'os_profiles') . '/os_profiles.css',
    ),
  );

  if (!$vars['teaser'] && !in_array($vars['view_mode'], array('sidebar_teaser', 'title', 'full'))) {
    $vars['title_prefix']['#suffix'] = '<h2>' . $vars['title'] . '</h2>';
  }

  // Exits if this was processed in hwpi_basetheme template.php
  if (isset($vars['content']['pic_bio'])) {
    return;
  }

  // Customizes field markup with prefixes and suffixes
  if (isset($vars['content']['field_email'])) {
    $email_plain = $vars['content']['field_email'][0]['#markup'];
    if ($email_plain) {
      $vars['content']['field_email'][0]['#markup'] = '<a href="mailto:' . $email_plain . '">email</a>';
    }
  }
  if (isset($vars['content']['field_phone'])) {
    $phone_plain = $vars['content']['field_phone'][0]['#markup'];
    if ($phone_plain) {
      $vars['content']['field_phone'][0]['#markup'] = t('p: ') . $phone_plain;
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Generates node title for Person nodes
 */
function os_profiles_node_presave($node) {
  if ($node->type !== 'person') {
    return;
  }

  // Sets the node title like "[first] [middle] [last]"
  $title = _os_profiles_person_node_title($node);
  if ($title) {
    $node->title = $title;
  }
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_profiles_vsite_og_node_type_info() {
  return array(
    'person' => 'group content',
  );
}

/**
 * Implements hook_field_display_ENTITY_TYPE_alter().
 */
function os_profiles_field_display_node_alter(&$display, $context) {
  // Disable field redirection if this node is configured to display via field_redirection, and we are not on the full_node page for the node.
  if (isset($display['type']) && $display['type'] == "field_redirection" && !node_is_page($context['entity'])) {
    $display['type'] = 'hidden';
  }
}

/**
 * Restrict access to the redirect field on the person node.
 * @return boolean
 */
function os_profiles_field_access($op, $field, $entity_type, $entity, $account) {
  if (!empty($entity) && $field['field_name'] == 'field_url' && $entity_type == 'node' && $entity->type == 'person' && $op == 'edit') {
    return user_access('bypass redirection', $account);
  }
  return TRUE;
}

/**
 * Prepares the node title for person nodes.
 */
function _os_profiles_person_node_title($node) {
  $fields = array('first_name', 'middle_name_or_initial', 'last_name');
  $values = array();
  foreach ($fields as $field) {
    $items = field_get_items('node', $node, 'field_' . $field);
    if (!empty($items[0]['value'])) {
      $values[] = $items[0]['value'];
    }
  }

  $title = implode(' ', $values);
  return $title;
}

/**
 * Adds alt and title text where appropriate
 */
function os_profiles_field_attach_load($entity_type, $entities, $view_mode) {
  if ($entity_type == 'node') {
    foreach ($entities as $e_id => $e) {
      if ($e->type != 'person' || !isset($e->title)) continue;

      if (!empty($e->field_person_photo)) {
        $e->field_person_photo[LANGUAGE_NONE][0]['alt'] = entity_label('node', $e) ? entity_label('node', $e) : '';
        $e->field_person_photo[LANGUAGE_NONE][0]['title'] = entity_label('node', $e) ? entity_label('node', $e) : '';
      }

      if (!empty($e->field_website[LANGUAGE_NONE])) {
        foreach ($e->field_website[LANGUAGE_NONE] as $k => $l) {
          $e->field_website[LANGUAGE_NONE][$k]['attributes']['title'] = $e->title.'\'s website';
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for cp_app_settings_form.
 *
 * Adds a checkbox in the os profiles app settings to disable default images
 * when viewing people's profiles.
 */
function os_profiles_form_cp_app_settings_form_alter(&$form, &$form_state) {
  if ($form['#feature'] != 'os_profiles') {
    return;
  }

  $profile_styles = array(
    'title' => 'Title',
    'teaser' => 'Teaser',
    'sidebar_teaser' => 'Sidebar teaser',
    'no_image_teaser' => 'No image teaser',
  );

  $profile_styles_hover = array();
  $counter = 0;
  foreach($profile_styles as $style => $name) {
    $counter ++;
    // Setup the new citation options to be wrapped for a popup.
    $profile_example_link = '<a href="#" class="profile-pop" data-popbox="pop'.$counter.'">' . t('@link_name', array('@link_name' => $name)) . '</a>';
    // Setup the h2.
    $profile_example_title = '<h2>' . t($name) . '</h2>';
    // Setup profile style example for the popup.
//    $profile_example = 'test text';
    $profile_example = _os_profiles_build_display_style_example($style);
    $profile_example_text = '<p>' . t('!profile_text', array('!profile_text' => $profile_example)) . '</p>';
    // Concat it all together.
    $profile_example_output = $profile_example_link . '<div id="pop'.$counter.'" class="stylebox">' . $profile_example_title . $profile_example_text . '</div>';
    $profile_styles_hover[$style] = $profile_example_output;
  }

  // Form element to choose display type.
  $form['os_profiles_display_type'] = array(
    '#type' => 'radios',
    '#title' => t('Display Types'),
    '#default_value' => variable_get('os_profiles_display_type', 'teaser'),
    '#options' => $profile_styles_hover,
    '#description' => t('Choose the display type of a person in the "/people" page.'),
    '#weight' => -999,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'os_profiles') . '/misc/os_profiles_settings.css',
      ),
      'js' => array(
        drupal_get_path('module', 'os_profiles') . '/misc/os_profiles_settings_hover.js',
      )
    ),
  );

  // Get properties of the image if there's a default image.
  if (module_exists('vsite') && $vsite = spaces_get_space() && $fid = variable_get('os_profiles_default_image_file', NULL)) {
    $file = file_load($fid);
    $x = variable_get('os_profiles_default_image_x', 0);
    $y = variable_get('os_profiles_default_image_y', 0);
    $height = $file->image_dimensions['height'];
    $width = $file->image_dimensions['width'];

    $instance = field_info_instance('node', 'field_person_photo', 'person');
    if ($instance['widget']['settings']['resolution']) {
      $ratio = explode('x', $instance['widget']['settings']['resolution']);
      $ratio = $ratio[0]/$ratio[1];
    }
  }

  // Form element for uploading a default image.
  $allowed_file_types = 'gif png jpg jpeg';
  $form['file'] = array(
    '#type' => 'managed_file',
    '#title' => t('Custom default image'),
    '#default_value' => variable_get('os_profiles_default_image_file', NULL),
    '#description' => t('Upload a photo and position the cropping tool over it if necessary.<br/>Allowed file types: <strong>' . $allowed_file_types . '</strong>'),
    '#upload_validators' => array(
      'file_validate_extensions' => array($allowed_file_types),
    ),
    '#process' => array(
      '_os_profiles_default_image_process',
    ),
    '#dimensions' => array(
      'x' => isset($x) ? $x : 0,
      'y' => isset($y) ? $y : 0,
      'height' => isset($height) ? $height : 140,
      'width' => isset($width) ? $width : 180,
      'ratio' => isset($ratio) ? $ratio : 0,
    ),
    '#attached' => array(
      'css' => array(
        '.form-managed-file img { max-width: none; }' => array(
          'type' => 'inline'
        )
      ),
    ),
    '#weight' => -100,
  );

  if (module_exists('vsite') && $space = spaces_get_space()) {
    $form['file']['#upload_location'] = 'public://' . $space->group->purl . '/files';
  }

  $form['#submit'][] = 'os_profiles_display_settings_submit';
}

/**
 * Process function; For uploading a default profile image.
 */
function _os_profiles_default_image_process($element, $form_state, $form) {
  $element = file_managed_file_process($element, $form_state, $form);
  $element = os_files_imagefield_crop_process($element, $form_state, $form);
  $element['remove_button']['#submit'][] = '_os_profiles_default_image_remove_handler';

  module_load_include('inc', 'comment_sources', 'comment_sources.admin');
  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;

  if ($fid && $element['#file']) {
    unset($element['filename']);
    // file_to_crop() take the cropped image and gets the original back
    $file_to_crop = _imagefield_crop_file_to_crop($element['#file']->fid);
    $element['preview'] = array(
      '#type' => 'markup',
      '#file' => $file_to_crop, // This is used by the #process function
      '#prefix' => '<div class="imagefield-crop-preview">',
      '#suffix' => '</div>',
      '#process' => array('_os_profiles_default_image_preview_process'),
      '#theme' => 'imagefield_crop_preview',
      '#markup' => theme('image', array(
          'path' => $element['#file']->uri,
          'getsize' => FALSE,
          'attributes' => array('class' => 'preview-existing'))
      ),
    );
    $element['cropbox'] = array(
      '#markup' => theme('image', array(
          'path' => $file_to_crop->uri,
          'attributes' => array(
            'class' => 'cropbox',
            'id' => $element['#id'] . '-cropbox',
          )
        )
      ),
    );
    $settings = array(
      $element['#id'] => array(
        'box' => array(
          'ratio' => $element['#dimensions']['ratio'],
          'box_width' => 400,
          'box_height' => 400,
        ),
        'minimum' => array(
          'width' => NULL,
          'height' => NULL,
        ),
      ),
    );
    $element['#attached']['js'][] = array(
      'data' => array('imagefield_crop' => $settings),
      'type' => 'setting',
      'scope' => 'header',
    );
    $element['#attached']['js'][] = drupal_get_path('module', 'imagefield_crop').'/Jcrop/js/jquery.Jcrop.js';
    $element['#attached']['js'][] = drupal_get_path('module', 'imagefield_crop').'/imagefield_crop.js';
    $element['#attached']['css'][] = drupal_get_path('module', 'imagefield_crop').'/Jcrop/css/jquery.Jcrop.css';

    $element['x'] = array(
      '#type' => 'hidden',
      '#default_value' => $element['#dimensions']['x'],
      '#attributes' => array(
        'class' => array(
          'edit-image-crop-x'
        )
      )
    );

    $element['y'] = array(
      '#type' => 'hidden',
      '#default_value' => $element['#dimensions']['y'],
      '#attributes' => array(
        'class' => array(
          'edit-image-crop-y'
        )
      )
    );

    $element['height'] = array(
      '#type' => 'hidden',
      '#default_value' => $element['#dimensions']['height'],
      '#attributes' => array(
        'class' => array(
          'edit-image-crop-height'
        )
      )
    );

    $element['width'] = array(
      '#type' => 'hidden',
      '#default_value' => $element['#dimensions']['width'],
      '#attributes' => array(
        'class' => array(
          'edit-image-crop-width'
        )
      )
    );
  }

  return $element;
}

/**
 * Preview process function; For previewing an uploaded default profile image.
 */
function _os_profiles_default_image_preview_process($element, $form_state, $form) {
  $element = @imagefield_crop_widget_preview_process($element, $form_state, $form);

  $scale = null;
  if (module_exists('vsite') && $vsite = spaces_get_space()) {
    $style = image_style_load('profile_thumbnail');
    $effects = reset($style['effects']);
    $scale = array(
      'width' => $effects['data']['width'],
      'height' =>$effects['data']['height'],
    );
  }

  $element['#attached']['js'][0]['data']['imagefield_crop']['edit-file']['preview']['width'] = isset($scale) ? $scale['width'] : 0;
  $element['#attached']['js'][0]['data']['imagefield_crop']['edit-file']['preview']['height'] = isset($scale) ? $scale['height'] : 0;

  $element['#imagefield_crop']['#width'] = isset($scale) ? $scale['width'] : 0;
  $element['#imagefield_crop']['#height'] = isset($scale) ? $scale['height'] : 0;

  return $element;
}

/**
 * Discards the default image when the user hits the "remove" button.
 */
function _os_profiles_default_image_remove_handler($form, $form_state) {
  $parents = $form_state['triggering_element']['#array_parents'];
  $element = drupal_array_get_nested_value($form, $parents);

  // @see: file_managed_file_submit
  if (isset($element['#file'])) {
    $orig = _imagefield_crop_file_to_crop($element['#file']->fid);
    file_usage_delete($orig, 'imagefield_crop', null, null, 0);
    file_usage_delete($element['#file'], 'os_profiles', null, null, 0);
    file_delete($orig);
    file_delete($element['#file']);
    $element['#value']['fid'] = null;
    unset($element['#file']);

    $values_element = $element['#extended'] ? $element['fid'] : $element;
    form_set_value($values_element, NULL, $form_state);
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], NULL);
  }
}

/**
 * Submit handler for uploading a default profile image.
 */
function os_profiles_display_settings_submit($form, $form_state) {
  $file_data = $form_state['input']['file'];
  if ($file_data['fid'] != 0) {
    $file = file_load($file_data['fid']);

    $item = array(
      'cropbox_x' => $file_data['x'],
      'cropbox_y' => $file_data['y'],
      'cropbox_height' => $file_data['height'],
      'cropbox_width' => $file_data['width'],
    );

    $scale = null;
    if (module_exists('vsite') && $vsite = spaces_get_space()) {
      $instance = field_info_instance('node', 'field_person_photo', 'person');
      if ($instance['widget']['settings']['resolution']) {
        $scale = explode('x', $instance['widget']['settings']['resolution']);
        $scale = array(
          'width' => $scale[0],
          'height' => $scale[1],
        );
      }
    }

    // this creates two images
    // $orig is the original, unmodified image
    // its saved so we can refer to it later
    // $file is original uploaded image that is then cropped to fit
    // it is the file that is displayed in render
    // it 'contains' the orig file, through the file usage table
    $orig = _imagefield_crop_file_to_crop($file->fid);
    if ($orig->fid == $file->fid) {
      $orig = imagefield_crop_create_copy($file);
      file_usage_add($orig, 'imagefield_crop', 'file', $file->fid);
    }
    _imagefield_crop_resize(drupal_realpath($orig->uri), $item, $scale, $file);
    file_save($file);

    if (module_exists('vsite') && $space = spaces_get_space() && $file->fid) {
      variable_set('os_profiles_default_image_file', $file_data['fid']);
      variable_set('os_profiles_default_image_x', $file_data['x']);
      variable_set('os_profiles_default_image_y', $file_data['y']);
    }
  }
  else {
    variable_set('os_profiles_default_image_file', 0);
  }

  // Set the display style for the profiles in the "/people" path.
  variable_set('os_profiles_display_type', $form_state['input']['os_profiles_display_type']);
}

function _os_profiles_build_display_style_example($style) {
  $node = _os_profiles_get_display_style_example();

  return _os_profiles_theme_display_style(array('style_name' => $style, 'node' => $node));
}

function _os_profiles_theme_display_style($variables) {
  // @todo: return styled node for popup over display style and remove hardcoding.
  $view_mode = $variables['style_name'];

  switch ($view_mode) {
    case 'title':
      $result = '
        <div class="dummy-content">
          <h1>John Fitzgerald Kennedy</h1>
        </div>
      ';
      break;
    case 'teaser':
      $result = '
        <div class="dummy-person-photo">
          <img src="http://localhost/openscholar/www/profiles/openscholar/themes/hwpi_basetheme/images/person-default-image.png">
        </div>
        <div class="dummy-content">
          <h1><a href="#">John Fitzgerald Kennedy</a></h1>
				  <div class="dummy-professional-title">Drupal developer at Gizra.inc<br>QA person at Gizra.inc</div>
				  <div class="dummy-bio">Often referred to by his initials JFK, was the 35th President of the United States, serving from 1961 until his assassination in 1963.</div>
				  <div class="dummy-phone">555-1234</div>
				  <div class="dummy-email"><a href="mailto:">example@address.com</a></div>
        </div>
      ';
      break;
    case 'sidebar_teaser':
      $result = '
        <div class="dummy-person-photo-sidebar-teaser">
          <img src="http://localhost/openscholar/www/profiles/openscholar/themes/hwpi_basetheme/images/person-default-image.png">
        </div>
        <div class="dummy-content-sidebar-teaser">
          <h1><a href="#">John Fitzgerald Kennedy</a></h1>
				  <div class="dummy-professional-title">Drupal developer at Gizra.inc, QA person at Gizra.inc</div>
        </div>
      ';
      break;
    case 'no_image_teaser':
      $result = '
        <div class="dummy-content">
          <h1><a href="#">John Fitzgerald Kennedy</a></h1>
				  <div class="dummy-professional-title">Drupal developer at Gizra.inc<br>QA person at Gizra.inc</div>
				  <div class="dummy-bio">Often referred to by his initials JFK, was the 35th President of the United States, serving from 1961 until his assassination in 1963.</div>
       	  <div class="dummy-phone">555-1234</div>
				  <div class="dummy-email"><a href="mailto:">example@address.com</a></div>
        </div>
      ';
      break;
    default:
      $result = '';
  }

  return $result;
}

/**
 * Return a pre-built node for an example citation.
 */
function _os_profiles_get_display_style_example() {
  // Profile for example.
  $node = new stdClass();
  $node->type = 'person';
  $node->nid = -1;
  $node->vid = -1;
  $node->status = FALSE;
  $node->promote = FALSE;
  $node->sticky = FALSE;
  $node->title = 'John Fitzgerald Kennedy';
  $node->created = time();
  $node->changed = time();

  $wrapper = entity_metadata_wrapper('node', $node);

  $wrapper->field_first_name->set('John');
  $wrapper->field_middle_name_or_initial->set('Fitzgerald');
  $wrapper->field_last_name->set('Kennedy');
  $wrapper->field_professional_title->set(array('The 35th president of the United States'));
  $wrapper->body->set(array('value' => 'Often referred to by his initials JFK, was the 35th President of the United States, serving from 1961 until his assassination in 1963.', 'format' => 'full_html'));
  $wrapper->field_phone->set('555-1234');
  $wrapper->field_email->set('example@address.com');

  return $node;
}

/**
 * Implements hook_entity_view_mode_alter().
 *
 * Changes the display type for profiles in the "/people" page
 * according to the settings in os_profiles app settings.
 */
function os_profiles_entity_view_mode_alter(&$view_mode, $context) {
  if ($_GET['q'] != 'people') {
    return;
  }

  if (!isset($context['entity']->view)) {
    return;
  }

  if ($context['entity']->view->name != 'os_profiles') {
    return;
  }

  $view_mode = variable_get('os_profiles_display_type', 'teaser');
}
