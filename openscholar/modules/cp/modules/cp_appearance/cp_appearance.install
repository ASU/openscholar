<?php

/**
 * @file
 * Install file for the CP appearance.
 */

/**
 * Implements hook_requirements().
 */
/*
function cp_appearance_requirements() {
  if (!function_exists('libraries_get_libraries')) {
    return array();
  }
  $libraries = libraries_get_libraries();

  if (!in_array('git', array_keys($libraries))) {
    $requirements['git_library_missing'] = array(
      'title' => t('GIT wrapper'),
      'value' => t("The <a href='@url'>GIT wrapper</a> library is missing. Downaload the library and placed it under @path", array(
        '@url' => 'https://github.com/cpliakas/git-wrapper',
        '@path' => drupal_get_path('profile', drupal_get_profile()) . '/libraries/git'
      )),
      'severity' => REQUIREMENT_ERROR,
    );

    return $requirements;
  }

  if (!file_exists(libraries_get_path('git') . '/autoload.php')) {
    $requirements['git_class_missing'] = array(
      'title' => t('GIT wrapper'),
      'value' => t("The GIT wrapper class is missing. You watch the <a href='@url'>documentation</a> for understading how to install the class.", array(
        '@url' => 'https://github.com/cpliakas/git-wrapper#installation',
      )),
      'severity' => REQUIREMENT_ERROR,
    );

    return $requirements;
  }
}
 */

/**
 * Move subtheme sites to folder with the vsite name.
 */
function cp_appearance_update_7000(&$sandbox) {
  $base_query = new EntityFieldQuery();
  $base_query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', array('department', 'personal', 'project'), 'IN');

  if (!isset($sandbox['total'])) {
    // count all the importers.
    $sandbox['progress'] = 0;

    $count_query = clone $base_query;
    $sandbox['total'] = $count_query
      ->count()
      ->execute();
  }
  $batch = 25;

  $nid = isset($sandbox['nid']) ? $sandbox['nid'] : 0;

  // Get the node IDs we need to process.
  $query = clone $base_query;
  $results = $query
    ->propertyCondition('nid', $nid, '>')
    ->range(0, $batch)
    ->execute();

  if (empty($results['node'])) {
    return;
  }

  $nids = array_keys($results['node']);

  foreach ($nids as $nid) {
    cp_appearance_move_subtheme($nid);
    if (drupal_is_cli()) {
      drush_log(dt('Moving ' . $nid), 'success');
    }
  }

  // Increase the progress.
  $sandbox['progress'] += $batch;
  $sandbox['nid'] = $nid;

  if ($sandbox['progress'] > $sandbox['total']) {
    // The total results amount is smaller then the amount we processed in a
    // single batch. After a single batch we can set the finished to true.
    $sandbox['#finished'] = 1;
  }
  else {
    // Calculate the progress percentage.
    $sandbox['#finished'] = ($sandbox['progress'] / $sandbox['total']);
  }
}

/**
 * Move the subthemes to a folder with the vsite name.
 *
 * @param $nid
 *  The vsite ID.
 */
function cp_appearance_move_subtheme($nid) {
  $files_folder = variable_get('file_public_path', 'sites/default/files');
  $vsite = vsite_get_vsite($nid);
  $flavors = $vsite->controllers->variable->get('flavors');

  // Move the files of the subtheme to the a folder with the name of the vsite.
  foreach ($flavors as &$flavor) {
    if (strpos($flavor['path'], 'zip') !== FALSE) {
      continue;
    }

    $new_path = str_replace($files_folder . '/subtheme', $files_folder . '/' . $vsite->og->purl . '/subtheme', $flavor['path']);

    if (!file_exists($new_path)) {
      $inside_path = str_replace($files_folder, '', $flavor['path']);
      // The new path does not exist, create it.
      drupal_mkdir("public://" . $vsite->og->purl . $inside_path, 0777, TRUE);
    }

    // Moving the subtheme.
    _cp_appearance_move_subtheme($flavor['path'], $new_path);

    $flavor['path'] = $new_path;
  }

  $vsite->controllers->variable->set('flavors', $flavors);
}

/**
 * Helper function; Move the subtheme folder to a new folder.
 *
 * @param $dir
 *  The old directory path.
 * @param $new_dir
 *  The new directory path.
 */
function _cp_appearance_move_subtheme($dir, $new_dir) {
  $it = new RecursiveDirectoryIterator($dir);
  $files = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);
  foreach($files as $file) {
    if ($file->getFilename() === '.' || $file->getFilename() === '..' || $file->isDir()) {
      continue;
    }

    $new_path = str_replace($dir, $new_dir, $file->getRealPath());

    // Due to permission issues there could be some error from the rename
    // function but the subtheme is copied to the new location so we can discard
    // the errors.
    @rename($file->getRealPath(), $new_path);
  }

  // Delete the original folder.
  cp_appearance_rmdir($dir);
}
