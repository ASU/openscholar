<?php

/**
 * @file
 * OS Revisions module file.
 */

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function os_revisions_form_node_form_alter(&$form, $form_state) {
  $content_type = $form['#node']->type;

  if (!variable_get("enable_revisions_$content_type", FALSE)) {
    $form['revision_information']['#access'] = FALSE;
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Removes purl from hook_init's implementations queue since it was already run
 * during custom_theme.
 */
function os_revisions_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_node_form_alter') {
    unset($implementations['os_revisions']);
    $implementations = array_merge(array('os_revisions' => FALSE), $implementations);
  }
}

/**
 * Implements hook_menu().
 */
function os_revisions_menu() {
  $items = array();
  $items['node/%node/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => 'os_revisions_revision_overview',
    'page arguments' => array(1),
    'access callback' => '_node_revision_access',
    'access arguments' => array(1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

function os_revisions_revision_overview($node) {
  drupal_set_title(t('Revisions for %title', array('%title' => $node->title)), PASS_THROUGH);

  $header = array(t('Revision'), array('data' => t('Operations'), 'colspan' => 2));

  $revisions = node_revision_list($node);

  $rows = array();
  $revert_permission = FALSE;
  if ((user_access('revert revisions') || user_access('administer nodes')) && node_access('update', $node)) {
    $revert_permission = TRUE;
  }
  $delete_permission = FALSE;
  if ((user_access('delete revisions') || user_access('administer nodes')) && node_access('delete', $node)) {
    $delete_permission = TRUE;
  }
  foreach ($revisions as $revision) {
    $row = array();
    $operations = array();

    if ($revision->current_vid > 0) {
      $row[] = array('data' => t('!date by !username', array('!date' => format_date($revision->timestamp, 'short'), '!username' => theme('username', array('account' => $revision))))
        . (($revision->log != '') ? '<p class="revision-log">' . filter_xss($revision->log) . '</p>' : ''),
        'class' => array('revision-current'));
      $operations[] = array('data' => drupal_placeholder(t('current revision')), 'class' => array('revision-current'), 'colspan' => 2);
    }
    else {
      $row[] = t('!date by !username', array('!date' => format_date($revision->timestamp, 'short'), '!username' => theme('username', array('account' => $revision))))
        . (($revision->log != '') ? '<p class="revision-log">' . filter_xss($revision->log) . '</p>' : '');
      if ($revert_permission) {
        $operations[] = l(t('revert'), "node/$node->nid/revisions/$revision->vid/revert");
      }
      if ($delete_permission) {
        $operations[] = l(t('delete'), "node/$node->nid/revisions/$revision->vid/delete");
      }
    }
    $rows[] = array_merge($row, $operations);
  }

  $build['node_revisions_table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
  );

  return $build;
}

/**
 * Implements hook_form_alter().
 *
 * Add revision check to submit handlers for node_form
 *
 */
function os_revisions_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'CONTENTTYPE_node_form') {
    $node = node_load($form_state['values']['nid']);
    if ($node && $node->revision && $node->is_current = TRUE) {
      array_unshift($form['actions']['submit']['#submit'], 'os_revisions_confirm_revision_overwrite');
    }
  }
}

/**
 *
 * Check to see if user is about to create a revision after the max number
 * of revisions has been reached. If so, show confirm to make sure the user
 * understands the oldest revision will be deleted.
 *
 */
function os_revisions_confirm_revision_overwrite($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  $revisions = node_revision_list($node);
  $max_revisions = variable_get("node_revision_restrict_number_for_content_type_" . str_replace("-", "_", $node->type), FALSE);
  if ($max_revisions && (count($revisions) >= $max_revisions - 1)) {
    return confirm_form("Are you sure you want to delete your oldest revision?","You are allowed a maximum number of $max_revisions for this content and this will be #" . ($max_revisions + 1) . ". Saving this revision will permanently delete the oldest revision.");
  }
}
