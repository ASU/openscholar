<?php
/**
 * @file
 * os_rss.module
 */

include_once 'os_rss.features.inc';

/**
 * Implements hook_menu().
 */
function os_rss_menu() {
  $items = array();

  $items['cp/build/features/os_rss_feed'] = array(
    'title' => 'OS RSS feed settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_rss_feed_settings'),
    'access callback' => 'spaces_access_admin',
  );

  $items['rss-feed'] = array(
    'title callback' => 'os_rss_feed_title_callback',
    'page callback' => 'os_rss_list_of_feeds',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Title callback;
 */
function os_rss_feed_title_callback() {
  return t('@site-name RSS Feeds', array('@site-name' => variable_get('site_name')));
}

/**
 * Implements hook_theme().
 */
function os_rss_theme() {
  return array(
    'os_rss_importer_bundles' => array(
      'variables' => array(
        'title' => '',
        'sub-title' => '',
        'items' => '',
      ),
    ),
  );
}

/**
 * Generate links for predefined terms and bundles.
 *
 * @param $content_types
 *  Lists of selected content types.
 * @param $vocabs
 *  Lists of selected vocabularies.
 *
 * @return Array
 *  Array of links.
 */
function os_rss_importer_feed_links($content_types, $vocabs) {
  $links = $items = array();

  if (!empty($content_types)) {
    $items = array();

    foreach ($content_types as $bundle) {
      if ($bundle) {
        $items[] = array('key' => $bundle, 'link' => node_type_get_name($bundle));
      }
    }

    $links['bundles'] = _os_rss_importer_feed_create($items, 'type');
  }

  if (!empty($vocabs)) {
    $items = array();
    foreach ($vocabs as $terms) {
      $taxonomy_terms = taxonomy_term_load_multiple($terms);

      foreach ($taxonomy_terms as $term) {
        $items[] = array('key' => $term->tid, 'link' => $term->name);
      }
    }

    $links['terms'] = _os_rss_importer_feed_create($items, 'term');
  }

  return $links;
}
/**
 * Supply form for create RSS feed links.
 */
function os_rss_list_of_feeds() {
  $selected_bundles = variable_get('os_rss_feed_content_types', array());
  $selected_vocabularies = variable_get('os_rss_feed_vocabs', array());

  $links = os_rss_importer_feed_links($selected_bundles, $selected_vocabularies);
  $content = theme('os_rss_importer_bundles', array(
    'title' => t('By content'),
    'sub-title' => t('You can filter content by pre defined node types:'),
    'items' => $links['bundles'],
  ));

  return $content;
}

/**
 * Build the links for the RSS.
 *
 * @param $items
 *  Arrays of items that will be rendered to links. The validate structure is:
 *    - key: The value which the node will be filtered by
 *    - link: The title of the feed.
 * @param $key
 *  The name of the query argument which hold the value that will be filter by.
 *
 * @return Array
 *  Array of rendered links.
 *
 * @code
 *  $taxonomy_terms = taxonomy_term_load_multiple($terms);
 *  foreach ($taxonomy_terms as $term) {
 *    $items[] = array('key' => $term->tid, 'link' => $term->name);
 *  }
 *
 * $links = array_merge($links, _os_rss_importer_feed_create($items, 'term'));
 * @endcode
 *
 * @see os_rss_importer_feed_create().
 */
function _os_rss_importer_feed_create($items, $key) {
  $links = array();
  foreach ($items as $item) {
    $options = array(
      'query' => array(
        $key => $item['key'],
      ),
    );

    $links[] = l($item['link'], 'os_rss_feed_export', $options);
  }

  return $links;
}

/**
 * Get the node IDs according the the filter criteria.
 */
function os_rss_importer_feed_export() {
  if (!empty($_GET['type']) && !empty($_GET['term'])) {
    $data = array(
      'bundle' => explode(',', $_GET['type']),
      'term' => explode(',', $_GET['term']),
    );
  }
  else if (!empty($_GET['type'])) {
    $data['bundle'] = explode(',', $_GET['type']);
  }
  elseif (!empty($_GET['term'])) {
    $data['term'] = explode(',', $_GET['term']);
  }
  else {
    return;
  }

  $nids = os_rss_importer_feed_get_nids($data);
  return implode(",", $nids);
}

/**
 * Build the Content with the RSS feeds.
 *
 * @param $info
 *  Array of search criteria with of one of the next filters:
 *    - bundle: Array of bundles.
 *    - term: Array of term IDs.
 *
 * @return Array
 *  List of node IDs.
 */
function os_rss_importer_feed_get_nids($info) {
  $nids = array();

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node');

  if (module_exists('vsite') && $vsite = vsite_get_vsite()) {
    $query->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $vsite->id);
  }

  if (!empty($info['bundle'])) {
    $query->propertyCondition('type', $info['bundle'], 'IN');
  }

  if (!empty($info['term'])) {
    $query->fieldCondition(OG_VOCAB_FIELD, 'target_id', $info['term']);
  }

  $results = $query->execute();

  if (!empty($results['node'])) {
    $nids = array_keys($results['node']);
  }

  return $nids;
}

/**
 * Implements hook_context_load_alter().
 */
function os_rss_context_load_alter(&$context) {
  if ($context->name != 'os_rss_feed') {
    return;
  }

  // The context of the rss feed is not node context. Adding the export_module
  // key and the settings_link key will add for the context a settings button.
  $context->export_module = 'os_rss_feed';
  $context->settings_link = TRUE;
}

/**
 * Create a predefined RSS feeds.
 */
function os_rss_feed_settings($form, $form_settings) {
  $values = array(
    'content_types' => variable_get('os_rss_feed_content_types', array()),
    'selected_terms' => variable_get('os_rss_feed_vocabs', array()),
  );

  if (empty($values['content_types'])) {
    $values['content_types'] = array(
      'news',
      'blog',
      'events',
      'presentation',
      'biblio',
    );
  }

  $values += array(
    'content_types' => array(),
    'selected_terms' => array(),
  );

  $form['os_rss_feed_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => os_get_bundles(array(1)),
    '#description' => t('Select the content types whose rss deeds will be shown by default.'),
    '#default_value' => $values['content_types'],
  );

  $vsite = vsite_get_vsite();
  ctools_include('taxonomy', 'vsite_vocab');
  $vocabs = vsite_vocab_get_vocabularies($vsite);

  // The 'vocabs' tree will contain select fields - one for each vocabulary.
  $vocab_form = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#title' => t('Filter by Vocabulary'),
    '#description' => t('Only include posts tagged with terms from the following vocabularies.'),
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(libraries_get_path('select2') . '/select2.css'),
      'js' => array(
        array('type' => 'setting', 'data' => array(
          'sv_list_vocab_bundles' => $vocabs,
        )),
        libraries_get_path('select2') . '/select2.js',
        drupal_get_path('module', 'os_rss') . '/js/os_rss_feed_vocabs.js',
      ),
    ),
  );

  // Create a select field for each vocabulary, with the vocabulary's terms as
  // the field's options.
  foreach (array_keys($vocabs) as $vid) {
    $vocabulary = taxonomy_vocabulary_load($vid);

    $element = 'vocab_' . $vid;
    $vocab_default_value = (isset($values['selected_terms'][$element])) ? $values['selected_terms'][$element] : array();

    // Get the vocabulary's terms.
    $terms = array();
    foreach (taxonomy_get_tree($vid) as $term) {
      $terms[$term->tid] = $term->name;
    }

    // Create select field with the terms as options.
    $vocab_form[$element] = array(
      '#type' => 'select',
      '#options' => $terms,
      '#title' => $vocabulary->name,
      '#multiple' => TRUE,
      '#default_value' => $vocab_default_value,
      '#description' => t('Select vocab/terms that will show on RSS links in the page.'),
      '#attributes' => array('class' => array('terms-select')),
    );
  }

  $form['os_rss_feed_vocabs'] = $vocab_form;

  return system_settings_form($form);
}

/**
 * Theme callback; Display the links of the feed with additional text.
 */
function theme_os_rss_importer_bundles($variables) {
  drupal_add_css(drupal_get_path('module', 'os_rss') . '/os_rss.css');
  $content = '<h2 class="os-reader-feed-title">' . $variables['title'] . '</h2>';
  $content .= '<span class="os-reader-feed-sub-title">' . $variables['sub-title'] . '</span>';
  $content .= theme('item_list', array(
    'items' => $variables['items'],
    'attributes' => array('class' => array('os-reader-feed-items')),
  ));

  return $content;
}
