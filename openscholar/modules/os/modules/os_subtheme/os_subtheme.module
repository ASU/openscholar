<?php
use GitWrapper\GitWrapper;
/**
 * @file
 * OS Subtheme module file.
 */

/**
 * Implements hook_menu_alter().
 */
function os_subtheme_menu() {
  $items['cp/appearance/sub-themes'] = array(
    'title' => 'Add subtheme',
    'access arguments' => array('add subthemes'),
    'page callback' => 'os_subtheme_select_method',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['cp/appearance/sub-themes/git'] = array(
    'title' => 'Git',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_subtheme_git_method'),
    'access arguments' => array('add subthemes'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function os_subtheme_menu_alter(&$items) {
  $items['cp/appearance/sub-themes/subtheme'] = $items['admin/structure/subtheme/add'];
  $items['cp/appearance/sub-themes/subtheme']['type'] = MENU_LOCAL_TASK;
  $items['cp/appearance/sub-themes/subtheme']['title'] = 'Zip';
}

/**
 * Implements hook_admin_paths().
 */
function os_subtheme_admin_paths() {
  return array(
    'cp/appearance/sub-themes' => TRUE,
    'cp/appearance/sub-themes/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function os_subtheme_permission() {
  return array(
    'add subthemes' => array(
      'title' => t('Add OS subthemes'),
      'description' => t('Add subthemes in various ways.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function os_subtheme_init() {
  if (!$og_context = og_context()) {
    return;
  }

  ctools_include('themes', 'os');
  $theme = os_theme_get();

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'subtheme')
    ->propertyCondition('status', SUBTHEME_DISABLED, '!=')
    ->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $og_context['gid'])
    ->fieldCondition('field_os_theme', 'value', $theme)
    ->execute();

  if (empty($result['subtheme'])) {
    return;
  }

  $subthemes = subtheme_load_multiple(array_keys($result['subtheme']));

  foreach ($subthemes as $subtheme) {
    $subtheme->addAssets();
  }
}

/**
 * Allowing to the user select the method he would like to upload.
 */
function os_subtheme_select_method() {
  return theme('item_list', array('items' => array(
    l(t('Zip'), 'cp/appearance/sub-themes/subtheme'),
    l(t('Git'), 'cp/appearance/sub-themes/git'),
  )));
}

/**
 * Upload theme via GIT.
 */
function os_subtheme_git_method($form, $form_state) {
  // Adding the git library.
  require_once libraries_get_path('git') . '/vendor/autoload.php';

  // Get the name of the current vsite so we can create a library to clone into
  // the themes via GIT.
  $vsite_name = strtolower(vsite_get_vsite()->og->title);
  $vsite_name = str_replace(array(' ', '-'), '_', $vsite_name);

  $form['repository'] = array(
    '#type' => 'textfield',
    '#title' => t('Git repository address'),
    '#description' => t('Enter the repository address'),

    '#ajax' => array(
      'callback' => 'os_subtheme_git_method_get_ajax_branches',
      'wrapper' => 'branches',
      'method' => 'replace',
    ),
  );

  $repository_address = !empty($form_state['values']['repository']) ? $form_state['values']['repository'] : 0;

  $form['branch'] = array(
    '#type' => 'select',
    '#title' => t('Branch'),
    '#description' => t('Enter the branch of the git repository'),
    '#prefix' => '<div id="branches">',
    '#suffix' => '</div>',
    '#options' => array(
      '---' => t(' --- Select a branch --- '),
    ),

    '#ajax' => array(
      'callback' => 'os_subtheme_git_method_get_valid_branches',
      'wrapper' => 'branches',
    ),
  );

  if ($repository_address) {
    $wrapper = new GitWrapper();
    $wrapper->setPrivateKey('.');

    if (empty($form_state['#git_path'])) {
      $path = drupal_realpath('public://') . '/git/' . $vsite_name . '/' . time();
      $form_state['#git_path'] = $path;

      // Clone the repo.
      $clone = TRUE;
    }
    else {
      $path = $form_state['#git_path'];
      // Don't clone the repo. We already have it.
      $clone = FALSE;
    }

    $git = $wrapper->workingCopy($path);

    // This will let us know if the repo. was cloned and will not clone the
    // repo. every time the user change the branch.
    if ($clone) {
      $git->clone($repository_address);
    }

    $branches = array();

    foreach ($git->getBranches()->remote() as $branch) {
      if (strpos($branch, ' -> ') !== FALSE) {
        // A branch named "origin/HEAD  -> xyz" is provided by the class, we
        // don't need him.
        continue;
      }

      $branches[str_replace(" ", "_", $branch)] = $branch;
    }

    $form['branch']['#options'] = array('---' => t(' --- Select a branch --- ')) + $branches;
  }

  $repository_branch = !empty($form_state['values']['branch']) ? $form_state['values']['branch'] : 0;

  if ($repository_branch != '---') {
    $git->checkout($repository_branch);

    $subtheme = subtheme_create(array(
      'path' => $path,
    ));

    $info = $subtheme->parseInfo();

    $form_state['subtheme'] = $subtheme;

    if (!_os_subtheme_validate($info['base theme'], 'branch')) {
      $form['branch']['#attributes'] = array(
        'class' => array('error'),
      );
    }
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
  );

  return $form;
}

/**
 * Validate the submitted form.
 */
function os_subtheme_git_method_validate($form, $form_state) {
  if (empty($form_state['subtheme'])) {
    return;
  }

  $subtheme = $form_state['subtheme'];
  $info = $subtheme->parseInfo();
  $info['base theme'] = !isset($info['base theme']) ? NULL : $info['base theme'];
  _os_subtheme_validate($info['base theme'], 'branch');
}

/**
 * Create the base theme.
 */
function os_subtheme_git_method_submit($form, &$form_state) {
  if (empty($form_state['subtheme'])) {
    return;
  }

  $og_context = og_context();

  $subtheme = $form_state['subtheme'];

  $info = $subtheme->parseInfo();

  $subtheme->title = vsite_get_vsite()->og->title . "'s " . filter_xss($info['base theme']) . " base theme.";
  $subtheme->status = SUBTHEME_ENABLED_LOAD_MANUAL;
  $form_state['redirect'] = 'cp/appearance';

  $wrapper = entity_metadata_wrapper('subtheme', $subtheme);
  $wrapper->field_os_theme->set($info['base theme']);
  $wrapper->{OG_AUDIENCE_FIELD}->set(array($og_context['gid']));

  $subtheme->save();
}

/**
 * Return piece of the form for AJAX rendering.
 */
function os_subtheme_git_method_get_ajax_branches($form, $form_state) {
  return $form['branch'];
}

/**
 * Return piece of the form for AJAX rendering.
 */
function os_subtheme_git_method_get_valid_branches($form, $form_state) {
  return $form['branch'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os_subtheme_form_subtheme_manage_alter(&$form, &$form_state) {
  // Redirecting the user after uploading a theme, and relate the subtheme to os
  // theme.
  $form['#submit'][] = 'os_subtheme_submit';

  // When uploading a new sub theme, we need to notify the submit handler to
  // set the default status as "Loaded manually"
  $form_state['new_os_subtheme'] = !empty($form_state['#entity']->is_new);

  // Adding a submit handler.
  $form['#validate'][] = 'os_subtheme_validate';

  // Remove the image field.
  $form['field_image']['#access'] = FALSE;

  // This entity has created via git - this is no longer required nad disable
  // the option to upload zip file so the theme will not be overridden.
  $form['file']['#disabled'] = !empty($form_state['#entity']->path);
  $form['file']['#required'] = empty($form_state['#entity']->path);
}

/**
 * Redirect the user back to the appearance page and reference the subtheme to
 * os theme.
 */
function os_subtheme_submit($form, &$form_state) {
  $subtheme = $form_state['#entity'];

  $info = $subtheme->parseInfo();

  // This is a new subtheme: set the status as loaded manually and redirect to
  // appearance control panel.
  if ($form_state['new_os_subtheme']) {
    $subtheme->status = SUBTHEME_ENABLED_LOAD_MANUAL;
    $form_state['redirect'] = 'cp/appearance';
  }

  $wrapper = entity_metadata_wrapper('subtheme', $subtheme);
  $wrapper->field_os_theme->set($info['base theme']);

  $subtheme->save();
}

/**
 * Validate handler - verify the user submitted a valid base theme.
 */
function os_subtheme_validate($form, $form_state) {
  $subtheme = $form_state['#entity'];
  $subtheme->fid = $form_state['values']['file'];
  $subtheme->extract();

  $info = $subtheme->parseInfo();
  _os_subtheme_validate($info['base theme'], 'file][upload');
}

/**
 * Validating the sub theme before curating the sub theme entity.
 * @param $value
 *  The base theme info.
 * @param $form_element_name
 *  The input name in the form.
 *
 * @return
 *  True or false.
 */
function _os_subtheme_validate($base_theme, $form_element_name) {
  ctools_include('themes', 'os');
  $themes = os_get_themes();

  if (!(isset($base_theme))) {
    form_set_error($form_element_name, t('The theme you uploaded is not valid: OS theme name to be based on is missing.'));
    return FALSE;
  }
  else if (!in_array($base_theme, array_keys($themes))) {
    form_set_error($form_element_name, t('The theme you uploaded is not valid: the base theme is not listed in the OS theme list.'));
    return FALSE;
  }

  return TRUE;
}
