<?php

/**
 * @file
 * OS Subtheme module file.
 */

/**
 * Implements hook_menu_alter().
 */
function os_subtheme_menu() {
  $items['cp/appearance/sub-themes'] = array(
    'title' => 'Add subtheme',
    'access arguments' => array('add subthemes'),
    'page callback' => 'os_subtheme_select_method',
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function os_subtheme_admin_paths() {
  return array(
    'cp/appearance/sub-themes' => TRUE,
    'cp/appearance/sub-themes/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function os_subtheme_permission() {
  return array(
    'add subthemes' => array(
      'title' => t('Add OS subthemes'),
      'description' => t('Add subthemes in various ways.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function os_subtheme_init() {
  if (!module_exists('og_context')) {
    return;
  }

  if (!$og_context = og_context()) {
    return;
  }

  ctools_include('themes', 'os');
  $theme = os_theme_get();

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'subtheme')
    ->propertyCondition('status', SUBTHEME_DISABLED, '!=')
    ->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $og_context['gid'])
    ->fieldCondition('field_os_theme', 'value', $theme)
    ->execute();

  if (empty($result['subtheme'])) {
    return;
  }

  $subthemes = subtheme_load_multiple(array_keys($result['subtheme']));

  foreach ($subthemes as $subtheme) {
    $subtheme->addAssets();
  }
}

/**
 * Create the base theme.
 *
 * TODO: bind the theme to the group using anohter submit handler.
 */
function os_subtheme_git_method_submit($form, &$form_state) {
  if (empty($form_state['subtheme'])) {
    return;
  }

  if ($og_context = og_context()) {
    return;
  }

  $subtheme = $form_state['subtheme'];

  $info = $subtheme->parseInfo();

  $subtheme->title = vsite_get_vsite()->og->title . "'s " . filter_xss($info['base theme']) . " base theme.";
  $subtheme->status = SUBTHEME_ENABLED_LOAD_MANUAL;
  $form_state['redirect'] = 'cp/appearance';

  $wrapper = entity_metadata_wrapper('subtheme', $subtheme);
  $wrapper->field_os_theme->set($info['base theme']);
  $wrapper->{OG_AUDIENCE_FIELD}->set(array($og_context['gid']));

  $subtheme->save();
}

/**
 * Validate handler - verify the user submitted a valid base theme.
 */
function os_subtheme_validate($form, $form_state) {
  $subtheme = $form_state['#entity'];
  $subtheme->fid = $form_state['values']['file'];
  $subtheme->extract();

  $info = $subtheme->parseInfo();
  _os_subtheme_validate($info['base theme'], 'file][upload');
}

/**
 * Validating the sub theme before curating the sub theme entity.
 *
 * @param $base_theme
 *  The theme name which the new theme is based on.
 * @param $form_element_name
 *  The input name in the form.
 *
 * @return bool
 *  True or false.
 */
function _os_subtheme_validate($base_theme, $form_element_name) {
  ctools_include('themes', 'os');
  $themes = os_get_themes();

  if (!(isset($base_theme))) {
    form_set_error($form_element_name, t('The theme you uploaded is not valid: OS theme name to be based on is missing.'));
    return FALSE;
  }
  else if (!in_array($base_theme, array_keys($themes))) {
    form_set_error($form_element_name, t('The theme you uploaded is not valid: the base theme is not listed in the OS theme list.'));
    return FALSE;
  }

  return TRUE;
}
