<?php

/**
 * @file
 * OS Subtheme module file.
 *
 * https://github.com/RoySegall/os-subtheme.git
 */

/**
 * Implements hook_menu_alter().
 */
function os_subtheme_menu() {
  $items = array();

  $items['cp/appearance/add-subtheme'] = array(
    'title' => 'Add subtheme',
    'page callback' => 'os_subtheme_select_method',
    'access arguments' => array('manage subtheme'),
    'type' => MENU_LOCAL_ACTION,
  );

  foreach (subtheme_types() as $key => $info) {
    // Check if there is an override function of the base form.
    $form_id = function_exists('os_subtheme_manage_' . $key) ? 'os_subtheme_manage_' . $key : 'os_subtheme_manage_base';

    $items['cp/appearance/add-subtheme/' . $key] = array(
      'title' => $info->name,
      'page callback' => 'drupal_get_form',
      'page arguments' => array($form_id, 3),
      'access arguments' => array('manage subtheme'),
    );
  }

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function os_subtheme_admin_paths() {
  return array(
    'cp/appearance/add-subtheme' => TRUE,
    'cp/appearance/add-subtheme/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function os_subtheme_permission() {
  return array(
    'manage subtheme' => array(
      'title' => t('Add subtheme'),
      'description' => t('Allow the user to add subtheme.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function os_subtheme_theme() {
  return array(
    'os_subtheme_add_subtheme_list' => array(),
  );
}

/**
 * Theme function - selecting the
 */
function theme_os_subtheme_add_subtheme_list($variables) {
  $types = $variables['types'];

  if ($types) {
    $output = '<ul class="admin-list">';
    foreach ($types as $type => $info) {
      $output .= '<li class="clearfix">';
      $output .= '<span class="label">' . l($info->name, 'cp/appearance/add-subtheme/' . $type) . '</span>';
      $output .= '<div class="description">' . filter_xss_admin($info->description) . '</div>';
      $output .= '</li>';
    }
    $output .= '</ul>';
  }
  else {
    $output = '<p>' . t('There is no subtheme types. Go to the <a href="@url">subtheme types create page</a> to add a new subtheme type.', array('@url' => url('admin/structure/subtheme'))) . '</p>';
  }

  return $output;
}

/**
 * List of subtheme types.
 */
function subtheme_types() {
  $types = array();

  $types['zip'] = (object)array(
    'name' => t('Zip'),
    'description' => t('Upload zip files.'),
  );

  $types['git'] = (object)array(
    'name' => t('Git'),
    'description' => t('Clone from a repository.'),
  );

  return $types;
}

/**
 * Select method for uploading the subtheme.
 */
function os_subtheme_select_method() {
  $types = subtheme_types();

  return theme('os_subtheme_add_subtheme_list', array(
    'types' => $types,
  ));
}

/**
 * Editing a basic sub theme.
 */
function os_subtheme_manage_base($form, &$form_state) {
  $form['file'] = array(
    '#title' => t('Themes'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
    '#required' => TRUE,
    '#upload_location' => 'public://',
    '#upload_validators' => array(
      'file_validate_extensions' => array('zip'),
    ),
    '#weight' => -99,
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
    'cancel' => array(
      '#type' => 'markup',
      '#markup' => l(t('Cancel'), 'cp/appearance/add-subtheme'),
    ),
  );

  return $form;
}

/**
 * Validate function - verify the subtheme based on a theme.
 */
function os_subtheme_manage_base_validate($form, $form_state) {
  $subtheme = new SubTheme($form_state['values']['file']);

  $subtheme->extract();
  $info = $subtheme->parseInfo();

  os_subtheme_validate_subtheme($info, 'file');
}

/**
 * Validate the subtheme before creating the subtheme entity.
 *
 * @param $info
 *  The parsed info file.
 * @param $form_element_name
 *  The form element.
 * @param bool $in_form
 *  Define if the validation is happening in a form. Used for set form errors.
 *  When validation is not happening in a form set to FALSE.
 *
 * @return bool
 *  Return true or false if the subtheme is validated or not.
 */
function os_subtheme_validate_subtheme($info, $form_element_name, $in_form = TRUE) {
  $themes = list_themes();

  if (empty($info['base theme'])) {
    if ($in_form) {
      form_set_error($form_element_name, t('The theme you uploaded is not valid: theme name to be based on is missing.'));
    }

    return FALSE;
  }
  else if (!in_array($info['base theme'], array_keys($themes))) {
    if ($in_form) {
      form_set_error($form_element_name, t('The theme you uploaded is not valid: the base theme is not listed in the theme list.'));
    }

    return FALSE;
  }
  else if (empty($info['os']['theme_type']) || empty($info['os']['theme_type'])) {
    if ($in_form) {
      form_set_error($form_element_name, t('The theme you uploaded is not valid: OpenScholar theme information, type and access, missing.'));
    }

    return FALSE;
  }

  return TRUE;
}

/**
 * Editing or creating a new sub theme.
 */
function os_subtheme_manage_base_submit($form, &$form_state) {
  $form_state['redirect'] = 'cp/appearance';
}
