<?php

use GitWrapper\GitWrapper;

/**
 * @file
 * OS Subtheme module file.
 *
 * https://github.com/RoySegall/os-subtheme.git
 */

/**
 * Implements hook_menu_alter().
 */
function os_subtheme_menu() {
  $items = array();

  $items['cp/appearance/add-subtheme'] = array(
    'title' => 'Add subtheme',
    'page callback' => 'os_subtheme_select_method',
    'access arguments' => array('manage subtheme'),
    'type' => MENU_LOCAL_ACTION,
  );

  foreach (subtheme_types() as $key => $info) {
    // Check if there is an override function of the base form.
    $form_id = function_exists('os_subtheme_manage_' . $key) ? 'os_subtheme_manage_' . $key : 'os_subtheme_manage_base';

    $items['cp/appearance/add-subtheme/' . $key] = array(
      'title' => $info->name,
      'page callback' => 'drupal_get_form',
      'page arguments' => array($form_id, 3),
      'access arguments' => array('manage subtheme'),
    );
  }

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function os_subtheme_admin_paths() {
  return array(
    'cp/appearance/add-subtheme' => TRUE,
    'cp/appearance/add-subtheme/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function os_subtheme_permission() {
  return array(
    'manage subtheme' => array(
      'title' => t('Add subtheme'),
      'description' => t('Allow the user to add subtheme.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function os_subtheme_theme() {
  return array(
    'os_subtheme_add_subtheme_list' => array(),
  );
}

/**
 * Theme function - selecting the
 */
function theme_os_subtheme_add_subtheme_list($variables) {
  $types = $variables['types'];

  if ($types) {
    $output = '<ul class="admin-list">';
    foreach ($types as $type => $info) {
      $output .= '<li class="clearfix">';
      $output .= '<span class="label">' . l($info->name, 'cp/appearance/add-subtheme/' . $type) . '</span>';
      $output .= '<div class="description">' . filter_xss_admin($info->description) . '</div>';
      $output .= '</li>';
    }
    $output .= '</ul>';
  }
  else {
    $output = '<p>' . t('There is no subtheme types. Go to the <a href="@url">subtheme types create page</a> to add a new subtheme type.', array('@url' => url('admin/structure/subtheme'))) . '</p>';
  }

  return $output;
}

/**
 * List of subtheme types.
 */
function subtheme_types() {
  $types = array();

  $types['zip'] = (object)array(
    'name' => t('Zip'),
    'description' => t('Upload zip files.'),
  );

  $types['git'] = (object)array(
    'name' => t('Git'),
    'description' => t('Clone from a repository.'),
  );

  return $types;
}

/**
 * Select method for uploading the subtheme.
 */
function os_subtheme_select_method() {
  $types = subtheme_types();

  return theme('os_subtheme_add_subtheme_list', array(
    'types' => $types,
  ));
}

/**
 * Editing a basic sub theme.
 */
function os_subtheme_manage_base($form, &$form_state) {
  $form['file'] = array(
    '#title' => t('Themes'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
    '#required' => TRUE,
    '#upload_location' => 'public://',
    '#upload_validators' => array(
      'file_validate_extensions' => array('zip'),
    ),
    '#weight' => -99,
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
    'cancel' => array(
      '#type' => 'markup',
      '#markup' => l(t('Cancel'), 'cp/appearance/add-subtheme'),
    ),
  );

  return $form;
}

/**
 * Validate function - verify the subtheme based on a theme.
 */
function os_subtheme_manage_base_validate($form, $form_state) {
  $subtheme = new SubTheme($form_state['values']['file']);

  $subtheme->extract();
  $info = $subtheme->parseInfo();

  os_subtheme_validate_subtheme($info, 'file');
}

/**
 * Validate the subtheme before creating the subtheme entity.
 *
 * @param $info
 *  The parsed info file.
 * @param $form_element_name
 *  The form element.
 * @param bool $in_form
 *  Define if the validation is happening in a form. Used for set form errors.
 *  When validation is not happening in a form set to FALSE.
 *
 * @return bool
 *  Return true or false if the subtheme is validated or not.
 */
function os_subtheme_validate_subtheme($info, $form_element_name, $in_form = TRUE) {
  $themes = list_themes();

  if (empty($info['module'])) {
    if ($in_form) {
      form_set_error($form_element_name, t('The theme you uploaded is not valid: theme name to be based on is missing.'));
    }

    return FALSE;
  }
  else if (!in_array($info['module'], array_keys($themes))) {
    if ($in_form) {
      form_set_error($form_element_name, t('The theme you uploaded is not valid: the base theme is not listed in the theme list.'));
    }

    return FALSE;
  }

  return TRUE;
}

/**
 * Editing or creating a new sub theme.
 */
function os_subtheme_manage_base_submit($form, &$form_state) {
  $file = new Subtheme($form_state['values']['file']);

  $vsite = vsite_get_vsite();
  $flavors = $vsite->controllers->variable->get('flavors');

  // Parse the info.
  $info = $file->parseInfo();

  // Save the path of the extracted theme for later.
  $flavors[$info['theme name']] = array(
    'path' => $file->extractPath,
    'name' => $info['name'],
  );

  $vsite->controllers->variable->set('flavors', $flavors);

  $form_state['redirect'] = 'cp/appearance';
}

/**
 * Copy files recursively.
 *
 * @param $src
 *  The directory we would like to copy.
 * @param $dst
 *  Destination of the directory.
 */
function os_subtheme_recurse_copy($src, $dst) {
  $dir = opendir($src);
  @mkdir($dst);

  while (FALSE !== ( $file = readdir($dir))) {
    if (($file != '.') && ($file != '..' )) {
      if (is_dir($src . '/' . $file) ) {
        os_subtheme_recurse_copy($src . '/' . $file,$dst . '/' . $file);
      }
      else {
        copy($src . '/' . $file,$dst . '/' . $file);
      }
    }
  }

  closedir($dir);
}

/**
 * Adding a theme - git.
 */
function os_subtheme_manage_git($form, $form_state, $type) {
  // Adding the git library.
  require_once libraries_get_path('git') . '/vendor/autoload.php';

  // Get the name of the current vsite so we can create a library to clone into
  // the themes via GIT.
  $form['repository'] = array(
    '#type' => 'textfield',
    '#title' => t('Git repository address'),
    '#description' => t('Enter the repository address'),
    '#required' => TRUE,

    '#ajax' => array(
      'callback' => 'os_subtheme_git_method_get_ajax_branches',
      'wrapper' => 'branches',
      'method' => 'replace',
    ),
  );

  $repository_address = !empty($form_state['values']['repository']) ? $form_state['values']['repository'] : 0;

  $form['branch'] = array(
    '#type' => 'select',
    '#title' => t('Branch'),
    '#description' => t('Enter the branch of the git repository'),
    '#prefix' => '<div id="branches">',
    '#suffix' => '</div>',
    '#options' => array(
      '---' => t(' --- Select a branch --- '),
    ),

    '#ajax' => array(
      'callback' => 'os_subtheme_git_method_get_valid_branches',
      'wrapper' => 'branches',
    ),
  );

  if ($repository_address) {
    $wrapper = new GitWrapper();
    $wrapper->setPrivateKey('.');

    if (empty($form_state['#git_path'])) {
      $path = drupal_realpath('public://') . '/git/' . time();
      $form_state['#git_path'] = $path;

      // Clone the repo.
      $clone = TRUE;
    }
    else {
      $path = $form_state['#git_path'];
      // Don't clone the repo. We already have it.
      $clone = FALSE;
    }

    $git = $wrapper->workingCopy($path);

    // This will let us know if the repo. was cloned and will not clone the
    // repo. every time the user change the branch.
    if ($clone) {
      $git->clone($repository_address);
    }

    $branches = array();

    foreach ($git->getBranches()->remote() as $branch) {
      if (strpos($branch, ' -> ') !== FALSE) {
        // A branch named "origin/HEAD  -> xyz" is provided by the class, we
        // don't need him.
        continue;
      }

      $branches[str_replace(" ", "_", $branch)] = $branch;
    }

    $form['branch']['#options'] = array('---' => t(' --- Select a branch --- ')) + $branches;

    $subtheme = new SubTheme();
    $subtheme->path = $path;
    $form_state['subtheme'] = $subtheme;
  }

  $repository_branch = !empty($form_state['values']['branch']) ? $form_state['values']['branch'] : 0;

  if ($repository_branch != '---') {
    $git->checkout($repository_branch);
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
  );

  return $form;
}

/**
 * Return piece of the form for AJAX rendering.
 */
function os_subtheme_git_method_get_ajax_branches($form, $form_state) {
  return $form['branch'];
}

/**
 * Return piece of the form for AJAX rendering.
 */
function os_subtheme_git_method_get_valid_branches($form, $form_state) {
  return $form['branch'];
}

/**
 * Validate handler - verify the user selected a branch.
 */
function os_subtheme_manage_git_validate($form, $form_state) {
  if ($form_state['values']['branch'] == '---') {
    form_set_error('branch', t('Select a branch.'));
    return;
  }

  if (empty($form_state['subtheme'])) {
    return;
  }

  $subtheme = $form_state['subtheme'];

  $info = $subtheme->parseInfo();

  os_subtheme_validate_subtheme($info, 'branch');
}

/**
 * Submit handler - create the git subtheme entity.
 */
function os_subtheme_manage_git_submit($form, &$form_state) {
  if (empty($form_state['#entity'])) {
    return;
  }

  $form_state['redirect'] = 'admin/subtheme';
}

/**
 * Search of the flavors uploaded to the vsite.
 */
function os_subtheme_get_flavors() {
  $vsite = vsite_get_vsite();
  $flavors = array();

  foreach ($vsite->controllers->variable->get('flavors') as $name => $info) {
    $info_files = glob($info['path'] . '/*.flav');
    $info_file = reset($info_files);

    // Get the information from the info file.
    $file_content = drupal_parse_info_file($info_file);

    $flavors[$name] = $file_content + array(
        'path' => $info['path'],
    );
  }
  
  return $flavors;
}
