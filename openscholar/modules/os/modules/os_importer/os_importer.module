<?php
/**
 * @file
 * Main file for the OS importer module.
 */
include_once 'os_importer.features.inc';

/**
 * Implements hook_feeds_plugins().
 */
function os_importer_feeds_plugins() {
  $info = array();
  $info['OsImporterFetcher'] = array(
    'name'        => t('OS importer fetcher'),
    'description' => t('Fetch node from a url.'),
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class'  => 'OsImporterFetcher',
      'file'   => 'OsImporterFetcher.inc',
      'path'   => drupal_get_path('module', 'os_importer') . '/plugins',
    ),
  );
  $info['OsImporterNodeProcessor'] = array(
    'name' => t('OS importer Node processor'),
    'description' => t('Import node from source. Including files form external URL.'),
    'help' => t('Create and update nodes from parsed content.'),
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'OsImporterNodeProcessor',
      'file' => 'OsImporterNodeProcessor.inc',
      'path' => drupal_get_path('module', 'os_importer') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Implements hook_node_insert().
 *
 * Import feed item when the user add the feed importer for the first time.
 */
function os_importer_node_insert($node) {
  if (!$node->is_new || $node->type != 'blog_import') {
    return;
  }

  feeds_source('os_blog_import_rss', $node->nid)->startImport();
}

/**
 * Implements hook_admin_paths().
 */
function os_importer_admin_paths() {
  return array(
    'os-importer/*' => TRUE,
    'cp/content/import/*'
  );
}

/**
 * Implements hook_os_add_new_links_alter().
 */
function os_importer_os_add_new_links_alter(&$links) {
  $item = menu_get_item();
  $apps = os_app_info();

  $current_app = '';
  foreach ($apps as $app) {
    if ($item['path'] == $app['path']) {
      $current_app = $app;
      break;
    }
  }

  if (!$current_app || empty($current_app['importers'])) {
    return;
  }

  foreach ($current_app['importers'] as $type => $importer) {
    if (!os_importer_import_access($importer)) {
      continue;
    }

    $links['os-importer-' . $type] = array(
      'title' => t('Import from @type', array('@type' => $type)),
      'href' => 'os-importer/' . $importer,
    );
  }
}

/**
 * Get all the content types which can be imported from external source.
 */
function os_importer_importable_content($type = '') {
  $apps = os_app_info();
  $vsite = vsite_get_vsite();
  $types = array();

  // Loop through the apps and check which app has an importer.
  foreach ($apps as $app) {
    if (empty($app['importers'])) {
      continue;
    }

    // Check to which bundle the user can import content.
    foreach ($app['importers'] as $bundle => $info) {
      $string = "create {$bundle} content";
      $access = $vsite ? og_user_access('node', $vsite->id, $string) : user_access($string);

      if ($access) {
        $types[$bundle] = $info;
      }
    }
  }

  return $type ? $types[$type] : $types;
}

/**
 * Implements hook_menu().
 */
function os_importer_menu() {
  $items = array();

  $items['os-importer/%'] = array(
    'title callback' => 'os_importer_importer_title',
    'title arguments' => array(1),
    'access callback' => 'os_importer_import_access',
    'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_importer_import', 1),
  );

  $items['os-importer/%/template'] = array(
    'page callback' => 'feeds_importer_template',
    'page arguments' => array(1),
    'file' => 'feeds.pages.inc',
    'file path' => drupal_get_path('module', 'feeds'),
    'access callback' => 'os_importer_import_access',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Generate callback for CSV importer page.
 *
 * @param $type
 *  The CSV importer type.
 *
 * @return String
 *  The title of the menu item.
 */
function os_importer_importer_title($type) {
  $types = node_type_get_types($type);

  return t('Import @type', array('@type' => strtolower($types[$type]->name)));
}

/**
 * Access callback - determine if the user can import content from csv.
 *
 * @param $type
 *  The type of the feeds importer.
 *
 * @return bool
 *  Return TRUE/FALSE.
 */
function os_importer_import_access($type) {
  $source = feeds_source($type);
  $config = $source->importer->getConfig();

  if (!$bundle = $config['processor']['config']['content_type']) {
    return FALSE;
  }

  $string = "create {$bundle} content";

  if ($vsite = vsite_get_vsite()) {
    return og_user_access('node', $vsite->id, $string);
  }
  else {
    return user_access($string);
  }
}

/**
 * Callback function for importing files from out source.
 *
 * @param $source
 *   Field mapper source settings.
 * @param $entity
 *   An entity object, for instance a node object.
 * @param $target
 *   A string identifying the target on the node.
 * @param $value
 *   The value to populate the target with.
 * @param $mapping
 *  Associative array of the mapping settings from the per mapping
 *  configuration form.
 */
function os_importer_map_files($source, $entity, $target, $value, $mapping) {
  if (!$value) {
    return;
  }
  $field_name = $source->importer->processor->config['file_field'];
  $files = array();

  $sources = explode('|', $value);
  foreach ($sources as $source) {
    $file = system_retrieve_file($source, 'public://', TRUE);
    $files[] = array(
      'fid' => $file->fid,
      'display' => 1,
      'description' => '',
    );
  }

  $entity->{$field_name}[$entity->language] = $files;
}

/**
 * Callback function for importing OG vocab terms.
 *
 * @see os_importer_map_files().
 */
function os_importer_map_og_vocab_terms($source, $entity, $target, $value, $mapping) {
  if (!$value) {
    return;
  }

  $terms = explode("|", $value);
  $vocabs = og_vocab_get_accessible_vocabs('node', $entity->type, OG_VOCAB_FIELD);

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabs, 'IN')
    ->propertyCondition('name', $terms, 'IN')
    ->execute();

  $terms = array_keys($result['taxonomy_term']);

  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->{OG_VOCAB_FIELD}->set($terms);
}

/**
 * Form callback - Adding an importer.
 */
function os_importer_import($form, &$form_state, $type) {
  $bundle = os_importer_importable_content($type);
  $form_state['type'] = $type;

  $options = array();
  foreach (array_keys($bundle) as $option) {
    $options[$option] = ucfirst($option);
  }

  $feed_importer = !empty($bundle['csv']) ? feeds_importer($bundle['csv']) : NULL;
  $form['format'] = array(
    '#type' => 'radios',
    '#multiple' => TRUE,
    '#title' => t('Format'),
    '#options' => $options,
    '#default_value' => key($options),
  );

  $form['import_source'] = array(

    // RSS title.
    'title' => array(
      '#type' => 'textfield',
      '#title' => t('Title'),

      '#description' => t('the title of the url.'),
      '#states' => array(
        'visible' => array(
          ':input[name="format"]' => array('value' => 'rss'),
        ),
      ),
    ),

    // RSS url.
    'url' => array(
      '#type' => 'textfield',
      '#title' => t('URL'),

      '#description' => t('The url of your data source.'),
      '#states' => array(
        'visible' => array(
          ':input[name="format"]' => array('value' => 'rss'),
        ),
      ),
    ),

    // iCal / CSV need upload file from user computer.
    'file' => array(
      '#title' => t('File'),
      '#type' => 'managed_file',
      '#description' => t('Select a file form your computer to import.'),
      '#upload_location' => 'public://',
      '#upload_validators' => array(
        'file_validate_extensions' => array('ics csv'),
      ),
      '#states' => array(
        'invisible' => array(
          ':input[name="format"]' => array('value' => 'rss'),
        ),
      ),
      '#weight' => -99,
    ),
  );

  // Only CSV parsers have a template.
  if ($feed_importer->parser instanceof FeedsCSVParser) {
    $form['container'] = array(
      '#type' => 'container',
      '#states' => array(
        'visible' => array(
          ':input[name="format"]' => array('value' => 'csv'),
        ),
      ),
      'template' => array(
        '#markup' => l(t('Download a template'), 'os-importer/' . $bundle['csv'] . '/template'),
      ),
    );
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    ),
  );

  return $form;
}

/**
 * Form submit.
 */
function os_importer_import_submit($form, &$form_state) {
  $values = $form_state['values'];

  if ($values['format'] == 'csv') {
    $fid = $values['file'];
    $file = file_load($fid);

    $bundle = os_importer_importable_content($form_state['type']);

    $source = feeds_source($bundle['csv']);
    $fetcher_config = $source->getConfigFor($source->importer->fetcher);
    $fetcher_config['source'] = $file->uri;
    $fetcher_config['file'] = $file;
    $source->setConfigFor($source->importer->fetcher, $fetcher_config);
    $source->save();

    $source->startImport();
  }
  else {
  }
}
