<?php

/**
 * Implements hook_library().
 */
function os_common_library() {
  $info = array();

  $path = drupal_get_path('module', 'os_common');
  purl_disable(TRUE);
  $rest = url('api');

  $info['angularjs'] = array(
    'title' => 'AngularJS',
    'version' => '1.3.14',
    'js' => array(
      '//ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.js' => array(
        'type' => 'external',
        'group' => JS_LIBRARY,
        'weight' => -15
      ),
      '//ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular-sanitize.js' => array(
        'type' => 'external',
        'group' => JS_LIBRARY,
        'weight' => -14
      )
    )
  );

  $info['auth'] = array(
    'title' => 'Authentication',
    'version' => '1.0',
    'js' => array(
      $path . '/auth/auth.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -10
      ),
    ),
    'dependencies' => array(
      array('os_common', 'angularjs'),
    ),
  );

  $info['select2'] = array(
    'title' => t('Select2'),
    'version' => '3.4.3',
    'js' => array(
      libraries_get_path('select2') . '/select2.min.js' => array(),
      drupal_get_path('module', 'os') . '/js/select2-widget.js' => array(),
    ),
    'css' => array(
      libraries_get_path('select2') . '/select2.css',
      drupal_get_path('module', 'os') . '/css/select2-widget.css',
    ),
  );

  $info['angular_select2'] = array(
    'title' => t('Angualr JS select 2'),
    'version' => '0.0.5',
    'js' => array(
      libraries_get_path('angular_select2') . '/dist/select.min.js' => array(),
    ),
    'css' => array(
      libraries_get_path('angular_select2') . '/dist/select.min.css' => array(),
    ),
    'dependencies' => array(
      array('os_common', 'select2'),
      array('os_common', 'angularjs'),
    ),
  );

  $info['angular_ui'] = array(
    'title' => t('Angualr UI'),
    'version' => '0.0.5',
    'js' => array(
      drupal_get_path('module', 'os_common') . '/js/ui-bootstrap-custom-0.12.1.min.js' => array(),
      drupal_get_path('module', 'os_common') . '/js/ui-bootstrap-custom-tpls-0.12.1.min.js' => array(),
    ),
    'dependencies' => array(
      array('os_common', 'select2'),
      array('os_common', 'angularjs'),
    ),
  );

  $info['taxonomy_tree'] = array(
    'title' => t('Angular taxonomy tree'),
    'version' => '0.0.5',
    'js' => array(
      libraries_get_path('angular-ivh-treeview') . '/dist/ivh-treeview.min.js' => array(),
    ),
    'css' => array(
      libraries_get_path('angular-ivh-treeview') . '/dist/ivh-treeview.min.css' => array(),
    ),
    'dependencies' => array(
      array('os_common', 'select2'),
      array('os_common', 'angularjs'),
    ),
  );

  $info['helpers'] = array(
    'title' => 'OS Common Helpers',
    'version' => '1.0',
    'js' => array(
      $path.'/helpers/helpers.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -10,
      ),
    )
  );

  $info['JSPager'] = array(
    'title' => 'JS Pager',
    'version' => '1.0',
    'js' => array(
      $path.'/JSPager/JSPager.module.js' => array(),
      array(
        'type' => 'setting',
        'data' => array(
          'paths' => array(
            'JSPager' => url($path.'/JSPager'),
          )
        )
      )
    ),
    'dependencies' => array(
      array('os_common', 'angularjs'),
      array('os_common', 'helpers')
    )
  );

  $info['EntityService'] = array(
    'title' => 'EntityService',
    'version' => '1.0',
    'js' => array(
      $path.'/EntityService/EntityService.module.js' => array(),
      array(
        'type' => 'setting',
        'data' => array(
          'paths' => array(
            'api' => $rest
          )
        )
      )
    ),
    'dependencies' => array(
      array('os_common', 'angularjs'),
      array('os_common', 'helpers')
    )
  );


  $bower = libraries_get_path('components');
  $info['bootstrap'] = array(
    'title' => 'Boostrap',
    'version' => '1.0',
    'js' => array(
      $bower.'/bootstrap/dist/js/bootstrap.js' => array(),
    ),
    'css' => array(
      $bower.'/bootstrap/dist/css/bootstrap.css' => array(),
    )
  );

  $info['angular-modal-service'] = array(
    'title' => 'Angular Modal Service',
    'version' => '1.0',
    'js' => array(
      $bower.'/angular-modal-service/dst/angular-modal-service.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui.dialog'),
    )
  );

  $info['ng-file-upload'] = array(
    'title' => t('Angular File Upload'),
    'version' => '3.1.0',
    'js' => array(
      $bower . '/ng-file-upload/angular-file-upload.js' => array(),
      $bower . '/ng-file-upload/angular-file-upload-shim.js' => array(),
    ),
    'dependencies' => array(
      array('os_common', 'angularjs'),
    )
  );

  $info['TaxonomyWidget'] = array(
    'title' => 'Angular Taxonomy Widget',
    'version' => '1.0',
    'js' => array(
      $path.'/TaxonomyWidget/TaxonomyWidget.module.js' => array(),
      array(
        'data' => array(
          'paths' => array(
            'TaxonomyWidget' => url($path.'/TaxonomyWidget'),
          )
        ),
        'type' => 'setting',
      )
    ),
    'dependencies' => array(
      array('os_common', 'angularjs'),
      array('os_common', 'EntityService'),
      array('os_common', 'angular_select2'),
      array('os_common', 'angular_ui'),
      array('os_common', 'taxonomy_tree'),
    )
  );

  $info['FileEditor'] = array(
    'title' => 'Angular File Editor',
    'version' => '1.0',
    'js' => array(
      $path.'/FileEditor/FileEditor.module.js' => array(),
      array(
        'data' => array(
          'paths' => array(
            'FileEditor' => url($path.'/FileEditor'),
          )
        ),
        'type' => 'setting',
      )
    ),
    'dependencies' => array(
      array('os_common', 'ng-file-upload'),
      array('os_common', 'EntityService'),
      array('os_common', 'TaxonomyWidget'),
    )
  );

  purl_disable(FALSE);

  return $info;
}

/**
 * Define the angular app to be used on this page.
 */
function os_common_angular_app($name = '') {
  $app_name = &drupal_static(__FUNCTION__, '');

  if ($name) {
    $app_name = $name;
  }

  return $app_name;
}

/**
 * Implements hook_preprocess_html().
 *
 * Adds a defined angular app to the body attribute of the page.
 */
function os_common_preprocess_html(&$vars) {
  if ($app_name = os_common_angular_app()) {
    $vars['attributes_array']['ng-app'] = $app_name;
  }
}

/**
 * Implements hook_node_form_alter().
 */
function os_common_form_node_form_alter(&$form, &$form_state) {

  //Determine if this form has an angular app.
  if($app = os_common_get_angular_module($form['#id'])) {
    // Set the active angular app as the app with the same name as this form id.
    os_common_angular_app($app->name);
    $form['#attached']['js'][] = $app->uri;
  }

}

/**
 * Get angular js files.
 *
 * Returns Object
 * $o->name = app-name;
 * $o->filename = app-name.js
 * $o->uri = full/path/tofile/app-name.js
 */
function os_common_get_angular_module($app_name){

  if ($cache = cache_get('os_common_angular_modules')) {
    $apps = $cache->data;
  } else {
    //Get os_common_modules
    $apps = file_scan_directory(drupal_get_path('module', 'os_common').'/modules', "/.*\.js/", array('key' => 'name'));
    //Allow other modules to add their own.
    drupal_alter('os_angular_modules', $apps);

    cache_set('os_common_angular_modules', $apps);
  }

  if (isset($apps[$app_name])) {
    return $apps[$app_name];
  }

  return FALSE;
}
