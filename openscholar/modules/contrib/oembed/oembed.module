<?php

/**
 * @file
 * Input filter that enhances oEmbed enabled URL:s with extra content
 */

/**
 * Implements hook_help().
 */
function oembed_help($path, $arg) {
  switch ($path) {
    case 'admin/help#oembed':
      return '<p>' . t('Adds an input filter for replacing oEmbed enabled URLs with embedded content') . '</p>';
  }
}

/**
 * Implements hook_filter_info().
 */
function oembed_filter_info() {
  $filters['oembed'] = array(
    'title' => t('oEmbed filter'),
    'description' => t('Embeds content for oEmbed-enabled web addresses and turns the rest, and e-mail addresses, into clickable links.'),
    'prepare callback' => 'oembed_filter_oembed_prepare',
    'process callback' => 'oembed_filter_oembed_process',
    'settings callback' => 'oembed_filter_oembed_settings',
    'tips callback' => 'oembed_filter_oembed_tips',
    'default settings' => array(
      'view_mode' => 'full',
      'autoembed' => TRUE,
    ),
    'cache' => FALSE,
  );
  $filters['oembed_legacy'] = array(
    'title' => t('oEmbed legacy filter'),
    'description' => t('Embeds content for oEmbed-enabled web addresses and turns the rest, and e-mail addresses, into clickable links.'),
    'process callback' => 'oembed_filter_oembed_legacy_process',
    'settings callback' => 'oembed_filter_oembed_legacy_settings',
    'default settings' => array(
      'maxwidth' => '',
      'maxheight' => '',
    ),
  );
  return $filters;
}

/**
 * Implements hook_filter_FILTER_settings().
 */
function oembed_filter_oembed_legacy_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  module_load_include('inc', 'oembed', 'oembed_legacy');
  return _oembed_filter_settings($form, $form_state, $filter, $format, $defaults);
}

/**
 * Implements hook_filter_FILTER_process().
 */
function oembed_filter_oembed_legacy_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  module_load_include('inc', 'oembed', 'oembed_legacy');
  return _oembed_filter_apply($text, $filter, $format, $langcode, $cache, $cache_id);
}

/**
 * Implements hook_filter_FILTER_settings().
 */
function oembed_filter_oembed_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;
  $settings = array();

  $options = array();
  $entity_info = entity_get_info('file');
  $view_modes = $entity_info['view modes'];
  foreach ($view_modes as $view_mode_name => $view_mode_info) {
    $options[$view_mode_name] = $view_mode_info['label'];
  }

  $settings['view_mode'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('File entity view mode'),
    '#default_value' => $filter->settings['view_mode'],
  );
  $settings['autoembed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically embed URLs'),
    '#default_value' => $filter->settings['autoembed'],
    '#description' => t('When possible, embed the media content from a URL directly in the input.'),
  );
  return $settings;
}

/**
 * Implements hook_filter_FILTER_process().
 */
function oembed_filter_oembed_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
  if ($filter->settings['autoembed']) {
    $pattern = '|^\s*(https?://[^\s"]+)\s*$|im';
    $text = preg_replace_callback($pattern, 'oembed_preg_auto_replace', $text);
  }
  return $text;
}

/**
 * Implements hook_filter_FILTER_process().
 */
function oembed_filter_oembed_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $_oembed_filter_settings;

  $_oembed_filter_settings = $filter->settings;

  // Undo auto paragraph around media tags.
  $text = preg_replace('/<p>\s*+(\[embed\b.*?\].+?\[\/embed\])\s*+<\/p>/s', '$1', $text);

  $pattern = '/(.?)\[embed\b(.*?)\](.+?)\[\/embed\](.?)/s';
  $text = preg_replace_callback($pattern, 'oembed_preg_tag_replace', $text);

  unset($_oembed_filter_settings);

  return $text;
}

/**
 * Implements hook_filter_FILTER_tips().
 */
function oembed_filter_oembed_tips($filter, $format, $long) {
  if ($long) {
    return t('Embed content by wrapping a supported URL in [embed] &hellip; [/embed]. Set options such as width and height with attributes [embed width="123" height="456"] &hellip; [/embed]. Unsupported options will be ignored.');
  }
  else {
    return t('Embed content by wrapping a supported URL in [embed] &hellip; [/embed].');
  }
}

/**
 * PREG replace callback finds [embed] shortcodes, URLs and request options.
 */
function oembed_preg_tag_replace($match) {
  global $_oembed_filter_settings;

  // allow [[oembed]] syntax for escaping a tag
  if ($match[1] == '[' && $match[4] == ']') {
    return substr($match[0], 1, -1);
  }

  $url = $match[3];

  $view_mode = $_oembed_filter_settings['view_mode'];

  $options = !empty($match[2]) ? oembed_parse_attr($match[2]) : array();

  if (isset($options['view_mode'])) {
    $view_mode = $options['view_mode'];
    unset($options['view_mode']);
  }

  return $match[1] . oembed_resolve_link($options, $url, $view_mode) . $match[4];
}

/**
 * PREG replace callback finds URLs
 */
function oembed_preg_auto_replace($match) {
  return '[embed]'. $match[1] ."[/embed]\n";
}

/**
 * PREG replace callback finds [embed] shortcodes, URLs and request options.
 *
 * @see MediaInternetOEmbedHandler::preSave().
 */
function oembed_resolve_link($options, $url, $view_mode) {

  $return = '';
  $url = decode_entities($url);

  $element = array();
  try {
    $provider = media_internet_get_provider($url);
    $provider->validate();
  } catch (Exception $e) {
    drupal_set_message($e->getMessage());
    return $url;
  }

  $file = $provider->save();
  $file->override = $options;
  if (isset($file->fid)) {
    $element = file_view($file, $view_mode);
    $return = drupal_render($element);
  }
  if (empty($return)) {
    $return = $url;
  }

  return $return;
}

/**
 * Retrieve all attributes from the shortcodes tag.
 *
 * @see shortcode_parse_atts in WordPress 3.1.3.
 * @param string $text
 * @return array List of attributes and their value.
 */
function oembed_parse_attr($text) {
  $attributes = array();
  $pattern = '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';
  $text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);
  if (preg_match_all($pattern, $text, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $match) {
      if (!empty($match[1])) {
        $attributes[strtolower($match[1])] = stripcslashes($match[2]);
      }
      elseif (!empty($match[3])) {
        $attributes[strtolower($match[3])] = stripcslashes($match[4]);
      }
      elseif (!empty($match[5])) {
        $attributes[strtolower($match[5])] = stripcslashes($match[6]);
      }
      elseif (isset($match[7]) and strlen($match[7])) {
        $attributes[] = stripcslashes($match[7]);
      }
      elseif (isset($match[8])) {
        $attributes[] = stripcslashes($match[8]);
      }
    }
  } else {
    $attributes = ltrim($text);
  }
  return $attributes;
}
