<?php

/**
 *  @file media_oembed/media_oembed.module
 *
 *  Media: oEmbed provides a stream wrapper and formatters for videos provided
 *  by oEmbed, format documented at http://oembed.com/.
 */

/**
 *  Create stream wrapper for oEmbed videos.
 */
function media_oembed_stream_wrappers() {
  return array(
    'oembed' => array(
      'name' => t('oEmbed resources'),
      'class' => 'MediaOEmbedStreamWrapper',
      'description' => t('Resources provided by oEmbed.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function media_oembed_element_info_alter(&$types) {
  $types['oembed_wysiwyg']['#pre_render'][] = 'media_oembed_pre_render_thumbnail';
}

/**
 * #pre_render callback for 'oembed_thumbnail' elements.
 *
 * For oEmbed responses with no thumbnail image, fall back to Media module's
 * generic icon rather than rendering nothing, so that there's something to
 * select within the Media browser or WYSIWYG editor.
 */
function media_oembed_pre_render_thumbnail($element) {
  // oembedcore_pre_render_thumbnail() sets #printed to TRUE when there's no
  // thumbnail to render.
  if (!empty($element['#printed']) && !isset($element['#path']) && isset($element['#file'])) {
    $element['#theme'] = 'media_formatter_large_icon';
    $element['#printed'] = FALSE;
  }
  return $element;
}

/**
 * Implements hook_file_default_types_alter().
 */
function media_oembed_file_default_types_alter(&$types) {
  $types['image']->mimetypes[] = 'image/oembed';
  $types['image']->streams[] = 'oembed';

  $types['video']->mimetypes[] = 'video/oembed';
  $types['video']->streams[] = 'oembed';

  $types['document']->mimetypes[] = 'text/oembed';
  $types['document']->streams[] = 'oembed';
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_oembed_ctools_plugin_api($module, $api) {
  if ($module == 'file_entity' && $api == 'file_default_displays') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function media_oembed_file_formatter_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'oembed') {
    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);

    // Build oEmbed options array. Prefer file-specific overrides to display settings.
    $options = (isset($file->override) ? $file->override : array()) + $display['settings'];

    // The oEmbed spec defines `maxwidth` and `maxheight` parameters, but some providers
    // support `width` and `height`. Precise dimensions supercede maximums.
    $request_options = array();
    if ($file->type != 'image' && $display['type'] != 'oembed_thumbnail') {
      if (isset($options['width'])) {
        $request_options['maxwidth'] = $request_options['width'] = $options['width'];
      }
      if (isset($request_options['height'])) {
        $request_options['maxheight'] = $request_options['height'] = $options['height'];
      }
    }
    $request_options = array_filter($request_options);
    $display_options = array_filter($options);

    // Not a WYSIWYG editor instance.
    if (empty($file->override['wysiwyg'])) {
      $element = oembedcore_render_cache($display['type'], $wrapper->interpolateUrl(), $request_options, $display_options);
    }

    // WYSIWYG does not yet support video inside a running editor instance, send
    // thumbnails.
    else {
      $element = oembedcore_render_cache('oembed_wysiwyg', $wrapper->interpolateUrl(), $request_options, $display_options);
      if (!empty($file->override['attributes'])) {
        $element['#options']['attributes'] = $file->override['attributes'];
      }
    }

    // I don't know if this is essential.
    if ($display['type'] == 'oembed_thumbnail') {
      $element['#attributes'] = $display_options;
    }
    return $element;
  }
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function media_oembed_file_formatter_oembed_settings($form, &$form_state, $settings) {
  $element = array();
  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
  );
  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );
  $element['wmode'] = array(
    '#title' => t('Flash window mode (wmode)'),
    '#type' => 'select',
    '#empty_option' => t('None (do not request a specific wmode from the provider)'),
    '#options' => drupal_map_assoc(array('window', 'transparent', 'opaque', 'direct', 'gpu')),
    '#description' => t('Controls layering, transparency, and playback performance of content rendered by the Flash player. For more information, view <a href="http://kb2.adobe.com/cps/127/tn_12701.html#main_Using_Window_Mode__wmode__values_">Adobe\'s documentation</a>.'),
    '#default_value' => $settings['wmode'],
  );
  return $element;
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function media_oembed_file_formatter_oembed_thumbnail_settings($form, &$form_state, $settings) {
  $element = array();
  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
  );
  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );
  return $element;
}

/**
 * Clear the cached oEmbed content for the selected files.
 */
function media_oembed_cache_clear($fids) {
  $fids = array_keys($fids);

  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'file')
    ->propertyCondition('uri', 'oembed:', 'STARTS_WITH')
    ->propertyCondition('fid', $fids)
    ->execute();

  $files = file_load_multiple(array_keys($results['file']));
  foreach ($files as $file) {
    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
    $url = $wrapper->interpolateUrl();
    $hashed_url = hash('sha256', $url);
    foreach (array('oembed', 'oembed_thumbnail', 'oembed_request') as $type) {
      $cid = $type . ':' . $hashed_url . ':';
      cache_clear_all($cid, 'cache_oembed', TRUE);
    }
  }
}
