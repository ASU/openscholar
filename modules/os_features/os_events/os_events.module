<?php
// $Id$

include_once 'os_events.features.inc';

/**
 * Implements hook_os_app_info().
 */
function os_events_os_app_info() {
  $apps = array();

  $apps['os_events'] = array(
    'path' => 'calendar',
  	'nodetypes' => array(
  	  'event',
    ),
    'views tabs' => array(
      'os_events' => array(
        'page_1', //Main Cal
        'page_4', //Upcoming
      ),
    ),
  );

  return $apps;
}

/**
 * hook os_widget
 *
 * Events blocks that can be used on an OpenScholar site
 */
function os_events_os_widget() {
  $items = array();

  //Mini calendar that displays events by month
  $items['views-os_events-block_1'] = array(
    'module' => 'views',
    'delta' => 'os_events-block_1',
    'region' => 'sidebar_second',
    'weight' => '-10',
    'info' => t('Mini Calendar'),
  );

  //List of upcoming events
  $items['views-os_events-block_2'] = array(
    'module' => 'views',
    'delta' => 'os_events-block_2',
    'region' => 'sidebar_second',
    'weight' => '-15',
    'info' => t('Upcoming Events'),
  );

  return $items;
}

// TODO: Remove when os_layout_get is refactored to handle widget titles better
function os_events_os_widget_alter(&$widget) {
  if ($widget['delta'] == 'os_events-block_1') {
    $widget['info'] = t('Mini Calendar');
  }
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_events_vsite_og_node_type_info() {
  return array(
    'event' => 'group content',
  );
}

/**
 * Implements hook_process_node().
 */
function os_events_process_node(&$variables) {
  if($variables['type'] != 'event') {
  	return;
  }

  // Move the terms to the top of the node display.
  if(isset($variables['content']['og_vocabulary'])) {
    $variables['content']['og_vocabulary']['#weight'] = 0;
  }
  // Move the event date above the event description.
  if(isset($variables['content']['field_date'])) {
    $variables['content']['field_date']['#weight'] = 0;
    // Append <p></p> tags for spacing.
    if(isset($variables['content']['field_date'][0]['#markup'])) {
      $variables['content']['field_date'][0]['#markup'] .= '<p></p>';
    }
  }
}

/**
 * Implements hook_preprocess_calendar_datebox().
 */
function os_events_preprocess_calendar_datebox(&$vars) {
  // Deal only with links.
  if (!$vars['link']) {
    return;
  }

  $item = menu_get_item();

  // Get the term alias, if exists.
  $path = $item['original_map'];
  unset($path['0']);

  // Get the term path, the clean page path and the build the query string.
  $path = implode('/', $path);
  $clean_current_path = str_replace($path, '', $_GET['q']);
  $query = array('query' => array('day' => $vars['date']));

  // Change the link.
  $vars['link'] = l($vars['day'], $clean_current_path . $path, $query);
}

/**
 * Implements hook_preprocess_date_views_pager().
 *
 * Dealing with different context of the calendar view modes.
 */
function os_events_preprocess_date_views_pager(&$variables) {
  if ($variables['plugin']->options['date_id'] == 'mini') {
    return;
  }

  // Define some variables.
  $plugin = $variables['plugin'];
  $view = $plugin->view;
  $date_info = $view->date_info;
  $next_url = &$variables['next_url'];
  $prev_url = &$variables['prev_url'];
  $granularity = !empty($date_info->granularity) ? $date_info->granularity : 'month';
  $format = array('year' => 'Y', 'month' => 'Y-m', 'day' => 'Y-m-d');

  // Get information about dates.
  $min_date = $date_info->min_date;
  $max_date = $date_info->max_date;

  $prev_date = clone($min_date);
  $next_date = clone($max_date);
  date_modify($prev_date, '-1 ' . $variables['plugin']->options['date_id']);
  date_modify($next_date, '+1 ' . $variables['plugin']->options['date_id']);

  switch ($granularity) {
    case 'week':
      $next_week = date_week(date_format($next_date, 'Y-m-d'));
      $prev_week = date_week(date_format($prev_date, 'Y-m-d'));
      $next_arg = date_format($next_date, 'Y-\W') . date_pad($next_week);
      $prev_arg = date_format($prev_date, 'Y-\W') . date_pad($prev_week);
      break;
    default:
      $next_arg = date_format($next_date, $format[$granularity]);
      $prev_arg = date_format($prev_date, $format[$granularity]);
  }

  // Change the link URL and arguments.
  $variables['next_options']['query'] = array('date' => $next_arg, 'type' => $variables['plugin']->options['date_id']);
  $variables['prev_options']['query'] = array('date' => $prev_arg, 'type' => $variables['plugin']->options['date_id']);
  $next_url = $_GET['q'];
  $prev_url = $_GET['q'];
}
