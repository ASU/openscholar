<?php
// $Id$

include_once 'os_events.features.inc';

/**
 * Implements hook_os_app_info().
 */
function os_events_os_app_info() {
  $apps = array();

  $apps['os_events'] = array(
    'path' => 'calendar',
  	'nodetypes' => array(
  	  'event',
    ),
    'views tabs' => array(
      'os_events' => array(
        'page_1', //Main Cal
        'page_4', //Upcoming
      ),
    ),
  );

  return $apps;
}

/**
 * hook os_widget
 *
 * Events blocks that can be used on an OpenScholar site
 */
function os_events_os_widget() {
  $items = array();

  //Mini calendar that displays events by month
  $items['views-os_events-block_1'] = array(
    'module' => 'views',
    'delta' => 'os_events-block_1',
    'region' => 'sidebar_second',
    'weight' => '-10',
    'info' => t('Mini Calendar'),
  );

  //List of upcoming events
  $items['views-os_events-block_2'] = array(
    'module' => 'views',
    'delta' => 'os_events-block_2',
    'region' => 'sidebar_second',
    'weight' => '-15',
    'info' => t('Upcoming Events'),
  );

  return $items;
}

// TODO: Remove when os_layout_get is refactored to handle widget titles better
function os_events_os_widget_alter(&$widget) {
  if ($widget['delta'] == 'os_events-block_1') {
    $widget['info'] = t('Mini Calendar');
  }
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_events_vsite_og_node_type_info() {
  return array(
    'event' => 'group content',
  );
}

/**
 * Implements hook_process_node().
 */
function os_events_process_node(&$variables) {
  if($variables['type'] != 'event') {
  	return;
  }

  // Move the terms to the top of the node display.
  if(isset($variables['content']['og_vocabulary'])) {
    $variables['content']['og_vocabulary']['#weight'] = 0;
  }
  // Move the event date above the event description.
  if(isset($variables['content']['field_date'])) {
    $variables['content']['field_date']['#weight'] = 0;
    // Append <p></p> tags for spacing.
    if(isset($variables['content']['field_date'][0]['#markup'])) {
      $variables['content']['field_date'][0]['#markup'] .= '<p></p>';
    }
  }
}

/**
 * Implements hook_preprocess_calendar_datebox().
 */
function os_events_preprocess_calendar_datebox(&$vars) {
  // Deal only with links.
  if (!$vars['link']) {
    return;
  }

  $item = menu_get_item();

  // Get the term alias, if exists.
  $path = $item['original_map'];
  unset($path['0']);

  // Get the term path, the clean page path and the build the query string.
  $query = array('query' => array('date' => $vars['date'], 'type' => 'day'));

  // Change the link.
  $vars['link'] = l($vars['day'], 'calendar', $query);
}

/**
 * Implements hook_preprocess_menu_local_task().
 *
 * Remove the active from any tab in the calendar page and add active to the
 * correct tab.
 */
function os_events_preprocess_menu_local_task(&$variables) {
  if ($_GET['q'] != 'calendar' || !isset($_GET['type'])) {
    return;
  }
  $element = &$variables['element'];
  $element['#active'] = FALSE;

  $cases = array(
    'day' => 'calendar/day',
    'week' => 'calendar/week',
    'year' => 'calendar/year',
    'month' => 'calendar/month',
  );

  if (isset($cases[$_GET['type']]) && $cases[$_GET['type']] == $element['#link']['path']) {
    $element['#active'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_link().
 *
 * Remove the active from any link in the calendar page and add active class to
 * the correct link.
 */
function os_events_preprocess_link(&$variables) {
  if ($_GET['q'] != 'calendar') {
    return;
  }

  if ($variables['path'] == 'calendar' && $variables['text'] == t('Month')) {
    // The user watch different view modes of the calendar, remove the active
    // from the the month link.
    if (!empty($_GET['date']) && !empty($_GET['type'])) {
      $key = array_search('active', $variables['options']['attributes']['class']);
      unset($variables['options']['attributes']['class'][$key]);
    }
  }

  $view_modes = array(
    'calendar/week',
    'calendar/day',
    'calendar/year',
  );

  if (empty($_GET['type']) || !in_array($variables['path'], $view_modes)) {
    return;
  }

  $cases = array(
    'day' => 'calendar/day',
    'week' => 'calendar/week',
    'year' => 'calendar/year',
    'month' => 'calendar/month',
  );

  if (isset($cases[$_GET['type']]) && $cases[$_GET['type']] == $variables['path']) {
    $variables['options']['attributes']['class'][] = 'active';
  }
}
