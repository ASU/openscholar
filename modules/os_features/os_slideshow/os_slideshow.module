<?php
/**
 * @file
 * Code for the OS Slideshow feature.
 */

include_once 'os_slideshow.features.inc';

/**
 * Implements hook_boxes_plugins().
 */
function os_slideshow_boxes_plugins(){
  $info = array();
  $path = drupal_get_path('module', 'os_slideshow') . '/plugins';

  $info['os_slideshow_box'] = array(
    'title' => 'HC Slideshow',
    'description' => 'HC Slideshow',
    'tags' => array('Media'),
    'handler' => array(
      'class' => 'os_slideshow_box',
      'file' => 'os_slideshow_box.inc',
      'path' => $path,
      'parent' => 'os_boxes_default'
    )
  );

  return $info;
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_slideshow_vsite_og_node_type_info() {
  return array('slideshow_slide' => 'group content');
}

/**
 * Implements hook_library().
 * 
 * @author minorOffense <mwinstone@coldfrontlabs.ca>
 */
function os_slideshow_library() {
  $libraries['flexslider'] = array(
    'title' => 'FlexSlider',
    'website' => 'http://flex.madebymufffin.com/',
    'version' => '1.8',
    'js' => array(libraries_get_path('flexslider') . '/jquery.flexslider-min.js' => array(),),
    'css' => array(libraries_get_path('flexslider') . '/flexslider.css' => array('type' => 'file','media' => 'screen')),
  );
  return $libraries;
}

/**
 * Implements hook_form_FORMID_alter
 *
 * Attaches widget delta to form so it'll be available during node save
 */
function os_slideshow_form_slideshow_slide_node_form_alter(&$form, &$state, $form_id) {
  $widget = (isset($_GET['widget'])) ? $_GET['widget'] : @$state['input']['widget'];
  if (module_exists('spaces') && $space = spaces_get_space()) {
    $box = $space->controllers->boxes->get($widget);
  } else {
    $box = boxes_box_load($widget);
  }
  
  //$form['field_image']['und'][0]['#upload_validators']['imagefield_crop_upload_validate'][1]['widget']['settings']['resolution'] = '900x100';
  if ($widget) {
    $form['widget'] = array('#type' => 'hidden', '#value' => $widget);
  } 
    
  //remove sticky.  pull published out of vertical tab
  $form['options']['sticky']['#type'] = 'hidden';
  unset($form['options']['#group']);
  
  //hide additional settings except publishing options.
  foreach ($form as $name => &$item) {
    if (is_array($item) && isset($item['#group']) && ($item['#group'] == 'additional_settings')) {
      $item['#type'] = 'hidden';
    }
  }
  
  //hide title.  it will be automatically generated later.
  $form['title']['#type'] = 'hidden';
  $form['title']['#required'] = FALSE;
}

/**
 * Implements hook_imagefield_crop_instance_alter
 * 
 * See: http://drupal.org/node/1915510#comment-7058848
 * 
 * Changes the imagefield_crop widget to use our custom ratio.
 */
function os_slideshow_imagefield_crop_instance_alter(&$instance, $context) {
  if ($context['form']['#id'] == 'slideshow-slide-node-form') {  
    $box = boxes_box_load($context['form']['widget']['#value']);
    $ratio = $box->options['aspect_ratio'];
    $ratios = _os_slideshow_image_aspect_ratios();
    $ratio = (isset($ratios[$ratio])) ? $ratios[$ratio] : current($ratios);
    $w = 800;
    $h = intval(round($w/$ratio, 0));
    
    $instance['widget']['settings']['resolution'] = "${w}x${h}";
  }
}

/**
 * Implements hook_node_insert
 * 
 * When a slideshow_slide is created, add its nid to the widget it was created for
 */
function os_slideshow_node_insert($node) {
  if ($node->type != 'slideshow_slide') {
    return;
  }
  
  if (isset($node->widget)) {
    if (module_exists('spaces') && $space = spaces_get_space()) { 
      $box = $space->controllers->boxes->get($node->widget);
    } else {   
      $box = boxes_box_load($node->widget);
    }
    
    //array reduce's anon function gets the highest weight of all the slides, so the newly inserted one can come last.
    $box->options['nodes'][(int)$node->nid] = array(
      'nid' => (int)$node->nid,
      'weight' => 1 + array_reduce($box->options['nodes'], function($val, $next) {return ($next['weight']>$val) ? $next['weight'] : $val;}, 0),
    );
    
    if ($space) {
      $space->controllers->boxes->set($box->delta, $box);
    } else {   
      $box->save();
    }
  }
}

/**
 * Implements hook_node_presave
 * 
 * Creates title since title was removed from form.
 */
function os_slideshow_node_presave($node) {
  if ($node->type == 'slideshow_slide') {
    $lang = $node->language;
    $node->title = isset($node->field_headline[$lang][0]) ? $node->field_headline[$lang][0]['value'] : FALSE;
    if (!$node->title) {
      $node->title = db_select('file_managed', 'fm')
        ->condition('fid', $node->field_image[$lang][0]['fid'])
        ->fields('fm', array('filename'))
        ->range(0,1)
        ->execute()
        ->fetchColumn();
    }
  }
}

/**
 * @function os_slideshow_process_form_nodes
 * 
 * Form #process function.  After form is saved, remove the nids that were deleted.
 */
function os_slideshow_process_form_nodes($element, &$state, &$form) {
  //bail out while the form is being built.
  if (empty($state['input'])) {
    return $element;
  }
  
  //only keep nodes that have been returned from the form
  $nodes_left = (isset($state['input']['nodes'])) ? array_keys($state['input']['nodes']) : array();
  foreach($form['options']['nodes_list']['#value'] as $nid) {
    if (!in_array($nid, $nodes_left)) {
      unset($element[$nid]);
    }  
  }
  
  return $element;
}


/**
 * Implements hook_module_implements_alter
 * 
 * Move our form alter to after url alias's so we can remove that form element.
 */
function os_slideshow_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['os_slideshow'])) {
    unset($implementations['os_slideshow']);
    $implementations['os_slideshow'] = false;
  }
}

/**
 * Implements hook_image_default_styles().
 * 
 * Provides styles for each of our cropping ratios.
 */
function os_slideshow_image_default_styles() {
  $slideshow_max = variable_get('os_slideshow_max_style_width', 1000);
  $styles = array();
  
  $default_effects = array(
    'label' => 'Scale and crop',
    'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
    'effect callback' => 'image_scale_and_crop_effect',
    'dimensions callback' => 'image_resize_dimensions',
    'form callback' => 'image_resize_form',
    'summary theme' => 'image_resize_summary',
    'module' => 'image',
    'name' => 'image_scale_and_crop',
    'data' => array(),
    'weight' => '1',
  );
  
  foreach (_os_slideshow_image_aspect_ratios() as $label => $ratio) {
    for ($w = $slideshow_max; $w>0; $w -= 200) {
      $name = 'os_slideshow_' . $label . '_' . $w;
      $effects = $default_effects;
      $effects['data']['width'] = $w;
      $effects['data']['height'] = intval(round($w/$ratio, 0));
      
      $styles[$name] = array(
        'name' => $name,
        'effects' => array($effects),
      );
    }
  }
    
  return $styles;
}

/**
 * Implements hook_theme
 */
function os_slideshow_theme($existing, $type, $theme, $path) {
  return array(
    'os_slideshow_slideshow' => array(
      'template' => 'os_slideshow_slideshow',
      'variables' => array(
        'nodes' => array(),
        'slides' => NULL,
        'controls' => NULL,
        'timeout' => 4000,
        'speed' => 700,
        'effect' => 'fade',
        'aspect_ratio' => NULL,
      ),
      
    ),
    'os_slideshow_slide' => array(
      'template' => 'os_slideshow_slide',
      'variables' => array(
        'node' => NULL,
        'headline' => NULL,
        'description' => NULL,
        'image' => NULL,
        'style_name' => 'slideshow_980',
        'box_delta' => NULL,
      )    
    ),
    'os_slideshow_controls' => array(
      'template' => 'os_slideshow_controls',
      'variables' => array('node_count' => 0),
    ),    
  );
}

/**
 * Implements hook_preprocess_hook
 */
function os_slideshow_preprocess_os_slideshow_slide(&$vars) {
  $node = &$vars['node'];
  $lang = $node->language;
  $vars['headline'] = ($node->field_headline) ? $node->field_headline[$lang][0]['value'] : '';
  $vars['description'] = ($node->field_description) ? $node->field_description[$lang][0]['value'] : '';
  
  $img = ($node->field_image) ? $node->field_image[$lang][0]['uri'] : '';  
  $img_vars = array('path' => $img, 'style_name' => $vars['style_name']);
  $img = theme('image_style', $img_vars);
  
  $url = ($node->field_link) ? $node->field_link[$lang][0]['url'] : '';
  if ($url) {
    $img = l($img, $url, array('html'=>TRUE));
  }
  
  $vars['image'] = $img;
}

/**
 * Implements hook_preprocess_hook
 */
function os_slideshow_preprocess_os_slideshow_slideshow(&$vars) {
  //load javascript, pass it our settings
  drupal_add_library('os_slideshow', 'flexslider');
  drupal_add_js(drupal_get_path('module', 'os_slideshow') . '/os_slideshow_flexslider.js');
  list($animation, $direction) = _os_slideshow_get_animation_direction($vars['effect']);
  $settings = array('os_slideshow' =>   //http://www.woothemes.com/flexslider/
    array('boxes-box-'.$vars['box_delta'] => array(
      //'controlsContainer' => '#flex-controls', //moves controls to this container
      'controlNav' => FALSE,    //pager
      'directionNav' => FALSE,  //control buttons
      'slideshowSpeed' => $vars['timeout'],
      'animationSpeed' => $vars['speed'],
      'animation' => $animation,
      'direction' => $direction,
    )
  ));
  //slideshowSpeed, animationSpeed, randomize, animation (fade or slide (horizontal or vertical))
  drupal_add_js($settings, 'setting');
  
  //prepare images.
  $nodes = $vars['nodes'];
  foreach ($nodes as $nid => $node) {
    $nodes[$nid]['#weight'] = $node['weight'];
  }
  uasort($nodes, 'element_sort');
  
  //get slides - image with description
  $nodes = node_load_multiple(array_keys($nodes));
  $vars['slides'] = array();
  $slide_vars = array('style_name' => _os_slideshow_get_style_name($vars['aspect_ratio'], $vars['box_delta']));
  foreach ($nodes as $nid => $node) {
    $slide_vars['node'] = $node;
    $vars['slides'][] = theme('os_slideshow_slide', $slide_vars);
  }
  
  //get controls
  $control_vars = array('node_count' => count($nodes));
  $vars['controls'] = theme('os_slideshow_controls', $control_vars);
}

/**
 * @function _os_slideshow_get_animation_direction
 * 
 * Flexslider has a transition effect with a direction argument.  This splits them or sets the arg to null
 */
function _os_slideshow_get_animation_direction($effect) {
  $effects = explode('-', $effect);
  return (count($effects)>1) ? $effects : array($effect, NULL);
}  

/**
 * @function _os_slideshow_get_style_name()
 * 
 * Gets a style for the aspect ratio and region currently being used.
 */
function _os_slideshow_get_style_name($aspect_ratio, $delta) {
  $ratios = _os_slideshow_image_aspect_ratios();
  if (!isset($ratios[$aspect_ratio])) {
    $aspect_ratio = current(array_keys($ratios)); //default to a ratio we've defined here.
  }
  
  //get the region this block is in
  $contexts = context_get();
  $region = 'content_top';
  foreach ($contexts['context'] as $context) {
    if (@$blocks = ($context->reactions['block']['blocks'])) {
      if (isset($blocks['boxes-'.$delta])) {
        $region = $blocks['boxes-'.$delta]['region'];
        break;
      }
    }
  }
  
  //get valid image styles for this aspect ratio
  $sizes = array();
  foreach (os_slideshow_image_default_styles() as $style) {
    if (strpos($style['name'], 'os_slideshow_'.$aspect_ratio) == 0) {
      $sizes[$style['effects'][0]['data']['width']] = $style['name'];
    }
  }
  
  //select the smallest style that's bigger than the current region.
  ksort($sizes);
  $size = (in_array($region, array('sidebar_first','sidebar_second'))) ? 300 : 1000; //this should be smarter
  foreach ($sizes as $width => $name) {
    if ($width >= $size) {
      break;
    }
  }
  
  return $name;
}

/**
 * @function _os_slideshow_image_aspect_ratios
 *
 * Defines the aspect ratios supported by this module.
 */
function _os_slideshow_image_aspect_ratios() {
  return array(
      '3:1' => 3/1,
      '16:9' => 16/9,
  );
}

