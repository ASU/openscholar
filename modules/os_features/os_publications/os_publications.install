<?php
// $Id$

function os_publications_schema() {
  $schema['cache_biblio_lists'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_biblio_lists']['description'] = 'Cache table for biblio lists module.';
  return $schema;
}

// Implements hook_install().
function os_publications_install() {
   db_add_field('biblio', 'biblio_url_title', array(
      'type' => 'varchar',
      'length' => 128,
      'not null' => FALSE,
      'description' => 'A title to go with the Relevant URL',
    ));

  // Insert the biblio_url_title into the biblio_fields table.
  // Biblio_fields table is not auto increment, grab the last fid and increment it for our insert.
  $field_id = db_query('SELECT fid FROM {biblio_fields} ORDER BY fid DESC LIMIT 1')->fetchField();
  if(isset($field_id)) {
    $field_id = $field_id+1;
  }
  db_insert('biblio_fields')
  ->fields(array(
    'fid' => $field_id,
    'name' => 'biblio_url_title',
    'type' => 'textfield',
    'size' => 60,
    'maxsize' => 255,
  ))
  ->execute();

  if ($field = field_info_instance('node', 'body', 'biblio')) {
    $field['display']['teaser'] = array(
      'label' => 'hidden',
      'type' => 'hidden',
    );
    field_update_instance($field);
  }
}

// Implements hook_schema_alter().
function os_publications_schema_alter(&$schema) {
  if (isset($schema['biblio'])) {
    $schema['biblio']['fields']['biblio_url_title'] = array(
      'type' => 'varchar',
      'length' => 128,
      'not null' => FALSE,
      'description' => 'A title to go with the Relevant URL',
    );
  }
}

// Implements hook_update_N().
function os_publications_update_7001() {
  // Insert the biblio_url_title into the biblio_fields table.
  // Biblio_fields table is not auto increment, grab the last fid and increment it for our insert.
  $field_id = db_query('SELECT fid FROM {biblio_fields} ORDER BY fid DESC LIMIT 1')->fetchField();
  if(isset($field_id)) {
    $field_id = $field_id+1;
  }
  db_insert('biblio_fields')
  ->fields(array(
    'fid' => $field_id,
    'name' => 'biblio_url_title',
    'type' => 'textfield',
    'size' => 60,
    'maxsize' => 255,
  ))
  ->execute();

  return t('biblio_url_title successfully inserted into the biblio fields table.');
}

function os_publications_uninstall() {
  db_drop_field('biblio', 'biblio_url_title');
}

function os_publications_enable() {
  _os_publications_update_field_data();

  // place it behind import/export modules
  db_update('system')
    ->fields(array('weight' => 50))
    ->condition('name', 'os_publications', '=')
    ->condition('type', 'module', '=')
    ->execute();
}

/*
 * Every update in which fields change needs to call this function
 * All field changes should be exported to the csv using SQL
 */
function _os_publications_update_field_data() {
  static $run_once = FALSE;

  // this only needs to be run once per update
  if ($run_once) {
    return;
  }

  $file = drupal_get_path('module', 'os_publications') . '/misc/biblio_settings.inc';
  if (!file_exists($file)) {
    return;
  }

  list($biblio_field_type, $biblio_field_type_data, $biblio_contributor_type, $biblio_contributor_type_data) = include ($file);

  db_truncate('biblio_field_type')->execute();
  foreach ($biblio_field_type as $type) {
    drupal_write_record('biblio_field_type', $type);
  }

  db_truncate('biblio_field_type_data')->execute();
  foreach ($biblio_field_type_data as $type_data) {
    drupal_write_record('biblio_field_type_data', $type_data);
  }

  db_truncate('biblio_contributor_type')->execute();
  foreach ($biblio_contributor_type as $contrib_type) {
    drupal_write_record('biblio_contributor_type', $contrib_type);
  }

  db_truncate('biblio_contributor_type_data')->execute();
  foreach ($biblio_contributor_type_data as $contrib_type_data) {
    //Run the query manually to override the serials
    drupal_write_record('biblio_contributor_type_data', $contrib_type_data);
  }
}

