<?php

/**
 * @files
 * OpenScholar files private module file.
 */

include_once('os_files_private.features.inc');

define('OS_FILES_PRIVATE_PATH', "cp/content/files-private");

/**
 * Implements hook_os_app_info().
 */
function os_files_private_os_app_info() {
  $apps = array();

  $apps['os_files_private'] = array(
    'path' => OS_FILES_PRIVATE_PATH,
  );

  return $apps;
}

/**
 * Implements hook_menu().
 */
function os_files_private_menu() {
  $items = array();
  // Named like 'features/$feature_name' by features/spaces convention.
  $items['features/os_files_private'] = array(
    'title' => 'Private Files Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_files_private_settings'),
    'access callback' => module_exists('spaces') ? 'spaces_access_admin' : 'user_access',
    'access arguments' => module_exists('spaces') ? array() : array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'os_files_private.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Set the URI schema to private when adding a new file via file/add.
 *
 * @see file_entity_add_upload()
 */
function os_files_private_form_file_entity_add_upload_alter(&$form, $form_state) {
  $item = menu_get_item();
  if (!($item['path'] == 'file/add' || $item['path'] == 'file/ajax') || !spaces_get_space()) {
    return;
  }

  if (!variable_get('file_private_path')) {
    // Private file system was not defined.
    return;
  }

  $form['upload']['#upload_location'] = 'private://';
  $form['#submit'][] = 'os_files_private_form_file_entity_add_upload_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Set the default group to the current user in file/%fid/edit.
 */
function os_files_private_form_file_entity_edit_alter(&$form, &$form_state) {
  $form['og_group_ref']['und']['0']['default']['#default_value'] = spaces_get_space()->id;
}

/**
 * Submit handler; Redirect to Private Files listing after file upload.
 *
 * @see file_entity_add_upload_submit()
 */
function os_files_private_form_file_entity_add_upload_submit($form, &$form_state) {
  $file = file_load($form_state['values']['upload']);

  // Redirect to the file edit page after submission.
  if (file_entity_access('edit', $file)) {
    $destination = array('destination' => OS_FILES_PRIVATE_PATH);
    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }
    $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination));
  }
  else {
    $form_state['redirect'] = 'admin/content/file';
  }
}

/**
 * Implements hook_file_download().
 *
 * Checks for access rules and serves file if all rules pass.
 */
function os_files_private_file_download($uri) {
  // Does nothing if the download URI is not private--
  // Default Drupal 7 private URIs start with "/system/...".
  // This prevents os_files_private from interfering with other modules'
  // download hooks; like media's "Download original image" link in media
  // gallery.
  if (arg(0) !== 'system') {
    return;
  }
  
  $file = array();
  $restrict_mode = variable_get('os_files_private_restrict_mode', 'site_members');
  $query = new EntityFieldQuery;

  $result = $query
    ->entityCondition('entity_type', 'file')
    ->propertyCondition('uri', $uri, '=')
    ->addMetaData('account', user_load(1))
    ->execute();

  $fid = isset($result['file']) ? reset(array_keys($result['file'])) : '';

  if (!$fid || !($file = file_load($fid))) {
    return;
  }

  // Restricts all access if Private Files app is disabled.
  if ($vsite = vsite_get_vsite()) {
    $apps = variable_get('spaces_features');
    if (isset($apps['os_files_private']) && (int) $apps['os_files_private'] !== 1) {
      return -1;
    }
  }

  $use_pinserver = variable_get('os_files_private_pinserver', 0);
  // Restricts to users authenticated through Harvard Pinserver.
  if ($use_pinserver) {
    if (function_exists('pinserver_check_status')) {
      // Serves file if user is already authenticated, or just got authenticated.
      if (pinserver_check_status()) {
        return file_get_content_headers($file);
      }
      // Otherwise, sends the user to Pinserver to log in.
      else if (function_exists('pinserver_redirect')) {
        return pinserver_redirect(array('redirect_uri' => $_SERVER['REQUEST_URI']));
      }
    }
  }
  // Restrictes to site members only.
  if (!$use_pinserver) {
    $wrapper = entity_metadata_wrapper('file', $file);
    // Set $gid[0] to something so og_is_member() below can't complain.
    $gid = array(NULL);

    // Restricts access if no OG audience is set.
    if (!isset($wrapper->{OG_AUDIENCE_FIELD}) || !($gid = $wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE)))) {
      return -1;
    }

    if (og_is_member('node', $gid[0])) {
      return file_get_content_headers($file);
    }
    else {
      // Sends user to user/login if user is anonymous.
      if (user_is_anonymous()) {
        return drupal_goto('user/login', array('query' => drupal_get_destination()));
      }
    }
  }
  // Default: restrict access.
  return -1;
}
