<?php
/**
 * @file
 * OS Breadcrumbs module file.
 */

/**
 * Function to create an html ready output of breadcrumbs for a site, breadcrumbs are initially created off of drupals request_uri function.
 * @return
 *  Returns a string of html ready breadcrunbs.
 */
function os_breadcrumbs_build_breadcrumbs() {
  $space = spaces_get_space();
  $path_boolean = TRUE;
  $path = '';
  $radio_options = array(
    0 => '&raquo;',
    1 => '&#92;',
    2 => '&#47;',
    3 => '&#124;',
    4 => '&ndash;',
  );
  // Add 'Home' link
  $links[] = l(t('Home'), '<front>');
  // Get URL arguments.
  $arguments = explode('/', request_uri());
  // Get the breadcrumb divider variable.
  $breadcrumb_divider = variable_get('os_breadcrumbs_breadcrumb_divider',0);
  // Check for vsites
  if(isset($space)) {
  	// Check for the vsite name in the url.
    // Unset it if it exists.
    // Unsetting because the breadcrumb would look like this Home > VsiteName > Page Title.
    // Removing the vsite name removes it from the breadcrumb, so it will just be Home > Page Title.
    if($key = array_search($space->group->title, $arguments)) {
      unset($arguments[$key]);
    }
  	$breadcrumb_divider = $space->controllers->variable->get('os_breadcrumbs_breadcrumb_divider', 'space');
  	if(empty($breadcrumb_divider)) {
  	  $breadcrumb_divider = 0;
  	}
  }

  // Remove empty values from the uri.
  foreach ($arguments as $key => $value) {
  	if (empty($value)) {
      unset($arguments[$key]);
    }
  }
  $arguments = array_values($arguments);

  // Setup the breadcrumb paths.
  if (!empty($arguments)) {

  	// Check for Taxonomy.
    if(strpos(request_uri(),'/term/') !== FALSE && strpos(request_uri(),'/cp/') === FALSE) {
      // Load the newly built taxonomy breadcrumbs.
      $arguments = _os_boxes_breadcrumbs_build_taxnomy_menu($arguments);
    }

    // Check for Sub-Sections.
    if ($node = menu_get_object()) {
      $current_title = $node->title;
      // only pages can have section nav
      if ($node->type == 'page' && isset($node->book['bid'])) {
      	// With the new subsections, each subsection will still have a url base of
        // pages/subsectionname, the breadcrumb url needs to preserve this.
        $path_boolean = FALSE;
        $path_preserve = $arguments[0];
		// Load the newly built subsection breadcrumbs.
		$arguments = _os_boxes_breadcrumbs_build_subsection_menu($arguments,$current_title);
      }
    }

    // Build the breadcrumbs off the constructed arguments array.
    foreach ($arguments as $key => $value) {
      // Don't make last breadcrumb a link
      if ($key == (count($arguments) - 1)) {
      	// Check for a page title.
        $page_title = drupal_get_title();
        $links[] = !empty($page_title) ? $page_title : drupal_ucfirst($value);
      } else {
      	// Check for subsection url  preservation.
        if($path_boolean == FALSE) {
          $path = $path_preserve . '/' . $value;
        }elseif (!empty($path)) {
          $path .= '/'. $value;
        } else {
          $path .= $value;
      	}
      	$links[] = l(drupal_ucfirst($value), $path);
      }
    }
  }

  // Set custom breadcrumbs
  drupal_set_breadcrumb($links);
  // Get custom breadcrumbs
  $breadcrumbs = drupal_get_breadcrumb();

  $breadcrumbs_render = '<div class="breadcrumb">'. implode(' '.$radio_options[$breadcrumb_divider].' ', $breadcrumbs) .'</div>';
  //$breadcrumbs_render = '<div class="breadcrumb">'. implode('  ', $breadcrumbs) .'</div>';

  return $breadcrumbs_render;
}

/**
 * Function to reconstruct the breadcrumbs for taxonomy.
 * @param $arguments
 * 	An array of exploded arguments from request_uri
 * @return
 * 	An array consisting of all parent terms of child terms.
 */

function _os_boxes_breadcrumbs_build_taxnomy_menu($arguments) {
  // Preserve the parent content type.
  $content_type = $arguments[0];
  // Load the term id.
  $tid = end($arguments);
  // We don't want home > people > taxonomy > terms > termid to be displayed in the breadcrumbs.
  if(isset($tid)) {
    // Load the term name.
    $term_load = taxonomy_term_load($tid);
    $term_name = isset($term_load) ? $term_load->name : '';
    // Load the parents of this term.
    $term_hierarchy = taxonomy_get_parents_all($tid);
 	// Rebuild the array for the links.
    if(!empty($term_hierarchy)) {
      // Reverse the order of the terms array.
      $terms_ordered = array_reverse($term_hierarchy);
	  // Empty the array.
      unset($arguments);
      // Rebuild the array.
      // Preserved content_type first.
      if(isset($content_type)) {
      	$arguments[] = $content_type;
      }
      // Parent Vocab.
      $parent_vocab = $terms_ordered[0]->vocabulary_machine_name;
      if(isset($parent_vocab)) {
      	$arguments[] = $parent_vocab;
      }
      foreach($terms_ordered as $term_name) {
      	$arguments[] = $term_name->name;
      }
    }
  }
  return $arguments;
}

/**
 * Function to reconstruct the breadcrumbs for pages sub-sections
 * @param $arguments
 * 	An array of exploded arguments from request_uri
 * @return
 * 	An array consisting of all parent sections of a child section.
 */
function _os_boxes_breadcrumbs_build_subsection_menu($arguments,$current_title) {
  // Grab all the menu items associated with this node.
  $menu_active_trail = menu_get_active_trail();
  if(isset($menu_active_trail)) {
  	// Empty the originial arguments array
    unset($arguments);
    // Get the last menu item.
    $last_menu = end($menu_active_trail);
    // Flatten the menu based off the last menu item.
    $flat_menu = book_get_flat_menu($last_menu);
    // Rebuild the array of arguments for the breadcrumbs.
    foreach($flat_menu as $menu_search) {
      if($menu_search['link_title'] == $current_title) {
      	break;
      }else {
      	// Lookup the drupal alias for the link path.
   		$drupal_path = drupal_lookup_path('alias',$menu_search['link_path']);
   		// Get the url alias for the link.
    	$path_explode = explode('/', $drupal_path);
    	$menu_path = end($path_explode);
    	$arguments[] = $menu_path;
      }
    }
    // Push the end section.
    $arguments[] = $current_title;
  }
  return $arguments;
}

/**
 * Implements hook_preprocess_page().
 */
function os_breadcrumbs_preprocess_page(&$variables) {
  // Only alter public facing pages for the breadcrumbs.
  if(context_isset('context', 'os_public')) {
    $space = spaces_get_space();
    if(isset($space)) {
  	  $breadcrumb_show = $space->controllers->variable->get('os_breadcrumbs_show_frontpage', 'space');
    }else {
  	  $breadcrumb_show = variable_get('os_breadcrumbs_show_frontpage',0);
    }
  	$breadcrumbs = os_breadcrumbs_build_breadcrumbs();
	if(isset($breadcrumbs)) {
	  // Check for users wanting to show their breadcrumbs on their frontpage.
	  if(drupal_is_front_page() && empty($breadcrumb_show)) {
	    $variables['breadcrumb'] = '';
	  }else {
	    $variables['breadcrumb'] = $breadcrumbs;
	  }
	}
  }
}

/**
 * Implements hook_cp_settings().
 */
function os_breadcrumbs_cp_settings() {
  $radio_options = array(
    0 => '&raquo;',
    1 => '&#92;',
    2 => '&#47;',
    3 => '&#124;',
    4 => '&ndash;',
  );
  $form = array();
  $space = spaces_get_space();
  $breadcrumb_show = variable_get('os_breadcrumbs_show_frontpage',0);
  $breadcrumb_divider = variable_get('os_breadcrumbs_breadcrumb_divider',0);

  if (!empty($space)) {
    // Get the vsite_users_contact_form_anonymous varible
    $breadcrumb_show = $space->controllers->variable->get('os_breadcrumbs_show_frontpage', 'space');
    $breadcrumb_divider = $space->controllers->variable->get('os_breadcrumbs_breadcrumb_divider', 'space');
  }
  $form['os_breadcrumbs_show_frontpage'] = array(
    'group' => array(
      '#id' => 'breadcrumbs',
      '#title' => t('Breadcrumbs'),
      '#weight' => 50,
    ),
    'form' => array(
      '#type' => 'checkbox',
   	  '#title' => t('Show on your frontpage'),
      '#default_value' => isset($breadcrumb_show) ? $breadcrumb_show : 0,
      '#description' => t('This will allow breadcrumbs to be displayed on your sites frontpage.  Since it is your frontpage, only "Home" will show.'),
    ),
  );

  $form['os_breadcrumbs_breadcrumb_divider'] = array(
    'group' => array(
      '#id' => 'breadcrumbs',
      '#title' => t('Breadcrumbs'),
      '#weight' => 50,
    ),
    'form' => array(
      '#type' => 'radios',
      '#title' => t('Breadcrumb Divider'),
      '#id' => 'breadcrumb_dividers',
      '#options' => $radio_options,
      '#default_value' => isset($breadcrumb_divider) ? $breadcrumb_divider : 0,
      '#description' => t('This is the divider that will display between your breadcrumbs, for example Home &raquo; News.'),
      '#attributes' => array('class' => array('container-inline')),
    ),
  );
  return $form;
}
