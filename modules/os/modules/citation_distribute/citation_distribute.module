<?php

/**
 * @file
 *
 * citation_distribute allows users to push biblio nodes to myriad repositories
 */

/**
 * Implements hook_menu()
 */
function citation_distribute_menu() {
  $items = array();

  /* main admin menu for this module */
  $items['admin/config/openscholar/citation_distribute'] = array(
    'title' => t('Citation Distribute'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('citation_distribute_admin' ),
    'file' => 'citation_distribute.admin.inc',
    'access arguments' => array('administer citation distribute' ),
  	'type' => MENU_CALLBACK,
  );
  $items['admin/config/openscholar/citation_distribute/citation_distribute'] = $items['admin/config/openscholar/citation_distribute'];
  $items['admin/config/openscholar/citation_distribute/citation_distribute']['type'] = MENU_DEFAULT_LOCAL_TASK;
	$items['admin/config/openscholar/citation_distribute/citation_distribute']['title'] = t('Common Settings');

  /* add a menu link for each plugin that implements admin_menu() */
  foreach (_citation_distribute_plugins() as $plugin) {
    if ($plugin['title'] && $service = _citation_distribute_load_plugin($plugin)) {
      if (method_exists($service, 'admin_form')) {
        $items['admin/config/openscholar/citation_distribute/'.$plugin['name']] = array(
          'title' => t('Configure ' . $plugin['title']),
          'page callback' => 'drupal_get_form',
          'page arguments' => array('citation_distribute_plugin_admin_form', $plugin['name']),
          'file' => 'citation_distribute.admin.inc',
          'access arguments' => array('administer citation distribute'),
          'type' => MENU_LOCAL_TASK,
        );
      }
    }
  }
  return $items;
}

/**
 * Implements hook_node_insert().
 */
function citation_distribute_node_insert($node) {
  if ($node->type == 'biblio') {
    _citation_distribute_node_apply_plugins($node);
  }
}
/**
 * Implements hook_node_update().
 */
function citation_distribute_node_update($node) {
  if ($node->type == 'biblio') {
    _citation_distribute_node_apply_plugins($node);
  }
}

/**
 * @function _citation_distribute_node_apply_plugins($node) {
 *
 * When a node is inserted or updated, activate the service plugins
 */
function _citation_distribute_node_apply_plugins($node) {

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function citation_distribute_form_biblio_node_form_alter(&$form, &$form_state, $form_id) {
  if (!$form['biblio_type']['#default_value']) {
    return;
  }

  $form['citation_distribute'] = array(
    '#type' => 'fieldset',
    '#title' => t('Distribute to Academic Repositories'),
    '#group' => 'additional_settings',
    '#attached' => array('js' => array(drupal_get_path('module', 'citation_distribute' ) . '/citation_distribute.js')),
  );

  foreach(_citation_distribute_plugins() as $plugin) {
    if (isset($plugin['title'])) {
      $name = $plugin['name'];

      $form['citation_distribute'][$name] = array(
        '#type' => 'checkbox',
        '#title' => $plugin['title'],
        '#description' => (isset($plugin['description'])) ? $plugin['description'] : '',
        '#disabled' => FALSE,
        '#default_value' => _citation_distribute_checked($plugin, $form['nid']['#value']),
      );
    }
  }
}

/**
 * Implements hook_flag_default_flags
 */
function citation_distribute_flag_default_flags() {
  foreach (_citation_distribute_plugins() as $plugin) {
    if ($plugin['title']) {
      $flags[] = array (
        'content_type' => 'node',
        'name' => $plugin['name'],
        'title' => 'title:' . $plugin['title'],
        'roles' => array(4), //vsite admin
        'global' => 0,
        'types' => array ('biblio' ),
        'flag_short' => 'Send to ' . $plugin['title'],
        'flag_long' => 'Send to ' . $plugin['title'] . ' repository',
        'flag_message' => '',
        'unflag_short' => 'Remove from ' . $plugin['title'],
        'unflag_long' => 'Remove from ' . $plugin['title'] . ' repository',
        'unflag_message' => '',
        //'unflag_denied_text' => '',
        //'link_type' => 'normal', //normal, toggle, confirm
        //hiding these on page, teaser, and edit node
        'show_on_page' => false,
        'show_on_teaser' => false,
        'show_on_form' => false,
        //'access_author' => '',  //own or others.  should admin be allowed to flag?
        //'i18n' => 0,
        'status' => true,
        //locked flags properties do not show on config page and are only configurable here.
        'locked' => array (
          'name' => 'name',
          'show_on_page' => 'show_on_page',
          'show_on_teaser' => 'show_on_teaser',
          'show_on_form' => 'show_on_form',
          'global' => 'global',
          'link_type' => 'link_type',
          'types' => 'types'
        ),
        'api_version' => 2,
        'module' => 'citation_distribute'
      );
    }
  }
  return $flags;

}

/**
 * Implements hook_ctools_plugin_api().
 */
function citation_distribute_ctools_plugin_api($module, $api) {
  if ($module == 'citation_distribute' && $api == 'service') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory
 */
function citation_distribute_ctools_plugin_directory($module, $plugin) {
  if ($module == 'citation_distribute' && $plugin == 'service') {
    return 'plugins/service/';
  }
}

/**
 * Implements hook_ctools_plugin_type
 */
function citation_distribute_ctools_plugin_type() {
  return array(
    'service' => array(
      'use hooks' => TRUE,
      'class' => array('class'),
    )
  );
}

/**
 * @function _citation_distribute_plugins()
 *
 * @return
 *   List of all citation_distribute plugins
 */
function _citation_distribute_plugins() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('citation_distribute', 'service');
  return $plugins;
}

/**
 * @function _citation_distribute_load_plugin
 *
 * Returns an instantiated citation_distribute service plugin object
 */
function _citation_distribute_load_plugin($plugin) {
  //if all we have is the name, load the info
  if (is_string($plugin)) {
    $plugins = _citation_distribute_plugins();
    if (empty($plugins[$plugin])) {
      return FALSE;
    }
    $plugin = $plugins[$plugin];
  }

  $class = ctools_plugin_get_class($plugin, 'class');
  $service = new $class();
  return $service;
}

/**
 * @function _citation_distribute_checked($plugin, nid)
 *
 * Given a plugin definition and a nid, return whether or not form element should be checked.
 * Takes into account node's current status.  If none is to be found, try auto flag var
 */
function _citation_distribute_checked($plugin, $nid) {
  if ($nid) {
    $status = db_select('citation_distribute', 'cd')
      ->condition('nid', $nid)
      ->condition('plugin', $plugin['name'])
      ->fields('cd', array('noauto'))
      ->execute();
  }

  if ($nid && $status->rowCount()) {
    //node has CD settings.  use those
    $noauto = $status->fetchColumn();
    $return = (!$noauto);
  } else {
    //no settings.  use plugin's autoflag preferences
    $var = $plugin['class'] . '_auto_flag';
    if ($vsite = vsite_get_vsite()) {
      $return = $vsite->controllers->variable->get($var);
    } else {
      $return = variable_get($var);
    }
  }

  return $return;
}
