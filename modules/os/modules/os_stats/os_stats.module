<?php 

/** 
 * Implementation of hook_block_info()
 * 
 */
function os_stats_block_info() {
	$blocks['os_stats'] = array(
		'info' => t('OpenScholar Stats'),
	);
	return $blocks;
}// end function 

/**
 * Implementation of hook_block_view()
 * 
 */
function os_stats_block_view($delta='') {
	$block = array(); 
	switch ($delta) {
		case 'os_stats':
			$block['title'] = t('OpenScholar Stats');
			$block['content'] = os_stats_content();
			break;
	}// end switgh
	return $block;
}

/** 
 * Implementation of hook_block_configure()
 * 
 */
function os_stats_block_configure($delta='') {
	$form = array();
	if($delta == 'os_stats'){
		$form['os_stats_cache_expiration'] = array(
   			'#type' => 'textfield',
  			'#title' => 'OpenScholar Statistics cache expiration (in seconds)',
  			'#default_value' => variable_get('os_stats_cache_expiration', 3600*24),
  		);
  		$form['os_stats_select'] = array(
  			'#type' => 'fieldset',
  			'#title' => 'Choose statistics to display',
  			'#collapsible' => TRUE,
  			'#collapsed' => FALSE,
  		);
  		$stats = _os_stats();
  		$enabled = unserialize(variable_get('os_stats_enabled', FALSE));
  			
  		foreach($stats as $stat => $def) {
  			echo $stat." = stat";
  			$form['os_stats_select']['os_stat_'.$stat] = array(
  				'#type' => 'checkbox',
  				'#title' => $def['description'],
  				'#default_value' => (isset($enabled[$stat])) ? $enabled[$stat] : TRUE,      
  			);	
  		}//end for each
	}// enf if
	return $form;
}// end function

/**
 * Implementation of hook_block_save()
 * 
 */
function os_stats_block_save($delta='',$edit = array()) {
	if ($delta == 'os_stats') {
  		variable_set('os_stats_cache_expiration', (int)$edit['os_stats_cache_expiration']);
  			
  		$enabled_stats = array();
  		foreach(_os_stats() as $stat => $def) {
  			//variable_set('os_stats_stat_'.$stat, (bool)$edit['os_stats_stat_'.$stat]);
  			$enabled[$stat] = (bool)$edit['os_stat_' . $stat]; 
  		}
  			
  		variable_set('os_stats_enabled', serialize($enabled));
  		cache_clear_all('os_stats_data', 'cache');
	}// end if
}// end function

/**
 * Custom HTML Block
 * 
 */
function os_stats_content() {
	// just placeholder text to ensure the block was displaying
	return '</p><div class="body">OpenScholar Stats</div><p>';
}// end function

/**
 * function to list stat, title, description, query, [callback] for stats to display
 * 
 */
function _os_stats() {
  $content_type = variable_get('scholar_content_type', 'vsite');
	return array(
		'Publications' => array(
			'title' => t('Publications'),
			'description' => t('Biblio publications'),
			'query' => 	'SELECT COUNT(nid) FROM {node} WHERE type="biblio"',
			'weight' => 20,
		),
		'Vsites' => array(
			'title' => t('Websites'),
			'description' => t('Virtual sites in this OS installation'),
		  	'query' => 'SELECT COUNT(nid) FROM {node} WHERE type = "%s" ',
		  	'query_args' => array(variable_get('scholar_content_type', 'vsite')),
		  	'weight' => 0,
		),
		'Nodes' => array(
			'title' => t('Posts'),
			'description' => t('Drupal nodes'),
			'query' => 'SELECT COUNT(nid) FROM {node}',
			'weight' => 10,
		),
		'Files' => array(
			'title' => t('Uploaded Files'),
			'description' => t('Files uploaded by users'),
			'query' => 'SELECT COUNT(fid) FROM {files}',
			'weight' => 30,
		),
		'Filesize' => array(
			'title' => t('Total uploaded'),
			'description' => t('Size of all files uploaded by users'),
			'query' => 'SELECT SUM(filesize) FROM {files}',
			'callback' => '_os_stats_file_units',
		  	'weight' => -10,
			//should the callback be in a specific file so it doesn't have to load all the time?
		),
		'Users' => array(
		  	'title' => t('Users'),
		  	'description' => t('User accounts'),
		  	'query' => 'SELECT COUNT(uid) FROM {users}',
			'weight' => -10,
		),
	);// end array
}// end function

/**
 *  function to convert bytes to biggest unit of file types, appends abbreviation 
 *  
 **/
function _os_stats_file_units($fs) {
	$units = array('b', 'kb', 'mb' ,'gb', 'tb', 'pb');
	$c = 0;
	while ($fs >= 1024 && $c < sizeof($units)-1)  {
		$c++;
		$fs = $fs/1024.0;
	}
	return round($fs, 1) . $units[$c];
}