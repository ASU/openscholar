<?php
// $Id$

/**
 * @file
 * Customizations for Gary King's website.
 */

/**
 * Implements hook_views_pre_build().
 *
 * Removes pager from the People page on Gary's website only.
 */
function gkplus_views_pre_build(&$view) {
  if (!_gkplus_check_purl()) {
    return;
  }
  if ($view->name !== 'os_profiles') {
    return;
  }
  $pager = $view->display_handler->get_option('pager');
  $pager['options']['items_per_page'] = 0;
  $view->display_handler->set_option('pager', $pager);
}

/**
 * Returns TRUE if the purl of the current vsite is "gkplus".
 */
function _gkplus_check_purl($purl = 'gking') {
  $vsite = vsite_get_vsite();
  return ($vsite && $vsite->group->purl == $purl);
}

/**
 * Implements hook_node_insert().
 */
function gkplus_node_insert($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || !$node->nid) {
    return;
  }
  _gkplus_minitheme_update($node);
}

/**
 * Implements hook_node_update().
 */
function gkplus_node_update($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || !$node->nid) {
    return;
  }
  _gkplus_minitheme_update($node);
}

/**
 * Implements hook_node_presave().
 */
function gkplus_node_presave($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || strlen($node->title) > 0) {
    return;
  }
  $node->title = 'BLANK_TITLE';
}

/**
 * Implements hook_node_view().
 */
function gkplus_node_view($node, $view_mode, $langcode) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || $node->title !== 'BLANK_TITLE') {
    return;
  }
  $node->title = '';
}

/**
 * Implements hook_node_prepare().
 */
function gkplus_node_prepare($node) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || $node->title !== 'BLANK_TITLE') {
    return;
  }
  $node->title = '';
}

/**
 * Implements hook_node_validate().
 */
function gkplus_node_validate($node, $form, $form_state) {
  if (!_gkplus_check_purl() || $node->type !== 'page' || strlen($node->title) > 0) {
    return;
  }
  $vocab_name = "Research Interests";
  if (!_gkplus_node_in_vocab($node, $vocab_name)) {
    form_set_error('title', t("Title is required for pages that are not in the <em>@vocab_name</em> taxonomy", array('@vocab_name' => $vocab_name)));
  }
}

/**
 * Node validate callback; only allows nodes with "Research Interests" term(s).
 */
function _gkplus_node_in_vocab($node, $vocab_name) {
  $items = field_get_items('node', $node, 'og_vocabulary');
  $taxonomy = array_shift($items);
  if (!isset($taxonomy) || !is_array($taxonomy) || count($taxonomy) === 0) {
    return FALSE;
  }
  foreach ($taxonomy as $vid => $terms) {
    if (!is_numeric($vid) || !count($terms) || _gking_empty_terms($terms)) {
      continue;
    }
    $vocab = taxonomy_vocabulary_load($vid);
    if ($vocab && $vocab->name === $vocab_name) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Returns TRUE if no child items of an array have a numeric 'target_id'.
 *
 * In other words, returns FALSE if at least one numeric target_id is found.
 */
function _gking_empty_terms($terms) {
  if (sizeof($terms) === 0) {
    return TRUE;
  }
  foreach ($terms as $term) {
    if (isset($term['target_id']) && is_numeric($term['target_id'])) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter() for page_node_form.
 */
function gkplus_form_page_node_form_alter(&$form, &$form_state, $form_id) {
  if (!_gkplus_check_purl()) {
    return;
  }
  $form['title']['#required'] = FALSE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function gkplus_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!_gkplus_check_purl()) {
    return;
  }

  $form['gkplus'] = array(
    '#type' => 'fieldset',
    '#access' => TRUE,
    '#title' => t('Theme settings'),
    '#weight' => 98,
    '#group' => 'additional_settings'
  );
  $form['gkplus']['gkplus_minitheme'] = array(
    '#title' => t('Remove branding'),
    '#type' => 'checkbox',
    '#size' => 65,
    '#default_value' => _gkplus_minitheme($form['#node']->nid),
    '#description' => t('Display this post using a minimalist theme without branding.'),
  );
}

/**
 * Implements hook_preprocess_HOOK for html.tpl.php.
 *
 * Adds the miniteme (gking-alt) class attribute to configured node view pages.
 */
function gkplus_preprocess_html(&$vars) {
  if (!_gkplus_check_purl()) {
    return;
  }
  $object = menu_get_object();
  if ($object->nid && _gkplus_minitheme($object->nid)) {
    $vars['classes_array'][] = "gkplus-minitheme";
  }
}

/**
 * Returns TRUE if the node is set to use the minitheme display (minimalist).
 */
function _gkplus_minitheme($nid) {
  static $nodes;
  if (!isset($nodes)) {
    $nodes = variable_get('gkplus_minitheme_nodes', array());
  }

  return in_array($nid, $nodes);
}

/**
 * Updates system variable to include/remove the current node ID.
 *
 * @see gkplus_node_insert()
 * @see gkplus_node_presave()
 */
function _gkplus_minitheme_update($node) {
  $variable = 'gkplus_minitheme_nodes';
  $nodes = variable_get($variable, array());

  if ($node->gkplus_minitheme && !in_array($node->nid, $nodes)) {
    $nodes[] = $node->nid;
    variable_set($variable, $nodes);
  }

  else if (!$node->gkplus_minitheme && in_array($node->nid, $nodes)) {
    unset($nodes[array_search($node->nid, $nodes)]);
    variable_set($variable, $nodes);
  }
}