<?php

include_once(drupal_get_path('module', 'vsite_register') . '/vsite_register.form.inc');


/**
 * Implementation of hook_menu_alter()
 */
function iqss_pinserver_register_menu_alter(&$items){
  //alter the page callback function
  $items['site/register']['page callback'] = 'iqss_pinserver_register_form_access';  //change the callback function
  $items['site/register']['module'] = 'iqss_pinserver_register';

  //values to remove
  $remove_values = array('page arguments', 'file');
  foreach($remove_values as $val){
    unset($items['site/register'][$val]);
  }
}

/**
 * Implementation of hook_form_alter()
 */
function iqss_pinserver_register_form_alter(&$form, $form_state, $form_id){
  global $user;

  //add the submit function for pinserver
  switch ($form_id) {

    case 'vsite_register_form':

      //add submit and validate functions
      $form['#submit'][] = 'iqss_pinserver_register_submit';
      $form['#validate'][] = 'iqss_pinserver_register_validate';

      //if user is has create vsite permissions, then load additional field(s)
      if (user_access('create vsite content on behalf')){
        //add huid field
	_iqss_pinserver_register_huid_field($form);
      }
    break;

    //remove and replace submit function from vsite_users to avoid redirect to 'home' after submit
    case 'vsite_users_profile_node_form':
      if(isset($form['buttons']['submit'])){
        $key = array_search('vsite_users_form_vsite_users_profile_node_submit', $form['buttons']['submit']['#submit']);
        if($key) $form['buttons']['submit']['#submit'][$key] = 'iqss_pinserver_register_vsite_users_profile_node_submit';
      }
    break;
  }
}

/**
 * Overriding submit function within vsite_user.module because when
 * pinserver is installed, user should not be redirected to 'home' after submit
 */
function iqss_pinserver_register_vsite_users_profile_node_submit($form, &$form_state){
  if(isset($form_state['redirect'])){
    unset($form_state['redirect']); //user should not get redirected after submit if pinserver is installed
  }
  //customize the confirmation message for add/edit form
  drupal_get_messages($type = NULL, $clear_queue = TRUE);
  drupal_set_message(t('Your personal information has been saved.'));
}

/**
 * A validation function for registration form submit
 */
function iqss_pinserver_register_validate($form, &$form_state){
  //check if multiple sites is limited and if site already exists
  if($uid && !user_access('create vsite content on behalf') && count(vsite_get_vsite_by_owner($uid)) >= variable_get('openscholar_vsites_per_user', 1)){
    $commands[] = ctools_ajax_command_html('#submit-suffix', 'The web site cannot be created. Please fix the errors and try again.');
    ctools_ajax_render($commands);
  }
}

/**
 * A submit function for registration form
 */
function iqss_pinserver_register_submit($form, $state){
  global $user;

  //new user and vsite should have already been created, check to make sure the user information is present
  if (isset($_SESSION['pinserver']['huid']) && !empty($_SESSION['pinserver']['huid']) && isset($user->uid) && !empty($user->uid)) {
    // Add user to database.
    iqss_pinserver_register_add_row($user->uid, $_SESSION['pinserver']['huid']);

    if (in_array('anonymous user', $user->roles) && !user_access('create vsite content on behalf')) {
      // log user in
      // Update the user table timestamp noting user has logged in.
      // This is also used to invalidate one-time login links.
      $user->login = time();

      db_update('users')
        ->fields(array('login' => $user->login))
        ->condition('uid', $user->uid, '=')
        ->execute();
    }
  }
  else {
    error_log('WARNING: The module could not insert the new user information into the database because the user information was not supplied.');
    return;
  }

  //remove pinserver session vars
  pinserver_remove_session();
}

/**
 * Check if huid exists
 */
function iqss_pinserver_register_validate_huid($huid) {
  $msg = array();

  // harvard id must be numeric
  if (!is_numeric($huid)) {
    $msg[] = t('The Harvard ID must be numeric.');
  }

  //need to check if huid already exist in table
  elseif (iqss_pinserver_register_check_row($huid)) {
    $msg[] = t('The Harvard ID you have entered already exists in the database.');
  }

  return $msg;
}

/**
 * ajax callback for huid field
 */

function iqss_pinserver_register_ajax_validation(&$form, &$state) {
  drupal_get_messages(); //clear this to avoid having notices clutter the form during ajax validation
  $elem = $state['triggering_element']['#name'];
  return theme('vsite_register_form_errors', (array(
    'name' => $elem,
    'errors' => iqss_pinserver_register_validate_huid($state['values']['huid']),
  )));
}

/**
 * Checks if user has authenticated through the pinserver
 * before rendering the signup form
 */
function iqss_pinserver_register_form_access(){
  global $user;

//  include_once(drupal_get_path('module', 'vsite_register')) . '/vsite_register.form.inc';

  /*** Check what to do before loading vsite_register form ***/

  // User already owns a site or has create vsite permissions - no need to send to pinserver.
  if ($vsites = vsite_get_vsite_by_owner($user->uid) || user_access('create vsite content on behalf')) {
    if (!vsite_vsite_exists_access($vsites)) {
      return drupal_goto(_iqss_pinserver_register_get_redirect($vsites));  //redirect user away from the form
    }
    else {
      return drupal_get_form('vsite_register_form');
    }
  }

  if (!pinserver_check_status()) {
    // Maybe user is site owner,  but has not logged in locally or via the pinserver, so send to pinserver.
    return pinserver_redirect();
  }
  else {
    // Neither use cases above apply and the user has successfully logged in through the pinserver.
    if ($uid = iqss_pinserver_register_check_row()) {
      // User has just logged in via pinsever, determine if user already has a site.
      if($vsites = vsite_get_vsite_by_owner($uid)) {

        $user = user_load(array('uid' => $uid));
	$user->login = time();
	db_update('users')
	  ->fields(array('login' => $user->login))
	  ->condition('uid', $user->uid, '=')
	  ->execute();
      }
    }
    return drupal_get_form('vsite_register_form');
  }
}

/**
 * Function to write record to table
 * @param unknown_type $uid
 */
function iqss_pinserver_register_add_row($uid, $huid){
  $object = new stdClass();
  $object->uid  = (int)$uid;
  $object->huid = (int)$huid;
  $object->reg_time = time();
  if(! db_query("SELECT uid FROM {iqss_pinserver_register} WHERE huid = $huid")->fetchField()) {
    drupal_write_record('iqss_pinserver_register', $object);
    return true;
  }
  else {
    return false;
  }
}

/**
 * Function to check if user exists in pinserver table and returns uid
 * @param unknown_type $uid
 * @return user id
 */
function iqss_pinserver_register_check_row($huid = NULL){
  $id = ($huid) ? $huid : $_SESSION['pinserver']['huid'];

  if ($id){
    return db_query("SELECT uid FROM {iqss_pinserver_register} WHERE huid = :huid", array(':huid' => $id))->fetchField();
  }

  return false;
}

/**
 * Implementation of hook_user()
 */
function iqss_pinserver_register_user($op, &$edit, &$account, $category = NULL){
  global $user;
  switch($op){
    case 'login':
      //nothing here right now
    break;

    case 'delete':
      db_delete('iqss_pinserver_register')
        ->condition('uid', (int)$account->uid)
	->execute();
    break;

    case 'logout':
      pinserver_remove_session();
    break;
  }
}

/**
 * Implement dynamic landing path
 */
function iqss_pinserver_register_pinserver_landing_path(){
  global $user;
  $vsites = vsite_get_vsite_by_owner($user->uid);
  if (!vsite_vsite_exists_access($vsites)) {
    return (!$vsites || (count($vsites) > 1) ? 'user' : $vsites[0]->get_absolute_url());
  }

  return 'site/register';
}

/**
 * API Function - returns Harvard id when passed Drupal user id
 */
function iqss_pinserver_register_get_huid($uid){
  return db_query("SELECT huid{iqss_pinserver_register} WHERE uid = %d", (int)$uid)->fetchField();
}

function _iqss_pinserver_register_huid_field(&$form){
  //harvard id field
  $form['huid'] = array(
    '#type' => 'textfield',
    '#title' => t('Harvard ID'),
    '#size' => 35,
    '#weight' => 10,
    '#required' => FALSE,
    '#description' => t('Optional: Enter the %harvard ID of the web site owner', array('%harvard' => 'Harvard')),
    '#ajax' => array(
      'callback' => 'iqss_pinserver_register_ajax_validation',
      'wrapper' => 'huid-errors',
    ),
    '#field_suffix' => theme('vsite_register_form_errors', array('name'=>'huid')),
  );

}

/**
 * Private function - Provides redirect path and message for certain regstration form access conditions
 * @param  $vsites array created from vsite_get_vsite_by_owner()
 */
function _iqss_pinserver_register_get_redirect($vsites = array()) {
  switch (count($vsites)) {
    case 0:
      //This should not happen unless $vsites was not passed properly or is empty array
      error_log(__FUNCTION__ . ' was called with an empty array as the first argument');
      return null;
    break;

    case 1:
      global $base_url;
      drupal_set_message(t('You already have a registered web site.' . l(' Go there now.', $vsites[0]->get_absolute_url())));
      return $base_url;
    break;

    default:
      drupal_set_message(t('You have already registered the maximum number of web sites.' ));
      return 'user';
    break;
  }
}
