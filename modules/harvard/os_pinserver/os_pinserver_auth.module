<?php

//Registration Form Logic
include_once ('includes/os_pinserver_auth.register_form.inc');

//Private Files Logic
include_once ('includes/os_pinserver_auth.private_files.inc');

/**
 * Implements hook_menu_alter().
 */
function os_pinserver_auth_menu_alter(&$items) {
  //Should pinserver take over registration menu entries
  if(variable_get('os_pinserver_registration', FALSE)){
    _os_pinserver_auth_register_menu_alter($items);
  }
}

/**
 * Implements hook_node_access().
 *
 * Deny Create to group content when a user has not passed through PIN.
 */
function os_pinserver_auth_node_access($node, $op, $account) {
  //Get Bundle
  $type = is_string($node) ? $node : $node->type;

  // Given: an anon user is trying to create a group node, they have not logged in through pin, and pinserver registration is enabled.
  // Deny Access
  if($op == 'create' && !$account->uid && variable_get('os_pinserver_registration', FALSE) && og_is_group_type('node', $type) && !pinserver_check_status()){
    //Only influence the create operation for logged out users.
    return NODE_ACCESS_DENY;
  }
}

/**
 * Register a "JS" callback.
 *
 * @return array
 *   An array of callbacks with the following possible keys for each callback:
 *   - callback: (required) The function to call to display the results when an ajax call occurs on this path
 *   - includes: (optional) Load aditional files from the /includes directory, without the extension
 *   - dependencies: (optional) Load additional modules for this callback
 *   - bootstrap: (optional) The bootstrap level Drupal should boot to, defaults
 *                to DATABASE or SESSION if an access argument/callback is defined
 *   - file: (optional) In which file the callback function is defined
 *   - access arguments: (optional) Arguments for the access callback
 *   - access callback: (optional) Callback for the access check, default to
 *                      user_access if there is an acces argument defined
 *
 */
function os_pinserver_auth_js() {
  // Ensure the stream wrappers are available
  drupal_load('module', 'system');
  _os_pinserver_auth_init_variables();

  return array(
    'files' => array(
      'callback' => 'os_pinserver_auth_private_file_download',
      'dependencies' => array('pinserver','file_entity','syslog','system','file'),
      'includes' => array('path'),
    ),
  );
}

/**
 * Implements hook_file_download().
 *
 * Checks for pinserver and serves file if all rules pass.
 */
function os_pinserver_auth_file_download($uri) {

  //Checks if pinserver file protection is enabled.
  if(variable_get('os_files_private_pinserver', 0)){
    return _os_pinserver_auth_file_download($uri);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for vsite_register_form.
 */
function os_pinserver_auth_form_vsite_register_form_alter(&$form, $form_state, $form_id) {
  //Should pinserver take over registration
  if(variable_get('os_pinserver_registration', FALSE)){
    _os_pinserver_auth_vsite_register_form_alter($form, $form_state, $form_id);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for vsite_users_profile_node_form.
 */
function os_pinserver_auth_form_vsite_users_profile_node_form_alter(&$form, $form_state, $form_id) {
  if (variable_get('os_pinserver_registration', FALSE)) {
    _os_pinserver_auth_vsite_users_profile_node_form_alter($form, $form_state, $form_id);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for pinserver_config.
 */
function os_pinserver_auth_form_pinserver_config_form_alter(&$form, $form_state) {
  // Add config setting for private files
  _os_pinserver_auth_pinserver_private_file_settings($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter() for cp_app_settings.
 */
function os_pinserver_auth_form_cp_app_settings_form_alter(&$form, $form_state) {

  // Add vsite level config setting for private files
  _os_pinserver_auth_vsite_private_file_settings($form, $form_state);
}

/**
 * Stores HUID by drupal user.
 *
 * @param int $uid
 * @param int $huid
 *
 * @return bool
 *   TRUE if database update was run.
 */
function os_pinserver_auth_add_row($uid, $huid) {
  $object           = new stdClass();
  $object->uid      = (int)$uid;
  $object->huid     = (int)$huid;
  $object->reg_time = time();
  if (!db_query("SELECT uid FROM {os_pinserver} WHERE huid = $huid")->fetchField()) {
    drupal_write_record('os_pinserver', $object);
    return TRUE;
  }

  return FALSE;
}

/**
 * Checks if user exists in pinserver table and returns uid
 *
 * @param int $huid
 * Defaults to active user
 *
 * @return user id
 */
function os_pinserver_auth_get_uid_from_huid($huid = NULL) {
  if(!$huid){
    $huid = pinserver_get_user_huid();
  }

  if ($huid) {
    return db_query("SELECT uid FROM {os_pinserver} WHERE huid = :huid", array(':huid' => $id))->fetchField();
  }

  return FALSE;
}