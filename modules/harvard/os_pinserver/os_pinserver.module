<?php

/**
 * Implements hook_menu_alter().
 */
function os_pinserver_menu_alter(&$items) {

  // Alters page callback
  $items['site/register']['page callback'] = 'os_pinserver_vsite_register_form_page';
  $items['site/register']['module'] = 'os_pinserver';
  $items['site/register']['access callback'] = 'os_pinserver_vsite_exists_access';
  $items['user/register']['page callback'] = 'os_pinserver_vsite_register_form_page';
  $items['user/register']['module'] = 'os_pinserver';
  $items['user/register']['access callback'] = 'os_pinserver_vsite_exists_access';

  // Removes page arguments and adds file values.
  unset($items['site/register']['page arguments'], $items['user/register']['page arguments']);
  $items['site/register']['file'] = $items['user/register']['file'] = 'os_pinserver.pages.inc';
}

/**
 * Access callback for /[site|user]/register
 */
function os_pinserver_vsite_exists_access() {
  // Just override vsite_vsite_exists_access() -- handle actual access check in
  // os_pinserver_vsite_register_form_page().
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter() for vsite_register_form.
 */
function os_pinserver_form_vsite_register_form_alter(&$form, $form_state, $form_id) {
  // Attaches submit and validate callbacks
  $form['#submit'][] = 'os_pinserver_register_submit';
  $form['#validate'][] = 'os_pinserver_register_validate';

  // Loads additional field(s) if user has permission
  if (user_access('create vsite content on behalf')) {
    _os_pinserver_huid_field($form);
  }
}

/**
 * Validation callback; for vsite_register_form.
 */
function os_pinserver_register_validate($form, &$form_state) {
  global $user;

  // Ajax validation.
  if ($_GET['q'] == 'system/ajax') {
    if ($form_state['triggering_element']['#ajax']['callback'] == 'vsite_register_ajax_validation' ||
      $form_state['triggering_element']['#ajax']['callback'] == 'os_pinserver_register_ajax_validation') {
      // Let AJAX handler deal with validating this element.
      return;
    }
    else {
      // Someone submitted the form; must validate all.
      return os_pinserver_register_ajax_submit_validation($form, $form_state);
    }
  }

  // Fall back to standard validation.
  foreach (os_pinserver_register_validate_elements($form_state['values']) as $element => $msg) {
    if ($msg) {
      form_set_error($element, $msg);
    }
  }

  return;
}

/**
 * When form is submitted with AJAX enabled, also run this validation.
 */
function os_pinserver_register_ajax_submit_validation(&$form, &$form_state) {
  global $user;

  $commands = $valid = array();

  foreach(os_pinserver_register_validate_elements($form_state) as $element => $msg) {
	  if ($msg) {
	      $commands[] = ajax_command_html("#${element}-errors", theme('item_list', array('items'=>array($msg), 'type'=>'ul', 'attributes'=>array('class'=>array('error')))));
	  }
	  else {
	    $valid[] = ajax_command_html("#${element}-errors", '');
	  }
  }

	//print new errors
	if (count($commands)) {
	  $generic_error = array(ajax_command_html('#form-errors', theme('item_list', array('items'=>array('There were errors creating your website. Please look above to correct them.'), 'type'=>'ul', 'attributes'=>array('class'=>array('error'))))));
	  print ajax_render(array_merge($commands, $valid, $generic_error));
	  exit;
	}

	return;
}

/**
 * Submit callback; for vsite_register_form.
 */
function os_pinserver_register_submit($form, &$form_state) {
  global $user;

  $uid = $user->uid;
  $huid = NULL;

  // For accounts created by admin, get the new UID of the account we just created.
  if(isset($form_state['values']['name'])) {
    $uid = user_load_by_name($form_state['values']['name'])->uid;
  }

  // Look for HUID. Prefer form value over session value.
  if(isset($form_state['values']['huid']) && !empty($form_state['values']['huid']) && is_numeric($form_state['values']['huid'])) {
    $huid = $form_state['values']['huid'];
  }
  else {
    $huid = pinserver_get_user_huid();
  }

  // Create UID->HUID association in database if UID and HUID are present.
  if (!empty($uid) && !empty($huid) && !os_pinserver_add_row($uid, $huid)) {
    error_log('WARNING: The os_pinserver_register_submit function could not add the UID->HUID association to the database');
  }

  // Removes pinserver session vars.
  pinserver_remove_session();
}

/**
 * Validate all form elements.
 */
function os_pinserver_register_validate_elements(&$form_state) {
  $errors = array();

  // Validate HUID.
  $huid_errors = os_pinserver_register_validate_huid($form_state['values']['huid']);
  if(isset($huid_errors[0])) {
    $errors['huid'] = $huid_errors[0];
  }

  // Check if user can create vsites.
  if ($user->uid && !user_access('create vsite content on behalf') && count(vsite_get_vsite_by_owner($user->uid)) >= variable_get('openscholar_vsites_per_user')) {
    $errors['form'] = t('You do not have permission to create more websites.');
  }

  return $errors;
}

/**
 * AJAX callback; for huid field
 */
function os_pinserver_register_ajax_validation(&$form, &$form_state) {
  // clear this to avoid having notices clutter the form during ajax validation
  drupal_get_messages();
  return theme('vsite_register_form_errors', array(
    'name' => $form_state['triggering_element']['#name'],
    'errors' => os_pinserver_register_validate_huid($form_state['values']['huid']),
  ));
}

/**
 * Implements hook_node_access().
 *
 * Deny Create to group content when a user has not passed through PIN.
 */
function os_pinserver_node_access($node, $op, $account) {
  if($op != 'create' || $account->uid){
    //Only influence the create operation for logged out users.
    return;
  }

  //Get Bundle
  $type = is_string($node) ? $node : $node->type;

  if (og_is_group_type('node', $type) && !pinserver_check_status()) {
    return NODE_ACCESS_DENY;
  }
}

/**
 * Checks if HUID is numeric and is a new unique ID number.
 *
 * @param int $huid
 *   The HUID to validate
 *
 * @return array $errors
 *   Empty if no errors.
 */
function os_pinserver_register_validate_huid($huid) {
  $errors = array();

  // Empty HUID field is okay.
  if (empty($huid)) {
    return $errors;
  }

  // Verifies HUID is numeric.
  else if (!is_numeric($huid)) {
    $errors[] = t('The @harvard_id must be numeric.', array('@harvard_id' => 'Harvard ID'));
  }

  // Verifies HUID does not already exist in database.
  else if (os_pinserver_get_uid_from_huid($huid)) {
    $errors[] = t('The @harvard_id you have entered already exists in the database.', array('@harvard_id' => 'Harvard ID'));
  }

  return $errors;
}

/**
 * Implements hook_form_FORM_ID_alter() for vsite_users_profile_node_form.
 */
function os_pinserver_form_vsite_users_profile_node_form_alter(&$form, $form_state, $form_id) {
  if (!isset($form['buttons']['submit'])) {
    return;
  }

  // Overrides submit function from vsite_users to prevent 'home' redirect.
  $key = array_search('vsite_users_form_vsite_users_profile_node_submit', $form['buttons']['submit']['#submit']);
  if ($key) {
    $form['buttons']['submit']['#submit'][$key] = 'os_pinserver_register_vsite_users_profile_node_submit';
  }
}

/**
 * Submit callback; overrides vsite_users.module to prevent 'home' redirect.
 */
function os_pinserver_register_vsite_users_profile_node_submit($form, &$form_state) {
  if (isset($form_state['redirect'])) {
    unset($form_state['redirect']);
  }

  // Customizes confirmation message for add/edit form
  drupal_get_messages($type = NULL, $clear_queue = TRUE);
  drupal_set_message(t('Your personal information has been saved.'));
}

/**
 * Writes a record to the table.
 *
 * @param int $uid
 * @param int $huid
 *
 * @return bool
 *   TRUE if database update was run.
 */
function os_pinserver_add_row($uid, $huid) {
  $object           = new stdClass();
  $object->uid      = (int)$uid;
  $object->huid     = (int)$huid;
  $object->reg_time = time();
  if (!db_query("SELECT uid FROM {iqss_pinserver_register} WHERE huid = $huid")->fetchField()) {
    drupal_write_record('iqss_pinserver_register', $object);
    return TRUE;
  }

  return FALSE;
}

/**
 * Checks if user exists in pinserver table and returns uid
 *
 * @param int $huid
 *
 * @return user id
 */
function os_pinserver_get_uid_from_huid($huid = NULL) {
  if(!$huid){
    $huid = pinserver_get_user_huid();
  }

  if ($huid) {
    return db_query("SELECT uid FROM {iqss_pinserver_register} WHERE huid = :huid", array(':huid' => $id))->fetchField();
  }

  return FALSE;
}

/**
 * Implements hook_user_delete().
 */
function os_pinserver_user_delete($account) {
  db_delete('iqss_pinserver_register')->condition('uid', (int)$account->uid)->execute();
}

/**
 * Returns the Harvard ID (HUID) of linked to the given Drupal user id (UID).
 */
function os_pinserver_get_user_huid($uid = false) {
  if(!$uid){
    global $user;
    $uid  = $user->uid;
  }
  return db_query("SELECT huid{iqss_pinserver_register} WHERE uid = %d", (int)$uid)->fetchField();
}

/**
 * Register a "JS" callback.
 *
 * @return array
 *   An array of callbacks with the following possible keys for each callback:
 *   - callback: (required) The function to call to display the results when an ajax call occurs on this path
 *   - includes: (optional) Load aditional files from the /includes directory, without the extension
 *   - dependencies: (optional) Load additional modules for this callback
 *   - bootstrap: (optional) The bootstrap level Drupal should boot to, defaults
 *                to DATABASE or SESSION if an access argument/callback is defined
 *   - file: (optional) In which file the callback function is defined
 *   - access arguments: (optional) Arguments for the access callback
 *   - access callback: (optional) Callback for the access check, default to
 *                      user_access if there is an acces argument defined
 *
 */
function os_pinserver_js() {
  // Ensure the stream wrappers are available
  drupal_load('module', 'system');
  _os_pinserver_init_variables();

  return array(
    'files' => array(
      'callback' => 'os_pinserver_private_file_download',
      'dependencies' => array('pinserver','file_entity','syslog','system','file'),
      'includes' => array('path'),
    ),
  );
}

/**
 * Process a file download authenticated via pinserver.
 * @return string
 */
function os_pinserver_private_file_download(){

  $path = func_get_args();
  //For now lets restrict this to private files
  $scheme = "private";

  $target = implode('/', $path);
  $uri = $scheme . '://' . $target;

  $headers = os_pinserver_file_download($uri);
  if (count($headers)) {
    file_transfer($uri, $headers);
  }

  return JS_MENU_ACCESS_DENIED;
}

/**
 * Implements hook_file_download().
 *
 * Checks for pinserver and serves file if all rules pass.
 */
function os_pinserver_file_download($uri) {

  // Next: Checks if pinserver is enabled.
  $use_pinserver = variable_get('os_files_private_pinserver', 0);

  // If enabled, serves file to users who can login via Harvard Pinserver.
  if ($use_pinserver && file_uri_scheme($uri) == 'private' && file_exists($uri)) { //TODO CHANGE TO PRIVATE

    // Serves file if user is already authenticated, or just got authenticated throurgh PIN.
    // Times out after os_files_pinserver_timeout seconds, (default 420 minutes)
    if (pinserver_check_status(variable_get('os_files_pinserver_timeout',420 * 60))) {
      $file = file_uri_to_object($uri, FALSE);
      return file_get_content_headers($file);
    }
    // Otherwise, sends the user to Pinserver to log in.
    else if (function_exists('pinserver_redirect')) {
      return pinserver_redirect(array('redirect_uri' => $_SERVER['REQUEST_URI'], 'tk_forward' => '1'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for os_files_private_settings.
 *
 * Set the URI schema to private when adding a new file via file/add.
 *
 * @see os_files_private_settings()
 */
function os_pinserver_form_cp_app_settings_form_alter(&$form, $form_state) {
  if ($form['#feature'] != 'os_files_private') {
    return;
  }

  // Checks that the current vsite has a value for the pinserver app name variable.
  $pinserver_app_name = variable_get('pinserver_app_name', NULL);
  if ($pinserver_app_name) {
    $form['os_files_private_pinserver'] = array(
      '#type' => 'checkbox',
      '#title' => t('Extend access to Harvard Community'),
      '#default_value' => variable_get('os_files_private_pinserver', 0),
      '#description' => t('By default, private files are only accessible to your site members. By extending access to Harvard Community, anyone with a valid Harvard XID can log in using the Harvard Pinserver to access your private files.'),
      '#weight' => 1,
    );
  }

  // Allows administrators only to edit pinserver app name in spaces_overrides.
  if (user_access('administer pinserver')) {
    $form['pinserver_app_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Harvard PIN server application name'),
      '#required' => FALSE,
      '#default_value' => variable_get('pinserver_app_name'),
      '#description' => t('Enter the application name given to you by Harvard Directory Services.' ),
    );
  }

}

/**
 * Init the variables $conf without loading all of the bootstrap modules.
 * This prevents hook_init from running on modules the js hook does not list.
 */
function _os_pinserver_init_variables(){
  global $conf;

  // Initialize the lock system.
  require_once DRUPAL_ROOT . '/' . variable_get('lock_inc', 'includes/lock.inc');
  lock_initialize();

  // Load variables from the database, but do not overwrite variables set in settings.php.
  $conf = variable_initialize(isset($conf) ? $conf : array());
}

/**
 * Attaches a new HUID textfield element to the given form.
 */
function _os_pinserver_huid_field(&$form) {
  $form['user_fieldset']['huid'] = array(
    '#type' => 'textfield',
    '#title' => t('Harvard ID'),
    '#size' => 35,
    '#required' => FALSE,
    '#description' => t('Enter the @huid of the web site owner', array('@huid' => 'Harvard ID')),
    '#ajax' => array(
      'callback' => 'os_pinserver_register_ajax_validation',
      'wrapper' => 'huid-errors',
    ),
    '#field_suffix' => theme('vsite_register_form_errors', array('name' => 'huid')),
  );
}