diff --git a/imagefield_crop.api.php b/imagefield_crop.api.php
index 8f8c43e..6fb69a0 100644
--- a/imagefield_crop.api.php
+++ b/imagefield_crop.api.php
@@ -7,4 +7,13 @@
  */
 function hook_imagefield_crop_image_crop_updated($file) {
 
-}
\ No newline at end of file
+}
+
+/**
+ * This hook is called after the field instance is loaded.  Altering the
+ * instance allows you to change the resolution to crop to, without having
+ * to create another field.  Context provides the form the field appears in.
+ */
+function hook_imagefield_crop_instance_alter(&$instance, $context) {
+
+}
diff --git a/imagefield_crop.module b/imagefield_crop.module
index a675e94..caa4d5e 100644
--- a/imagefield_crop.module
+++ b/imagefield_crop.module
@@ -496,7 +496,9 @@ function imagefield_crop_widget_process($element, &$form_state, $form) {
 
   $instance = field_widget_instance($element, $form_state);
 
-  $settings = $instance['settings'];
+  $context = array('form' => $form);
+  drupal_alter('imagefield_crop_instance', $instance, $context);
+  
   $widget_settings = $instance['widget']['settings'];
   $element['#theme'] = 'imagefield_crop_widget';
   $element['#description'] = t('Click on the image and drag to mark how the image will be cropped');
@@ -636,6 +638,10 @@ function imagefield_crop_widget_preview_process($element, &$form_state, $form) {
   $parents = array_slice($element['#array_parents'], 0, -1);
   $parent = drupal_array_get_nested_value($form, $parents);
   $instance = field_widget_instance($parent, $form_state);
+  
+  $context = array('form' => $form);
+  drupal_alter('imagefield_crop_instance', $instance, $context);
+  
   list($width, $height) = !empty($instance['widget']['settings']['resolution']) ? explode('x', $instance['widget']['settings']['resolution']) : array(0, 0);
 
   $image_info = image_get_info(drupal_realpath($file->uri));
