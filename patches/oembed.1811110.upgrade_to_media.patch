diff --git media_oembed/MediaInternetOEmbedHandler.inc media_oembed/MediaInternetOEmbedHandler.inc
index 93d6e35..9a4cdf1 100644
--- media_oembed/MediaInternetOEmbedHandler.inc
+++ media_oembed/MediaInternetOEmbedHandler.inc
@@ -28,7 +28,11 @@ class MediaInternetOEmbedHandler extends MediaInternetBaseHandler {
    */
   public function getFileObject() {
     $uri = 'oembed://'. drupal_encode_path($this->embedCode);
-    return file_uri_to_object($uri, TRUE);
+    $file = file_uri_to_object($uri, TRUE);
+    if (empty($file->type)) {
+      $file->type = file_get_type($file);
+    }
+    return $file;
   }
 
   /**
diff --git media_oembed/media_oembed.module media_oembed/media_oembed.module
index 530cb53..7c3b2b4 100644
--- media_oembed/media_oembed.module
+++ media_oembed/media_oembed.module
@@ -75,22 +75,20 @@ function media_oembed_file_default_displays() {
   $default_displays = array();
 
   $default_styles = array();
-  foreach(media_type_get_types() as $name => $type) {
+  foreach(file_type_get_enabled_types() as $name => $type) {
     // For default and Large view modes, use the default width and height from
     // hook_file_formatter_info().
-    $default_styles[$name . '__default__media_oembed'] = array();
+    $default_styles[$name . '__default__media_oembed'] = array('wmode' => 'transparent');
     $default_styles[$name . '__default__media_oembed_thumbnail'] = array();
-    $default_styles[$name . '__media_large__media_oembed'] = array();
-    $default_styles[$name . '__media_large__media_oembed_thumbnail'] = array();
 
     // For the Preview view mode, match the width and height of the square
     // thumbnail in media_image_default_styles().
-    $default_styles[$name . '__media_preview__media_oembed_thumbnail'] = array('width' => '180', 'height' => '180');
+    $default_styles[$name . '__preview__media_oembed_thumbnail'] = array('width' => '180', 'height' => '180');
 
     // For the Original view mode, set width and height to empty, so that they
     // use what's returned by the oEmbed response.
-    $default_styles[$name . '__media_original__media_oembed'] = array('width' => '', 'height' => '');
-    $default_styles[$name . '__media_original__media_oembed_thumbnail'] = array('width' => '', 'height' => '');
+    $default_styles[$name . '__full__media_oembed'] = array('width' => '', 'height' => '', 'wmode' => 'transparent');
+    $default_styles[$name . '__full__media_oembed_thumbnail'] = array('width' => '', 'height' => '');
   }
 
   foreach ($default_styles as $display_name => $settings) {
@@ -106,6 +104,18 @@ function media_oembed_file_default_displays() {
   return $default_displays;
 }
 
+function media_oembed_file_default_types_alter(&$types) {
+  $types['image']->mimetypes[] = 'image/oembed';
+  $types['image']->streams[] = 'oembed';
+
+  $types['video']->mimetypes[] = 'video/oembed';
+  $types['video']->streams[] = 'oembed';
+
+  $types['document']->mimetypes[] = 'text/oembed';
+  $types['document']->streams[] = 'oembed';
+}
+
+
 /**
  * Implements hook_ctools_plugin_api().
  */
@@ -128,10 +138,11 @@ function media_oembed_file_formatter_media_oembed_view($file, $display, $langcod
   if ($scheme == 'oembed') {
     $url = rawurldecode(substr($file->uri, 9));
 
-    // Strict sizing doesn't work reliably.
+    // The oEmbed spec supports maxwidth and maxheight.
+    // Some providers support wmode for flash objects
     $options = array(
-      'width' => isset($file->override['width']) ? $file->override['width'] : $display['settings']['width'],
-      'height' => isset($file->override['height']) ? $file->override['height'] : $display['settings']['height'],
+      'maxwidth' => isset($file->override['width']) ? $file->override['width'] : $display['settings']['width'],
+      'maxheight' => isset($file->override['height']) ? $file->override['height'] : $display['settings']['height'],
       'wmode' => isset($file->override['wmode']) ? $file->override['wmode'] : $display['settings']['wmode'],
     );
     if (empty($options['wmode'])) {
