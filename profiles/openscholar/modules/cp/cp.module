<?php

/**
 * Control Panel
 */

define('CP_MENU_OFF', 'off');
define('CP_MENU_MINI', 'mini');
define('CP_MENU_FULL', 'full');

/**
 * Implementation of hook_ctools_plugin_api().
 */
function cp_ctools_plugin_api(){
  list($module, $api) = func_get_args();
  if ($module == "context" && $api == "context") {
    return array(
      "version" => 3
    );
  }
}

function cp_invoke($hook, $args = array()) {
  if (!isset($_GET['cp']) || is_null($_GET['cp'])) return;  // we're not in a cp mode

  module_load_include('inc', 'cp', 'includes/cp.'.$module);
  $function = 'cp_'.$module.'_'.$hook;
  if (function_exists($function)) {
    $function($args);
  }
}

/**
 * Loads an include file based on a get
 */
function cp_init() {
  cp_invoke('init');
}

/**
 * Implements hook_menu
 */
function cp_menu(){
  $items = array();

  $spaces_path = drupal_get_path('module', 'spaces');
  $items["cp/build"] = array(
    'title' => 'Site building',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'spaces_features_form'
    ),
    'file' => 'spaces.admin.inc',
    'file path' => $spaces_path,
    'weight' => 10
  );

  $items["cp/build/features"] = array(
    'title' => 'Features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'spaces_features_form'
    ),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'spaces.admin.inc',
    'file path' => $spaces_path,
    'weight' => 10
  );

/*  $items["cp/build/layout"] = array(
    'title' => 'Layout',
    'page callback' => 'cp_layout',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );*/

  $items["cp/build/menu"] = array(
    'title' => 'Menu',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_menu_overview_form', 'primary-menu'),
    'weight' => 10,
    'file path' => drupal_get_path('module','os')."/includes",
    'file' => 'menu.inc',
  );

  $items["cp/build/taxonomy"] = array(
    'title' => 'Taxonomy',
    'page callback' => 'cp_taxonomy',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  // Appearance
  $items['cp/appearance'] = array(
    'title' => "Appearance",
    'page callback' => 'cp_appearance',
    'weight' => 20,
  );

  $items['cp/appearance/theme'] = array(
    'title' => t('Theme'),
    'page callback' => 'cp_appearance',

    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 20,
  );

  // Settings
  $items['cp/settings'] = array(
    'title' => "Settings",
    'page callback' => 'cp_settings',
    'weight' => 20,
  );
  
  // Menu Wizard
  $items['cp/menu/%ctools_js'] = array(
    'title' => 'Menu',
    'page callback' => 'cp_menu_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
 
  
  // make them all part of 'cp' menu
  foreach ( $items as $path => $item ) {
    if (! array_key_exists('menu_name', $item))
      $items[$path]['menu_name'] = 'cp';

    // @todo maybe provide our own permissoin instead ?
    if (! array_key_exists('access callback', $item))
      $items[$path]['access arguments'] = array('access content');
  }

  // proof of concept
  return $items;
}

function cp_theme() {
  $theme = array();
  $theme['cp-toolbar'] = array(
    'render element' => 'cp_toolbar',
    'template' => 'cp-toolbar',
    'path' => drupal_get_path('module', 'cp').'/theme',
  );

  return $theme;
}

/**
 * cp/build/layout callback
 */
function cp_layout(){
  return 'cp/build/layout';
}

/**
 * cp/build/menu callback
 */
function cp_menu_callback(){
  return 'cp/build/menu';
}

/**
 * cp/build/taxonomy callback
 */
function cp_taxonomy(){
  return 'cp/build/taxonomy';
}

/**
 * cp/appearance callback
 */
function cp_appearance(){
  return 'cp/appearance';
}

/**
 * cp/settings callback
 */
function cp_settings(){
  return 'cp/settings';
}

/**
 * Block functions
 * Implementations of block hooks to define the navigation block
 */
function cp_block_info() {
  return array(
    'cp_subnav' => array(
      'info' => t('CP Subnavigation'),
      'region' => 'sidebar_first',
      'cache' => DRUPAL_CACHE_GLOBAL,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'cp/*',
    ),
  );
}

function cp_block_view($delta) {
  if ($delta != 'cp_subnav') return;  // does this every happen?

  return array(
    'subject' => NULL,
    'content' => menu_primary_local_tasks(),
  );
}

/**
 * Adds the CP menus to a page
 */
function cp_page_build(&$page) {
  $menu = array();
//  switch (_cp_get_toolbar_setting()) {
//    case CP_MENU_FULL:
//        $menu = _cp_full_menu();
//        $page['#classes_array'][] = 'cp-menu-full';
//        break;
//    case CP_MENU_MINI:
//        $menu = _cp_mini_menu();
//        $page['#classes_array'][] = 'cp-menu-mini';
//        break;
//  }
//  $page['page_top']['cp_menu'] = $menu;
  $page['page_top']['cp_toolbar'] = array(
    '#pre_render' => array('cp_toolbar_pre_render'),
    '#access' => spaces_access_admin_perms(array('access control panel')),
  );

  cp_invoke('page_build', $page);
}

/**
 * Returns a constant reflecting the state of the CP menu
 */
function _cp_get_toolbar_setting() {

  if (!user_is_logged_in()) {
    return CP_MENU_OFF;
  }

  if (spaces_access_admin() && (context_isset('context', 'cp-admin') || variable_get('cp_admin_menu', 0))) {
    return CP_MENU_FULL;
  }

  return CP_MENU_MINI;
}

function _cp_full_menu() {
  $links = array();

  // Retrieve the admin menu from the database.
  // These are the 'Features/Appearance/Users/etc. buttons.
  $tree = menu_tree_all_data('cp');
  $links = menu_tree_output($tree);

  // Add user-specific links
  global $user;
  $user_links = array();
  $user_links[] = array(
    'title' => t('Hello <strong>!username</strong>', array(
      '!username' => $user->name
    )),
    'href' => 'user',
    'html' => TRUE
  );

  /*$new_count = vsite_news_get_new_activity_count();
  $user_links[] = array(
    'title' => $new_count,
    'href' => 'cp/news', //@TODO: replace this with new path
    'attributes' => $new_count?array('class' => 'unread', 'title' => t('Unread Activity on your Site')):array('title' => t('All Activity on your Site')),
  );*/

  $user_links[] = array(
    'title' => t('Logout'),
    'href' => "logout",
    'query' => !context_isset('context', 'cp-admin')?array('destination' => $_GET['q']):'',
  );
  if (context_isset('context', 'cp-admin')) {
    $user_links[] = array(
      'title' => t('Back to your site!'),
      'href' => "",
      'html' => TRUE
    );
  }

  return array(
    '#type' => 'container',
    'toolbar' => $links,
    'user' => array(
      '#theme' => 'links',
      '#links' => $user_links,
    ),
    '#attributes' => array(
      'id' => array(
        'cp-menu-full',
      ),
    ),
  );
}

function _cp_mini_menu() {
  global $user;
  $user_links = array();

  if (spaces_access_admin()) {
    $user_links[] = l('Control Panel', 'cp/build/features', array('attributes' => array('class' => 'wrench', 'title' => t('Manage this Site'))));

    //$new_count = vsite_news_get_new_activity_count();
    //$user_links[] = l($new_count, 'cp/news', $new_count?array('attributes' => array('class' => 'unread', 'title' => t('New Activity on this Site'))):array('attributes' => array('title' => t('All Activity on this Site'))));
  }

  $user_links[] = array(
    'data' => t('Hello <strong>!username</strong>', array(
        '!username' => $user->name
     )),
    'children' => array(
      l('My Account', 'user'),
      l('Logout', 'logout'),
    )
  );
  return array(
  	'#theme' => 'item_list',
    '#items' => $user_links,
    '#attributes' => array(
      'id' => 'cp-menu-mini',
    )
  );
}

function cp_toolbar_pre_render($toolbar) {
  $toolbar = array_merge($toolbar, cp_toolbar_view());
  return $toolbar;
}

/**
 * Builds the admin menu as a structured array ready for drupal_render().
 *
 * @return
 *   Array of links and settings relating to the admin menu.
 */
function cp_toolbar_view() {
  $build = toolbar_view();

  $build['#theme'] = 'cp-toolbar';
  $build['#attached']['css'] = array(drupal_get_path('module', 'cp').'/theme/cp-toolbar.css');
  $build['toolbar_menu']['#links'] = toolbar_menu_navigation_links(cp_get_menu_tree());
  $build['toolbar_drawer'] = array();
  $build['toolbar_drawer_classes'] = '';
  unset($build['toolbar_toggle']);

  if ($GLOBALS['user']->uid == 1) {
    unset($build['toolbar_home']);
    unset($build['toolbar_user']);
  }

  return $build;
}

/**
 * Gets only the top level items below the 'admin' path.
 *
 * @return
 *   An array containing a menu tree of top level items below the 'admin' path.
 */
function cp_get_menu_tree() {
  $tree = array();
  $tree = menu_build_tree('cp', array(
    'min_depth' => 1,
    'max_depth' => 1,
  ));
  
  return $tree;
  
}

// menu wizard
function cp_menu_page($js = NULL, $step = NULL) {
  //can we collect the original menu?  should that be part of the menu link so the result can be added back in?
  
  //get cached results
  $object_id = 'cp_menu';
  if (empty($step)) {
    $step = 'type';
    cp_menu_cache_clear($object_id);
  }
  
  $object = cp_menu_cache_get($object_id);
  
  $form_state = array(
    'ajax' => $js,
    'object_id' => $object_id,
    'object' => &$object,
  );
  
  //prep multistep form info
  $path = (strpos(current_path(), 'cp/menu') !== FALSE) ? 'cp/menu/' : 'admin/cp-menu/'; //depends on context.  admin/cp-menu or cp/menu
  $form_info = array(
    'id' => 'cp_menu_form',
    'path' => $path . ($js ? 'ajax' : 'nojs') . '/%step',
    'show trail' => FALSE,
    'show back' => TRUE,
    'show cancel' => FALSE,
    'next callback' => 'cp_menu_wizard_next',
    'finish callback' => 'cp_menu_wizard_finish',
    'cancel callback' => 'cp_menu_wizard_cancel',
    
    //'order' => array('type' => 'Type of Link'), //is order necessary?  how to remove
    'forms' => array(
      'type' => array(
      	'form id' => 'cp_menu_type',
        'title'   => t('Link Type'),
      ),
    ),
  );
  
  //add type dependent pages
  $type = (isset($object['type'])) ? $object['type'] : $_POST['type'];
  switch($type) {
    case 'list':
      $form_info['forms']['list_type'] = array('form id' => 'cp_menu_list_type', 'title'=>t('Type of List'));
      
      $list_type = (isset($object['list_type'])) ? $object['list_type'] : $_POST['list_type'];
      if ($list_type == 'taxonomy') {
        $form_info['forms']['term'] = array('form id' => 'cp_menu_list_term', 'title'=>t('Taxonomy Terms'));
      } elseif ($list_type == 'publications') {
        $form_info; //pubs.
      }
      
      break;
      
    case 'page':
      $form_info['forms']['page'] = array('form id' => 'cp_menu_selectpage', 'title'=>t('Select or Create Page'));
      break;
      
    case 'url':
      $form_info['forms']['url'] = array('form id' => 'cp_menu_url', 'title'=>t('Link URL'));
      break;
  }

  //add final page after type sensitive pages have been included
  $form_info['forms']['title'] = array('form id' => 'cp_menu_title', 'title'=>t('Link Title'));
  
  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  return drupal_render($form);
}


//cp menus forms
function cp_menu_type($form, &$formstate) {
  $form_state['title'] = t('Link Type');
  
  $form['type'] = array(
    '#type' => 'radios',
    '#options' => array('page'=>'Page', 'url'=>'URL', 'list'=>'List'),
    '#description' => t('Type of content to link to.'),
  );
  
  return $form;
}

function cp_menu_title($form, &$formstate) {
  $form_state['title'] = t('Title');
  
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#description' => t('Name your link.'),
  	'#required' => TRUE,
  );
  
  //should we support other attributes here as well?  still undecided if new window should exist
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Options'),
    '#collapsed' => TRUE,
  	'#collapsible' => TRUE,
  
    'new_window' => array(
      '#type' => 'checkbox',
      '#title' => t('New Window'),
      '#description' => t('Open link in new tab or window'),
      '#default' => FALSE,
    ),
    
    'tooltip' => array(
      '#type' => 'textfield',
      '#title' => t('Tooltip'),
      '#description' => t('Text displayed when mouse hovers over link'),
    )
  );
  
  return $form;
}

function cp_menu_selectpage($form, &$formstate) {
  $formstate['title'] = t('Select or Create a Page');
  
  $form['node'] = array(
    '#type' => 'textfield',
    '#title' => t('Page'),
    '#autocomplete_path' => 'ctools/autocomplete/node', //does not limit by vsite or user.  waiting for d7's version of vsite_node_autocomplete
    '#description' => t('Select an existing page or !click to create a new one.', array('!click' => l(t('click here'), 'node/add'))), //overlay?
  );
  
  return $form;
}

function cp_menu_url($form, &$formstate) {
  $formstate['title'] = t('URL');
  
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#required' => TRUE,
  );
  
  return $form;
}

//check that submitted url is legit
function cp_menu_url_validate(&$form, &$state) {
  $url = check_url($state['values']['url']);

  if (url_is_external($url)) {
    $header = get_headers($url);
    $http = explode(' ', $header[0]);
    $http_code = $http[1];
    
    if ($http_code >= 400) {
      form_set_error('url', t('URL Returned Error: %error', array('%error' => $header[0])));
    }
  } elseif (!menu_get_item($url)) {
      form_set_error('url', t('Path does not exist'));
  }
}

function cp_menu_list_type($form, &$formstate) {
  $form_state['title'] = t('Type of List');
  
  $form['list_type'] = array(
    '#title' => t('Type of List'),
    '#type' => 'radios',
    '#options' => array('publications'=>'Publications', 'taxonomy'=>'Taxonomy'),
    '#description' => t('Type of content to link to.'),
    '#required' => TRUE,
  );
  
  //are we listing content of a type or grouping it by that type?
  
  $form['publications_type'] = array(
    '#type' => 'radios',
    '#title' => 'Publications by ...',
    '#options' => array('year'=>'Year', 'type'=>'Type', 'co'=>'Co-author'),
    '#states' => array(
      'visible' => array(
        ':input[name="list_type"]' => array('value' => 'publications'),
      ),
    )
  );

  //is there a vsite aware version of this?
  $options = array();
  foreach (taxonomy_get_vocabularies() as $vid => $vocab) {
    $options[$vocab->vid] = $vocab->name;
  }

  if (count($options)) {
    $form['vocabulary'] = array(
      '#type' => 'radios',
      '#title' => 'Vocabulary',
      '#options' => $options,
      '#states' => array(
        'visible' => array(
          ':input[name="list_type"]' => array('value' => 'taxonomy'),
        ),
      )
    );
  } else {
    $form['taxonomy_not_found'] = array(
      '#type' => 'item',
      '#title' => 'No vocabularies found.  Please create a vocabulary or choose another type of list.',
      '#states' => array(
        'visible' => array(
          ':input[name="list_type"]' => array('value' => 'taxonomy'),
        ),
      )
    );
  }
  
  return $form;
}

//list type validation function.  publications need a pub type and taxonomies need a vocab.  couldn't make this happen with just #state
function cp_menu_list_type_validate(&$form, &$formstate) {
  if ($formstate['values']['list_type'] == 'publications' && strlen($formstate['values']['publications_type']) == 0) {
    form_set_error('publications_type', t('Publication list selected, but missing publication type.'));
  }
  if ($formstate['values']['list_type'] == 'taxonomy' && strlen($formstate['values']['vocabulary']) == 0) {
    form_set_error('vocabulary', t('Taxonomy list selected, but missing vocabulary.'));
  }
}

function cp_menu_list_term($form, &$formstate) {
  $vid = $formstate['object']['vocabulary'];
  $terms = taxonomy_get_tree($vid, 0);
  
  $options = array();
  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
  }
  
  $form['term'] = array(
    '#title' => t('Term'),
    '#type' => 'radios',
    '#options' => $options,
  );
  
  return $form;
}
  
/**
* Cache helpers
*/
function cp_menu_cache_set($id, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('cp_menu', $id, $object);
}

/**
* Get the current object from the cache, or default.
*/
function cp_menu_cache_get($id) {
  ctools_include('object-cache');
  $object = ctools_object_cache_get('cp_menu', $id);
  return ($object) ? $object : array();
}

/**
* Clear the wizard cache.
*/
function cp_menu_cache_clear($id) {
  ctools_include('object-cache');
  ctools_object_cache_clear('cp_menu', $id);
}

function cp_menu_wizard_next(&$form_state) {
  $form_state['object'] += $form_state['values'];
  cp_menu_cache_set($form_state['object_id'], $form_state['object']);
}

function cp_menu_wizard_cancel(&$form_state) {
  
}
function cp_menu_wizard_finish(&$form_state) {
  $values = cp_menu_cache_get($form_state['object_id']) + $form_state['values'];
  //lets make the link first
  
  switch ($values['type']) {
    case 'url':
      $url = check_url($values['url']);
      break;
      
    case 'page':
      $nid = (int)array_pop(explode(' ', $values['node']));
      $url = 'node/'.$nid;
      $alias = drupal_lookup_path('alias', $url);
      //is trimming the vsite name necssary?
      //fail gracefully
      break;
      
    default:
      return;
  }
  
  $menu_name = 'primary-menu'; //or something
  
  $new_menu = array(
    $menu_name.':'.$url => array(  // TODO ever for externals?
      'link_path' => $url,
      'router_path' => 'node/%', // TODO where does this come from?
      'link_title' => $values['title'],
      'module' => 'system',
      'has_children' => '0',
      'expanded' => '0',
      'menu_name' => 'features', // TODO really?
      'weight' => '0', // TODO is there a way to add this in the form?  worth it?  maybe a slider?
      'hidden' => '0',
      'options' => array(
        //newwwindow,
        //alt
        //can I just add options here and proc them later or is there another place?
      ),
    ),
  );

  //then save to vsite or whole site
  $menu = unserialize(variable_get($menu_name, 'a:0:{}'));
  variable_set($menu_name, serialize($menu + $new_menu));
  drupal_goto('<front>');
}


