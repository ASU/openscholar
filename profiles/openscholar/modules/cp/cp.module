<?php
include_once ('cp.features.inc');

/**
 * Control Panel
 */

define('CP_MENU_OFF', 'off');
define('CP_MENU_MINI', 'mini');
define('CP_MENU_FULL', 'full');

function cp_invoke($hook, $args = array()) {
  if (!isset($_GET['cp']) || is_null($_GET['cp'])) return;  // we're not in a cp mode

  module_load_include('inc', 'cp', 'includes/cp.'.$module);
  $function = 'cp_'.$module.'_'.$hook;
  if (function_exists($function)) {
    $function($args);
  }
}

/**
 * Loads an include file based on a get
 */
function cp_init() {
  cp_invoke('init');
}

/**
 * Implements hook_menu
 */
function cp_menu(){
  $items = array();

  $spaces_path = drupal_get_path('module', 'spaces');
  $items["cp/build"] = array(
    'title' => 'Site building',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'spaces_features_form'
    ),
    'file' => 'spaces.admin.inc',
    'file path' => $spaces_path,
    'weight' => 10
  );

  $items["cp/build/features"] = array(
    'title' => 'Features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'spaces_features_form'
    ),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'spaces.admin.inc',
    'file path' => $spaces_path,
    'weight' => 10
  );

 /* $items["cp/build/menu"] = array(
    'title' => 'Menu',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_menu_overview_form', 'primary-menu'),
    'weight' => 10,
    'file path' => drupal_get_path('module','os')."/includes",
    'file' => 'menu.inc',
  );*/

  $items["cp/build/taxonomy"] = array(
    'title' => 'Taxonomy',
    'page callback' => 'cp_taxonomy',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  // Settings
  $items['cp/settings'] = array(
    'title' => "Settings",
    'page callback' => 'cp_settings',
    'weight' => 20,
  );
  // make them all part of 'cp' menu
  foreach ( $items as $path => $item ) {
    if (! array_key_exists('menu_name', $item))
      $items[$path]['menu_name'] = 'cp';

    // @todo maybe provide our own permissoin instead ?
    if (! array_key_exists('access callback', $item))
      $items[$path]['access arguments'] = array('access content');
  }



  // proof of concept
  return $items;
}

function cp_theme() {
  $theme = array();
  $theme['cp-toolbar'] = array(
    'render element' => 'cp_toolbar',
    'template' => 'cp-toolbar',
    'path' => drupal_get_path('module', 'cp').'/theme',
  );

  return $theme;
}

function cp_permission() {
  return array(
    'access control panel' => array(
      'title' => t('Access Control Panel'),
    ),
  );
}

/**
 * cp/build/layout callback
 */
function cp_layout(){
  return 'cp/build/layout';
}

/**
 * cp/build/menu callback
 */
function cp_menu_callback(){
  return 'cp/build/menu';
}

/**
 * cp/build/taxonomy callback
 */
function cp_taxonomy(){
  return 'cp/build/taxonomy';
}



/**
 * cp/settings callback
 */
function cp_settings(){
  return 'cp/settings';
}

/**
 * Block functions
 * Implementations of block hooks to define the navigation block
 */
function cp_block_info() {
  return array(
    'cp_subnav' => array(
      'info' => t('CP Subnavigation'),
      'region' => false,
      'cache' => DRUPAL_CACHE_GLOBAL,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'cp/*',
    ),
  /*'cp_minimenu' => array(
      'info' => t('CP Mini-Menu'),
      'region' => 'three_33_third',
      'cache' => DRUPAL_CACHE_PER_ROLE,
    ),*/
  );
}

function cp_block_view($delta) {

  switch ($delta) {
    case 'cp_subnav':
      return array(
        'subject' => NULL,
        'content' => menu_primary_local_tasks(),
      );
    case 'cp_minimenu':
      if (spaces_access_admin()) {
        return array(
          'subject' => NULL,
          'content' => _cp_mini_menu(),
        );
      }
      else {
        return array();
      }
  }
}

/**
 * Adds the CP menus to a page
 *
 * @todo Add seperate mini toolbar
 */
function cp_page_build(&$page) {
  
  $menu = array();
  switch (_cp_get_toolbar_setting()) {
    case CP_MENU_FULL:
    case CP_MENU_MINI:
      //MINI Toolbar needed
        $menu = array(
          '#pre_render' => array('cp_toolbar_pre_render'),
          '#access' => spaces_access_admin_perms(array('access control panel')),
        );
        break;
  }
  $page['page_top']['cp_toolbar'] = $menu;
  
  cp_invoke('page_build', $page);
}

/**
 * Returns a constant reflecting the state of the CP menu
 */
function _cp_get_toolbar_setting() {

  //If the user is logged out or we are not in a space, turn the menu off
  if (!user_is_logged_in() || (module_exists('vsite') && !spaces_get_space())) {
    return CP_MENU_OFF;
  }

  if (spaces_access_admin() && (context_isset('context', 'cp-admin') || variable_get('cp_admin_menu', 0))) {
    return CP_MENU_FULL;
  }

  return CP_MENU_MINI;
}

//function _cp_full_menu() {
//  $links = array();
//
//  // Retrieve the admin menu from the database.
//  // These are the 'Features/Appearance/Users/etc. buttons.
//  $tree = menu_tree_all_data('cp');
//  $links = menu_tree_output($tree);
//
//  // Add user-specific links
//  global $user;
//  $user_links = array();
//  $user_links[] = array(
//    'title' => t('Hello <strong>!username</strong>', array(
//      '!username' => $user->name
//    )),
//    'href' => 'user',
//    'html' => TRUE
//  );
//
//  /*$new_count = vsite_news_get_new_activity_count();
//  $user_links[] = array(
//    'title' => $new_count,
//    'href' => 'cp/news', //@TODO: replace this with new path
//    'attributes' => $new_count?array('class' => 'unread', 'title' => t('Unread Activity on your Site')):array('title' => t('All Activity on your Site')),
//  );*/
//
//  $user_links[] = array(
//    'title' => t('Logout'),
//    'href' => "logout",
//    'query' => !context_isset('context', 'cp-admin')?array('destination' => $_GET['q']):'',
//  );
//  if (context_isset('context', 'cp-admin')) {
//    $user_links[] = array(
//      'title' => t('Back to your site!'),
//      'href' => "",
//      'html' => TRUE
//    );
//  }
//
//  return array(
//    '#type' => 'container',
//    'toolbar' => $links,
//    'user' => array(
//      '#theme' => 'links',
//      '#links' => $user_links,
//    ),
//    '#attributes' => array(
//      'id' => array(
//        'cp-menu-full',
//      ),
//    ),
//  );
//}

//function _cp_mini_menu() {
//  global $user;
//  $user_links = array();
//
//  if (spaces_access_admin()) {
//    $user_links[] = l('Control Panel', 'cp/build/features', array('attributes' => array('class' => 'wrench', 'title' => t('Manage this Site'))));
//
//    //$new_count = vsite_news_get_new_activity_count();
//    //$user_links[] = l($new_count, 'cp/news', $new_count?array('attributes' => array('class' => 'unread', 'title' => t('New Activity on this Site'))):array('attributes' => array('title' => t('All Activity on this Site'))));
//  }
//
//  $user_links[] = array(
//    'data' => t('Hello <strong>!username</strong>', array(
//        '!username' => $user->name
//     )),
//    'children' => array(
//      l('My Account', 'user'),
//      l('Logout', 'logout'),
//    )
//  );
//  return array(
//  	'#theme' => 'item_list',
//    '#items' => $user_links,
//    '#attributes' => array(
//      'id' => 'cp-menu-mini',
//    )
//  );
//}

function cp_toolbar_pre_render($toolbar) {
  $toolbar = array_merge($toolbar, cp_toolbar_view());
  return $toolbar;
}

/**
 * Builds the admin menu as a structured array ready for drupal_render().
 *
 * @return
 *   Array of links and settings relating to the admin menu.
 */
function cp_toolbar_view() {
  $build = toolbar_view();

  $build['#theme'] = 'cp-toolbar';
  $build['#attached']['css'] = array(drupal_get_path('module', 'cp').'/theme/cp-toolbar.css');
  $build['toolbar_menu']['#links'] = toolbar_menu_navigation_links(cp_get_menu_tree());
  $build['toolbar_drawer'] = array();
  $build['toolbar_drawer_classes'] = '';
  unset($build['toolbar_toggle']);

  if ($GLOBALS['user']->uid == 1) {
    unset($build['toolbar_home']);
    unset($build['toolbar_user']);
  }

  return $build;
}

/**
 * Gets only the top level items below the 'admin' path.
 *
 * @return
 *   An array containing a menu tree of top level items below the 'admin' path.
 */
function cp_get_menu_tree() {
  $tree = array();
  $tree = menu_build_tree('cp', array(
    'min_depth' => 1,
    'max_depth' => 1,
  ));

  return $tree;

}

/**
 * @function cp_use_cp_theme
 *
 * @return Bool indicating whether or not to use cp theme.
 */
function cp_use_cp_theme() {
  if (($space = spaces_get_space()) == FALSE) {
    return FALSE;
  }

  if ((arg(0) == 'cp') ||  (arg(0)=='node' && arg(1)=='add') || (arg(0) == 'node' && arg(2) == 'edit')) {
    return TRUE;
  }
}
