<?php
include_once ('cp.features.inc');

/**
 * Control Panel
 */

define('CP_MENU_OFF', 'off');
define('CP_MENU_MINI', 'mini');
define('CP_MENU_FULL', 'full');

function cp_invoke($hook, $args = array()){
  if (! isset($_GET['cp']) || is_null($_GET['cp']))
    return; // we're not in a
                                                             // cp mode

  module_load_include('inc', 'cp', 'includes/cp.' . $module);
  $function = 'cp_' . $module . '_' . $hook;
  if (function_exists($function)) {
    $function($args);
  }
}

/**
 * Loads an include file based on a get
 */
function cp_init(){
  cp_invoke('init');
}

/**
 * Implements hook_menu
 */
function cp_menu(){
  $items = array();

  $spaces_path = drupal_get_path('module', 'spaces');
  $items["cp/build"] = array(
      'title' => 'Site building',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
          'spaces_features_form'
      ),
      'file' => 'spaces.admin.inc',
      'file path' => $spaces_path,
      'weight' => 10
  );

  $items["cp/build/features"] = array(
      'title' => 'Features',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
          'spaces_features_form'
      ),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'spaces.admin.inc',
      'file path' => $spaces_path,
      'weight' => 10
  );

  $items["cp/build/taxonomy"] = array(
      'title' => 'Taxonomy',
      'page callback' => 'cp_taxonomy',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 10
  );

  // Settings
  $items['cp/settings'] = array(
      'title' => "Settings",
      'page callback' => 'cp_settings',
      'weight' => 20
  );

  // feature customize form
  $items['cp/build/features/%ctools_js/%'] = array(
    'title' => 'Features',
    'page callback' => 'cp_feature_customize',
    'page arguments' => array(3,4),
    'access callback' => 'spaces_access_admin',
    'file' => 'cp.pages.inc',
  );

  return $items;
}

function cp_menu_alter(&$items){
  // make them all part of 'cp' menu
  foreach ( $items as $path => $item ) {
    if (strpos($path, 'cp') === 0) {
      if (! array_key_exists('menu_name', $item))
        $items[$path]['menu_name'] = 'cp';

        // @todo maybe provide our own permissoin instead ?
      if (! array_key_exists('access callback', $item))
        $items[$path]['access arguments'] = array(
            'access control panel'
        );
    }
  }
}

function cp_theme(){
  $theme = array();
  $theme['cp-toolbar'] = array(
      'render element' => 'cp_toolbar',
      'template' => 'cp-toolbar',
      'path' => drupal_get_path('module', 'cp') . '/theme'
  );

  return $theme;
}

function cp_permission(){
  return array(
      'access control panel' => array(
          'title' => t('Access Control Panel')
      )
  );
}

/**
 * cp/build/taxonomy callback
 */
function cp_taxonomy(){
  return 'cp/build/taxonomy';
}

/**
 * Block functions
 * Implementations of block hooks to define the navigation block
 */
function cp_block_info(){
  return array(
      'cp_subnav' => array(
          'info' => t('CP Subnavigation'),
          'region' => false,
          'cache' => DRUPAL_CACHE_GLOBAL,
          'pages' => 'cp/*'
      ),
      'cp_minimenu' => array(
          'info' => t('CP Mini-Menu'),
          'region' => false,
          'cache' => DRUPAL_CACHE_PER_ROLE
      )
  );
}

function cp_block_view($delta){
  switch ($delta) {
    case 'cp_subnav' :
      $links = menu_navigation_links('cp', 1);
      if (count($links))
        return array(
            'subject' => NULL,
            'content' => array(
                '#theme' => 'links',
                '#links' =>  $links,
            )
        );
      else {
        return array();
      }
    case 'cp_minimenu' :
      if (_cp_get_toolbar_setting() == CP_MENU_MINI && spaces_access_admin()) {
        return _cp_mini_menu();
      }
      else {
        return array();
      }
    case 'cp_fullmenu' :
      if (_cp_get_toolbar_setting() == CP_MENU_FULL && spaces_access_admin()) {
        return array(
            'subject' => NULL,
            'content' => _cp_full_menu()
        );
      }
      else {
        return array();
      }
  }
}

/**
 * Adds the CP menus to a page
 *
 * @todo Add seperate mini toolbar
 */
function cp_page_build(&$page){
  $menu = array();
  switch (_cp_get_toolbar_setting()) {
    case CP_MENU_FULL :
      // MINI Toolbar needed
      $menu = array(
          '#pre_render' => array(
              'cp_toolbar_pre_render'
          ),
          '#access' => spaces_access_admin_perms(array(
              'access control panel'
          ))
      );
      break;
    case CP_MENU_MINI :
  }
  $page['page_top']['cp_toolbar'] = $menu;

  cp_invoke('page_build', $page);
}

/**
 * Returns a constant reflecting the state of the CP menu
 */
function _cp_get_toolbar_setting(){

  // If the user is logged out or we are not in a space, turn the menu off
  if (! user_is_logged_in() || (module_exists('vsite') && ! spaces_get_space())) {
    return CP_MENU_OFF;
  }

  if (spaces_access_admin() && (context_isset('context', 'os_cp') || variable_get('cp_admin_menu', 0))) {
    return CP_MENU_FULL;
  }

  return CP_MENU_MINI;
}

// TODO: Rewrite to use Nice Menus
// TODO: Add all CP links (including children) to mini menu
// TODO: Add links for Add Content and Add Users below Content and Users
// TODO: Make sure everything is in right place when not admin 1
function _cp_full_menu(){
  $links = array();

  // Retrieve the admin menu from the database.
  // These are the 'Features/Appearance/Users/etc. buttons.
  $tree = menu_tree_all_data('cp');
  $links = menu_tree_output($tree);

  // Add user-specific links
  global $user;
  $user_links = array();
  $user_links[] = array(
      'title' => t('Hello <strong>!username</strong>', array(
          '!username' => $user->name
      )),
      'href' => 'user',
      'html' => TRUE
  );

  /*
   * $new_count = vsite_news_get_new_activity_count(); $user_links[] = array(
   * 'title' => $new_count, 'href' => 'cp/news', //@TODO: replace this with new
   * path 'attributes' => $new_count?array('class' => 'unread', 'title' =>
   * t('Unread Activity on your Site')):array('title' => t('All Activity on your
   * Site')), );
   */

  $user_links[] = array(
      'title' => t('Logout'),
      'href' => "logout",
      'query' => ! context_isset('context', 'cp-admin') ? array(
          'destination' => $_GET['q']
      ) : ''
  );
  if (context_isset('context', 'cp-admin')) {
    $user_links[] = array(
        'title' => t('Back to your site!'),
        'href' => "",
        'html' => TRUE
    );
  }

  return array(
      '#type' => 'container',
      'toolbar' => $links,
      'user' => array(
          '#theme' => 'links',
          '#links' => $user_links
      ),
      '#attributes' => array(
          'id' => array(
              'cp-menu-full'
          )
      )
  );
}

function _cp_mini_menu(){
  global $user;
  $user_links = array();
  /*
   * if (spaces_access_admin()) { $links = menu_build_tree('cp'); foreach
   * ($links as $l) { $link = array( 'data' => theme('menu_link',
   * array('element' => $l['link'])), 'children' => array(), ); if
   * (count($l['below'])) { foreach ($l['below'] as $child) {
   * $link['children'][] = theme('menu_link', array('element' => $child)); } }
   * $user_links[] = $link; } //$new_count =
   * vsite_news_get_new_activity_count(); //$user_links[] = l($new_count,
   * 'cp/news', $new_count?array('attributes' => array('class' => 'unread',
   * 'title' => t('New Activity on this Site'))):array('attributes' =>
   * array('title' => t('All Activity on this Site')))); } $user_links[] =
   * array( 'data' => t('Hello <strong>!username</strong>', array( '!username'
   * => $user->name )), 'children' => array( l('My Account', 'user'),
   * l('Logout', 'logout'), ) );
   */
  return theme('nice_menus', array(
      'id' => 'cp-minimenu',
      'menu_name' => 'cp',
      'direction' => 'down'
  ));
}

function cp_toolbar_pre_render($toolbar){
  $toolbar = array_merge($toolbar, cp_toolbar_view());
  return $toolbar;
}

/**
 * Builds the admin menu as a structured array ready for drupal_render().
 *
 * @return Array of links and settings relating to the admin menu.
 */
function cp_toolbar_view(){
  $build = toolbar_view();

  $build['#theme'] = 'cp-toolbar';
  $build['#attached']['css'] = array(
      drupal_get_path('module', 'cp') . '/theme/cp-toolbar.css'
  );
  $build['toolbar_menu']['#links'] = toolbar_menu_navigation_links(cp_get_menu_tree());
  $build['toolbar_drawer'] = array();
  $build['toolbar_drawer_classes'] = '';
  unset($build['toolbar_toggle']);

  if ($GLOBALS['user']->uid == 1) {
    unset($build['toolbar_home']);
    unset($build['toolbar_user']);
  }

  return $build;
}

/**
 * Make a decision about the active theme
 */
function cp_custom_theme(){

  //Turn the CP theme on
  if (cp_use_cp_theme()) {
    return variable_get('os_cp_theme', 'cp');
  }
}

/**
 * Gets only the top level items below the 'admin' path.
 *
 * @return An array containing a menu tree of top level items below the 'admin'
 *         path.
 */
function cp_get_menu_tree(){
  $tree = array();
  $tree = menu_build_tree('cp', array(
      'min_depth' => 1,
      'max_depth' => 1
  ));

  return $tree;
}

/**
 * @function cp_use_cp_theme
 *
 * @return Bool indicating whether or not to use cp theme.
 */
function cp_use_cp_theme(){
  if ((arg(0) == 'cp') || (arg(0) == 'node' && arg(1) == 'add') || (arg(0) == 'node' && arg(2) == 'edit')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Provide a form-specific alteration instead of the global hook_form_alter().
 *
 * Alter the features form in the cp to remove un-needed componentes
 *
 * @param
 *          $form
 * @param
 *          $form_state
 * @param
 *          $form_id
 */
function cp_form_spaces_features_form_alter(&$form, &$form_state, $form_id){
  // Only make changes if we are in the Openscholar Admin section
  if (context_isset('context', 'os_cp')) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();

    $spaces_features = variable_get('spaces_features', array());

    foreach ( array_keys($form['spaces_features']) as $f_name ) {
      if ($f_name[0] == '#') continue;

      // is this feature customizable ?
      // by convenction feature settings form is at features/feature_name
      $item = menu_get_item('features/' . $f_name);

      $is_enabled = $spaces_features[$f_name];
      // if the href of this items is just 'features' (i.e. parent), that path does not exist
      // and so no settings exists for this feature
      if ($item && $item['href'] != 'features' && $item['access'] && $is_enabled) {
      	$class = (isset($_GET['open_feature_settings']) && $_GET['open_feature_settings'] == $f_name)?"modal_click_onload":"";

        $link = ctools_modal_text_button('customize', 'cp/build/features/nojs/' . $f_name, 'customize ' . $f_name, $class); //, 'ctools-modal-openscholar-style-default');
        $form['settings'][$f_name] = array(
          '#type' => 'markup',
          '#markup' => $link
        );
      }

    }

    if (isset($form['site_frontpage'])) {
      // Only allow users with administer spaces permission to change the site
      // path
      $form['site_frontpage']['#access'] = user_access('administer spaces');
      $form['site_frontpage_path']['#access'] = user_access('administer spaces');
    }

    if (module_exists('vsite') && ($vsite = spaces_get_space())) {
      $form['actions']['space_overrides'] = array(
          '#markup' => l('overrides', 'node/'.$vsite->id.'/features/overrides'),
          '#weight' => 100,
          '#access' => user_access('administer spaces'),
      );
    }
  }
}