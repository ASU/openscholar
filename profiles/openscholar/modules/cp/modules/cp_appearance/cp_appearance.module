<?php 

/**
 * @file cp_appearance.module
 * 
 * Provides and handles form for cp/appearance
 */

/**
 * implements hook_menu
 */
function cp_appearance_menu() {
  $items = array();
  $items['cp/appearance'] = array(
    'title' => 'Appearance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_appearance_theme_picker_form'),
    'weight' => 20,
  	'menu_name' => 'cp',
  	'access arguments' => array('access content'),
  );

  $items['cp/appearance/theme'] = array(
    'title' => t('Theme'),
    'page callback' => 'drupal_get_form',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  	'page arguments' => array('cp_appearance_theme_picker_form'),
    'weight' => 20,
  	'menu_name' => 'cp',
  	'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme
 */
function cp_appearance_theme() {
  $theme = array();

  $theme['cp-appearance-theme-item'] = array(
    'variables' => array('info' => array(), 'sub_theme' => ''),
    'template' => 'cp-appearance-theme-item',
    'path' => drupal_get_path('module', 'cp_appearance').'/theme',
  );

  $theme['cp_appearance_theme_picker_form'] = array(
    'render element' => 'form',
    'function' => 'theme_cp_appearance_theme_picker_form',
  );  
  
  return $theme;
}

/**
 * Theme picker form
 */
function cp_appearance_theme_picker_form($form, &$state) {
  ctools_include('themes', 'os');
  $themes = os_get_themes();
  ksort($themes);
  $radio_options = array();
  drupal_add_js(drupal_get_path('module', 'cp_appearance') . '/theme/cp_appearance_theme_picker.js');
  

  $form = array(
    '#title' => t('Theme Picker'),
    '#theme' => array('cp_appearance_theme_picker_form'),
    '#submit' => array('cp_appearance_theme_picker_form_submit'),
  );
  
  foreach($themes as $theme) {
    $info = $theme->info;    
    $info['theme_name'] = $theme->name;
    $radio_options[$info['theme_name']] = $info['theme_name'];
    
    $theme_flavors = os_theme_get_flavors($theme->name);
    //$elem = 'vsite_design_'.$info['theme_name'] . '_flavor';
    $elem = 'cp_appearance_'.$info['theme_name'] . '_flavor';
    $default_flavor = '';
  
    //Get this theme's flavors and add them to the form
    $flavor_options = _cp_appearance_get_flavor_options($theme_flavors, $info, $default_flavor);
    if (count($flavor_options)) {
      $form[$elem] = array(
      	'#type' => 'select',
        '#title' => t('Flavor'),
        '#options' => $flavor_options,
        '#default_value' => variable_get($elem, $default_flavor),
      );

      //Screenshot callback
      if($info['screenshot'] && function_exists('ctools_ajax_associate_url_to_element')) {
        ctools_ajax_associate_url_to_element($form, $form[$elem], url('cp/settings/theme/swap_screenshot/'.$info['theme_name']),'ctools-use-ajax-onchange');
        // @TODO ajax menu http://api.drupal.org/api/drupal/includes%21ajax.inc/group/ajax/7
      }
    }
  }
    
  //Move default theme to the front of the array
  $theme = os_theme_get(); 
  if (isset($themes[$theme])){
	  $default_theme = $themes[$theme];
	  unset($themes[$theme]);
	  $themes = array_merge(array($theme => $default_theme),$themes);  
  }

  //Add themes to form
  $form['cp_appearance_theme'] = array(
    '#enabled_themes' => $themes,
    '#type' => 'radios',
  	'#options' => $radio_options,
  	'#default_value' => $theme,
  	'#tree' => TRUE
  );

  $form = system_settings_form($form);
  $form['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset to defaults'),
  );
  
  return $form;
}

/**
 * cp_appearance_theme_picker_form submit handler
 * 
 * Sets selected theme or resets to preset
 */
function cp_appearance_theme_picker_form_submit(&$form, &$form_state) {
  ctools_include('themes', 'os');
	$op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';
	
	if ($op != t('Reset to defaults')) {
	  os_theme_set($form_state['values']['cp_appearance_theme']);
	} else {
	  os_theme_del();
	}
}

/**
 * @function _cp_appearance_get_flavor_options
 * 
 * Helper function for processing all the flavors a theme has.
 * @param array $theme_flavors 
 *  	List of flavors used by this theme
 * @param array $info
 *  	Theme info
 * @param &string $default_flavor
 * 		Flavor to default to
 * 
 * @return array
 */
function _cp_appearance_get_flavor_options($theme_flavors, $info, &$default_flavor) {
  if (count($theme_flavors)) {
    $options = array(
    	'default' => ($info['flavor_name']) ? $info['flavor_name'] : t('Default ') . t('(Default)'),
    );
    
    foreach ($theme_flavors as $key => $flavor) {
      if (isset($flavor['flavor_name'])) {
        $options[$key] = $flavor['flavor_name'];
        $default_flavor = $key;
      } else {
        $options[$key] = $flavor['name'];
      }
    }
  }
  
  return $options;
}

/**
 * Themes the theme_picker form
 */
function theme_cp_appearance_theme_picker_form($variables) {
  $form = $variables['form']; //not sure why it isn't just passing me form.  @TODO debug
  $output = drupal_render($form['cp_appearance_theme']);
  $items = array();  

  foreach ($form['cp_appearance_theme']['#enabled_themes'] as $o_theme){
		$sub_theme = '';
		$a_info = array_merge((array)$o_theme->info, array('theme_name'=>$o_theme->name));

		//flavor screenshots
		$key = 'cp_appearance_' . $o_theme->name . '_flavor';
		if (array_key_exists($key, $form)){
			$sub_theme =  drupal_render($form[$key]);

			if ($flavor = $form[$key]['#default_value']){
				$flavors = os_theme_get_flavors(); 

				if (array_key_exists($flavor, $flavors) && array_key_exists('screenshot',$flavors[$flavor]) && $flavors[$flavor]['module'] == $o_theme->name){
				  $a_info['screenshot'] = $flavors[$flavor]['path'] . '/' . $flavors[$flavor]['screenshot'];
			  }
			}
		}

		//list of screenshots for each theme
		$items[] = array(
  		'class' => array(
  			'item-theme-picker', 
		    ($o_theme->name == $form['cp_appearance_theme']['#default_value']) ? 'current' : ''  
		  ),
			'id' => 'maintheme-'.str_replace('_','-',$o_theme->name),
		  'data' => theme('cp-appearance-theme-item', array('info'=>$a_info, 'sub_theme'=>$sub_theme)), 
    );
	}
	
	$output .= theme_item_list(array('items'=>$items, 'type'=>'ul', 'title'=>NULL, 'attributes'=>array('class' => 'theme-picker')));
	unset($form['#theme']); //not sure how previous version got away without this...
	$output .= drupal_render($form);
  
	return $output;
}

/**
 * Inform CTools that the flavor plugin can be loaded from themes and that
 * plugin implementors should use inf files instead of inc files (to keep PHP code from getting executed)
 */
function cp_appearance_ctools_plugin_type() {
  return array('flavor' => array(  
    'load themes' => true,
    'info file' => true,  //info file implies .info, rendering extension useless.  omitting it requires a hook. 
    'extension' => 'flav',
    'module' => 'os',
  ));
}

/**
 * implemenets hook_preprocess
 * 
 * Includes flavor css
 **/
function cp_appearance_preprocess(&$vars, $hook) {
  if ($hook == 'page') {
    ctools_include('themes', 'os');
    $flavor = current(os_theme_get_flavor());
    
    foreach ($flavor['css'] as $css) {
      drupal_add_css($flavor['path'] . '/' . $css, array('type'=>'file'));
    }

    foreach ($flavor['conditional-css'] as $cond => $css) {
      //will this be supported?  
      //http://drupal.org/node/522006
    }

  }
}
