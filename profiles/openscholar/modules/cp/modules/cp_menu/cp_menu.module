<?php

function cp_menu_menu() {
  $items = array();

  // Menu Wizard
  $items['cp_menu/%ctools_js'] = array(
    'title' => 'Menu',
    'page callback' => 'cp_menu_page',
    'page arguments' => array(2),
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
    'file' => 'cp_menu.wizard.inc',
  );

 //$items['cp/build/%/edit'] =
  $items['cp/build/%/edit/%ctools_js'] = array(
    'title' => 'Edit Link',
    'page callback' => 'cp_menu_edit_link',
    'page arguments' => array(2, 4),
    'access callback' => 'spaces_access_admin',
    'type' => MENU_CALLBACK,
  );

  $items['cp/build/menu'] =
  $items['cp/build/menu/%'] = array(
    'title' => 'Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_menu_build_form', 3),
    'access callback' => 'spaces_access_admin',
    'type' => MENU_LOCAL_TASK,
    'file' => 'cp_menu.form.inc',
  );

  return $items;
}

function cp_menu_theme() {
  $items = array();

  $items['cp_menu_table'] = array(
    'render element' => 'table',
    'file' => 'cp_menu.form.inc',
  );

  return $items;
}

//save new nodes to menus using os api instead of core
function cp_menu_node_insert($node) {
  if ($node->os_menu['enabled']) {
    $link = $node->os_menu;
    $options = (isset($link->options)) ? $link->options : array();

    $attributes = array('description'=>'title');
    foreach ($attributes as $delta => $attr) {
      if (isset($link[$delta])) {
        $options['attributes'][$attr] = check_plain($link[$delta]);
      }
    }

    if ($link['new_window']) {
      $options['attributes']['target'] = '_blank';
    }

    $mlid = cp_menu_link_save('node/'.$node->nid, $link['parent'], $link['link_title'], $options);

  }
}

//delete old links, insert new ones.
function cp_menu_node_update($node) {
  if (!$node->os_menu['enabled'] || isset($node->os_menu['delete'])) {
    ctools_include('menu', 'os');
    if ($link = os_menu_load_link_path('node/' . $node->nid)) {
      os_delete_menu_link($link['menu_name'], $link['mlid']);
    }
  } elseif ($node->os_menu['enabled']) {
    cp_menu_node_insert($node);
  }
}

//delete menu links when their node is deleted
function cp_menu_node_delete($node) {
  if ($link = os_menu_load_link_path('node/' . $node->nid)) {
    os_delete_menu_link($link['menu_name'], $link['mlid']);
  }
}

//wrapper for os_menu_link_save
function cp_menu_link_save($link_path, $menu_name, $link_title, $options = array()) {
  ctools_include('menu', 'os');
  $item = compact('link_path', 'menu_name', 'link_title', 'options');
  return os_menu_link_save($item);
}



/**
 * @function cp_form_node_form_alter
 * Implements hook_BASE_ID_form_alter().
 *
 * Prepopulates node/add/* with menu link data when a new node is created for the link.
 * Moves menu to os_menu for later processing during node_insert (is this really necessary?  shouldn't it happen elsewhere?)
 */
function cp_menu_form_node_form_alter(&$form, &$form_state, $form_id) {
  ctools_include('menu', 'os');

  //add link to existing node's form
  if (isset($form['#node']) && isset($form['#node']->nid)) {
    $link = os_menu_load_link_path('node/' . $form['#node']->nid);
  }

  //replace old forms
  $form['os_menu'] = $form['menu'];
  unset($form['menu']);

  $form['os_menu']['link']['weight']['#type'] = 'value';
  $form['os_menu']['link']['#states']['invisible'] = array('input[name="os_menu[enabled]"]' => array('checked' => FALSE));
  $form['os_menu']['link']['parent'] = array('#title' => t('Which Menu'),
                                             '#options' => os_get_menus(),
                                             '#default_value' => (isset($link['menu_name'])) ? $link['menu_name'] : 'primary-menu',
                                             ) + $form['os_menu']['link']['parent'];

  $parents = array_diff($form['os_menu']['link']['#parents'], array('menu'));
  $form['os_menu']['link']['#parents'] = $parents + array('os_menu');
  $form['os_menu']['#attached'] = array('js' => array(drupal_get_path('module', 'cp_menu') . '/cp_menu.js'));

  $form['os_menu']['link']['new_window'] = array(
    '#type' => 'checkbox',
    '#title' => t('Open Link in New Window'),
    '#default_value' => 0,
  );
  
  $form['os_menu']['#validate'][] = 'menu_edit_item_validate';

  //update the defaults to include $links
  $form['os_menu']['enabled']['#default_value'] = isset($link);
  $form['os_menu']['link']['link_title']['#default_value'] = (isset($link['link_title'])) ? $link['link_title'] : '';
  $form['os_menu']['link']['description']['#default_value'] =
    (isset($link['options']['attributes']['title'])) ? $link['options']['attributes']['title'] : '';
  $form['os_menu']['link']['new_window']['#default_value'] = (isset($link['options']['attributes']['target']) && $link['options']['attributes']['target'] == '_blank');

  //menu wizard - insert settings from wizard
  $cache = cp_menu_cache_get('cp_menu');
  if (count($cache) && strpos($_SERVER['HTTP_REFERER'], 'cp_menu')) { //make sure you're coming from cp/menu page.  otherwise abandoned but not cleared form could hijack node/add
    $title = check_plain($cache['title']);
    $form['title']['#default_value'] = $title;

    $menu = (isset($cache['menu'])) ? $cache['menu'] : 'primary-menu';
    $form['os_menu']['enabled']['#default_value'] = 1;
    $form['os_menu']['link']['parent']['#default_value']; $menu . ':0'; //position shouldn't matter since we're overriding it later anyway
    $form['os_menu']['link']['link_title']['#default_value'] = $title;
    $form['os_menu']['link']['description']['#default_value'] = check_plain($cache['tooltip']);

    if ($cache['new_window']) {
      $form['os_menu']['link']['new_window']['#default_value'] = 1;
    }
  }

  cp_menu_cache_clear('cp_menu');
}

/**
 * implementation of hook_node_submit
 *
 * checks if link has been updated.  flags link for deletion.
 */
function cp_menu_node_submit($node, $form, &$state) {
  foreach(array('link_title','description','parent','new_window') as $delta) {
    if ($state['values']['os_menu'][$delta] != $form['os_menu']['link'][$delta]['#default_value']) {
      $node->os_menu['delete'] = TRUE;
      return;
    }
  }

  if ((bool)$state['values']['os_menu']['enabled'] != (bool)$form['os_menu']['enabled']['#default_value']) {
    $node->os_menu['delete'] = TRUE;
  }
}

function cp_menu_edit_link($link, $js) {
  ctools_include('menu', 'os');
  $link = os_menu_link_load($link);
  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
    $form_state = array(
      'title' => t('Edit Link'),
      'ajax' => $js,
      'build_info' => array(
        'args' => array($link),
      ),
    );
    $output = ctools_modal_form_wrapper('cp_menu_edit_link_form', $form_state);
    // There are some possible states after calling the form wrapper:
    // 1) We are not using $js and the form has been executed.
    // 2) We are using $js and the form was successfully submitted and
    //    we need to dismiss the modal.
    // Most other states are handled automatically unless you set flags in
    // $form_state to avoid handling them, so we only deal with those two
    // states.
    if ($form_state['executed'] && $js) {
      $commands = array();
      $commands[] = ctools_modal_command_dismiss(t('Link Saved'));
      // In typical usage you will do something else here, such as update a
      // div with HTML or redirect the page based upon the results of the modal
      // form.
      print ajax_render($commands);
      exit;
    }

    // Otherwise, just return the output.
    print ajax_render($output);
    exit;
  }
  else {
    return drupal_get_form('cp_menu_edit_link_form', $link);
  }
}

function cp_menu_edit_link_form($form, $form_state, $link) {
  $form_state['title'] = t('Title');

  $form['#link'] = $link;

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#description' => t('Name your link.'),
    '#default_value' => $link['link_title'],
  );

  $form['new_window'] = array(
    '#type' => 'checkbox',
    '#title' => t('New Window'),
    '#description' => t('Open link in new tab or window'),
    '#default_value' => isset($link['options']['attributes']['target']),
  );

  $form['tooltip'] = array(
    '#type' => 'textfield',
    '#title' => t('Tooltip'),
    '#description' => t('Text displayed when mouse hovers over link'),
    '#default_value' => $link['options']['attributes']['title'],
  );

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
    'delete' => array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    ),
  );

  $form['#validate'] = array('cp_menu_edit_link_form_validate');
  $form['#submit'] = array('cp_menu_edit_link_form_submit');

  return $form;
}

function cp_menu_edit_link_form_validate($form, &$form_state) {
  if ($form_state['values']['op'] == t('Save')) {
    if (empty($form_state['values']['title'])) {
      form_set_error('title', t('Link must have a title.'));
    }
  }
}

function cp_menu_edit_link_form_submit($form, $form_state) {
  ctools_include('menu', 'os');
  $link = $form['#link'];

  if ($form_state['values']['op'] == t('Save')) {
    $link['link_title'] = $form_state['values']['title'];
    $link['options']['attributes']['title'] = $form_state['values']['tooltip'];
    if ($form_state['values']['new_window']) {
      $link['options']['attributes']['target'] = '_blank';
    }
    else {
      unset($link['options']['attributes']['target']);
    }

    os_menu_link_save($link);
  }
  elseif ($form_state['values']['op'] == t('Delete')) {
    os_delete_menu_link($link['menu_name'], $link['mlid']);
  }
}
