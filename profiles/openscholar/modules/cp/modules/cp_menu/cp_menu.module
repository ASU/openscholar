<?php

function cp_menu_menu() {
  $items = array();

  // Menu Wizard
  $items['cp_menu/%ctools_js'] = array(
    'title' => 'Menu',
    'page callback' => 'cp_menu_page',
    'page arguments' => array(2),
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  );

  $items['cp/build/menu'] =
  $items['cp/build/menu/%'] = array(
    'title' => 'Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cp_menu_build_form'),
    'access callback' => 'spaces_access_admin',
    'type' => MENU_LOCAL_TASK,
    'file' => 'cp_menu.form.inc',
  );

  return $items;
}

function cp_menu_theme() {
  $items = array();

  $items['cp_menu_table'] = array(
    'render element' => array('table' => array()),
    'file' => 'cp_menu.form.inc',
  );

  return $items;
}

/**
 * Multi-step form wizard for adding links to menu.
 * @param unknown_type $js
 * @param unknown_type $step
 */
function cp_menu_page($js = NULL, $step = NULL) {
  //can we collect the original menu?  should that be part of the menu link so the result can be added back in?

  //get cached results
  $object_id = 'cp_menu';
  if (empty($step)) {
    $step = 'type';
    cp_menu_cache_clear($object_id);
  }
  $object = cp_menu_cache_get($object_id);

  //check if step is a menu?  if so, stash it and clear it.
  ctools_include('menu','os');
  if (in_array($step, array_flip(os_get_menus()))) {
    $object['menu'] = $step;
    $step = 'type';
  }

  //forge a form state
  $form_state = array(
    'ajax' => $js,
    'object_id' => $object_id,
    'object' => &$object,
  );

  //prep multistep form info
  $form_info = array(
    'id' => 'cp_menu_form',
    'path' => 'cp_menu/' . ($js ? 'ajax' : 'nojs') . '/%step',
    'show trail' => FALSE,
    'show back' => TRUE,
    'show cancel' => TRUE,
    'next callback' => 'cp_menu_wizard_next',
    'finish callback' => 'cp_menu_wizard_finish',
    'cancel callback' => 'cp_menu_wizard_cancel',

    //'order' => array('type' => 'Type of Link'), //is order necessary?  how to remove
    'forms' => array(
      'type' => array(
      	'form id' => 'cp_menu_type',
        'title'   => t('Link Type'),
      ),
    ),
  );

  //add type dependent pages based on type form's results
    if (isset($_POST['type'])) {
      $type = $_POST['type'];
      $object['type'] = $type;
      cp_menu_cache_set($object_id, $object);
    } elseif (isset($object['type'])) {
      $type = $object['type'];
    } else {
      $type = NULL;
    }



  if ($type == 'list') {
    $form_info['forms']['list_type'] = array('form id' => 'cp_menu_list_type', 'title'=>t('Type of List'));

    $list_type = (isset($object['list_type'])) ? $object['list_type'] : $_POST['list_type'];
    if ($list_type == 'taxonomy') {
      $form_info['forms']['term'] = array('form id' => 'cp_menu_list_term', 'title'=>t('Taxonomy Terms'));
    } elseif ($list_type == 'publications') {
      $form_info; //pubs.
    }
  }

  //add final page after type sensitive pages have been included
  $form_info['forms']['title'] = array('form id' => 'cp_menu_title', 'title'=>t('Link Title'));

  //build and render the form
  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  return drupal_render($form);
}


/**
 * @function cp_menu_type
 *
 * Multistep form page for collecting the type of a link where type is page, url, or list.
 */
function cp_menu_type($form, &$formstate) {
  $form_state['title'] = t('Link Type');

  $form['type'] = array(
    '#type' => 'radios',
    '#options' => array('page'=>'Page', 'url'=>'URL'),//, 'list'=>'List'),
    '#description' => t('Type of content to link to.'),
  );

  return $form;
}

/**
 * @function cp_menu_title
 *
 * Multistep form page for setting the title and advanced options of a link.
 */
function cp_menu_title($form, &$form_state) {
  $form_state['title'] = t('Title');

  //can this be prepopulated if we're coming from an existing node?
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#description' => t('Name your link.'),
  	'#required' => TRUE,
  );

  //add type dependent fields
  switch($form_state['object']['type']) {
    case 'url':
      $form['url'] = array(
        '#type' => 'textfield',
        '#title' => t('URL'),
        '#required' => TRUE,
      );
      break;

    case 'page':
      $form['new_or_select'] = array(
        '#type' => 'radios',
        '#options' => array('new'=>t('New Page'), 'select'=>t('Choose Existing')),
        '#description' => t('Type of content to link to.'),
      );

      $form['node'] = array(
        '#type' => 'textfield',
        '#title' => t('Page'),
        '#autocomplete_path' => 'ctools/autocomplete/node', //does not limit by vsite or user.  waiting for d7's version of vsite_node_autocomplete
        '#description' => t('Select an existing page.'),
        '#states' => array(
          'visible' => array(
            ':input[name="new_or_select"]' => array('value' => 'select'),
          ),
        ),
      );

      //could collapse previous into this and have it be choose existing/new pub/new page/new etc, with the node autocomplete only showing up on choose existing.
      $bundles = os_get_bundles();
      $form['new_node_type'] = array(
        '#type' => 'select',
        '#title' => t('Create new'),
        '#description' => t('Create a new page.'),
        '#options' => os_get_bundles(),
        '#states' => array(
          'visible' => array(
            ':input[name="new_or_select"]' => array('value' => 'new'),
          ),
        ),
      );

      break;
  }

/*  if ($form_state['object']['type'] == 'page') {
    $nid = (int)array_pop(explode(' ', $form_state['object']['node']));
    if (($node = node_load($nid)) != FALSE) {
      $form['title']['#default_value'] = $node->title;
    }
  }
  */
  //should we support other attributes here as well?  still undecided if new window should exist
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Options'),
    '#collapsed' => TRUE,
  	'#collapsible' => TRUE,

    'new_window' => array(
      '#type' => 'checkbox',
      '#title' => t('New Window'),
      '#description' => t('Open link in new tab or window'),
      '#default' => FALSE,
    ),

    'tooltip' => array(
      '#type' => 'textfield',
      '#title' => t('Tooltip'),
      '#description' => t('Text displayed when mouse hovers over link'),
    )
  );

  return $form;
}

/**
 * @function cp_menu_selectpage
 *
 * Multistep form page for choosing an existing node or creating a new one.
 */
/*function cp_menu_selectpage($form, &$formstate) {
  $formstate['title'] = t('Select or Create a Page');

  $form['node'] = array(
    '#type' => 'textfield',
    '#title' => t('Page'),
    '#autocomplete_path' => 'ctools/autocomplete/node', //does not limit by vsite or user.  waiting for d7's version of vsite_node_autocomplete
    '#description' => t('Select an existing page or !click to create a new one.', array('!click' => l(t('click here'), 'node/add'))), //overlay?
  );

  return $form;
}
*/
/**
 * @function cp_menu_url
 *
 * Multistep form page for setting a URL.
 */
/*function cp_menu_url($form, &$formstate) {
  $formstate['title'] = t('URL');

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#required' => TRUE,
  );

  return $form;
}
*/
/**
 * @function cp_menu_url_validate
 *
 * Validation for cp_menu_url.  Checks that URl exists.
 */
/*function cp_menu_url_validate(&$form, &$state) {
  $url = check_url($state['values']['url']);

  if (url_is_external($url)) {
    $header = get_headers($url);
    $http = explode(' ', $header[0]);
    $http_code = $http[1];

    if ($http_code >= 400) {
      form_set_error('url', t('URL Returned Error: %error', array('%error' => $header[0])));
    }
  } elseif (!menu_get_item($url)) {
      form_set_error('url', t('Path does not exist'));
  }
}
*/
/**
 * @function cp_menu_list_type
 *
 * Multistep form page for gathering further information about the type of list to link to.
 */
function cp_menu_list_type($form, &$formstate) {
  $form_state['title'] = t('Type of List');

  $form['list_type'] = array(
    '#title' => t('Type of List'),
    '#type' => 'radios',
    '#options' => array('publications'=>'Publications', 'taxonomy'=>'Taxonomy'),
    '#description' => t('Type of content to link to.'),
    '#required' => TRUE,
  );

  //are we listing content of a type or grouping it by that type?

  $form['publications_type'] = array(
    '#type' => 'radios',
    '#title' => 'Publications by ...',
    '#options' => array('year'=>'Year', 'type'=>'Type', 'co'=>'Co-author'),
    '#states' => array(
      'visible' => array(
        ':input[name="list_type"]' => array('value' => 'publications'),
      ),
    )
  );

  //is there a vsite aware version of this?
  $options = array();
  foreach (taxonomy_get_vocabularies() as $vid => $vocab) {
    $options[$vocab->vid] = $vocab->name;
  }

  if (count($options)) {
    $form['vocabulary'] = array(
      '#type' => 'radios',
      '#title' => 'Vocabulary',
      '#options' => $options,
      '#states' => array(
        'visible' => array(
          ':input[name="list_type"]' => array('value' => 'taxonomy'),
        ),
      )
    );
  } else {
    $form['taxonomy_not_found'] = array(
      '#type' => 'item',
      '#title' => 'No vocabularies found.  Please create a vocabulary or choose another type of list.',
      '#states' => array(
        'visible' => array(
          ':input[name="list_type"]' => array('value' => 'taxonomy'),
        ),
      )
    );
  }

  return $form;
}

/**
 * @function cp_menu_list_type_validate
 *
 * Validation for cp_menu_list_type.  Publication lists need a type (year, co-auth, etc) and taxonomy lists need a vocabulary.
 * FAPI #states weren't quite up to the task of imposing conditional requirements.
 */
function cp_menu_list_type_validate(&$form, &$formstate) {
  if ($formstate['values']['list_type'] == 'publications' && strlen($formstate['values']['publications_type']) == 0) {
    form_set_error('publications_type', t('Publication list selected, but missing publication type.'));
  }
  if ($formstate['values']['list_type'] == 'taxonomy' && strlen($formstate['values']['vocabulary']) == 0) {
    form_set_error('vocabulary', t('Taxonomy list selected, but missing vocabulary.'));
  }
}

/**
 * @function cp_menu_list_term
 *
 * Multistep form page for choosing the term to display in a vocabulary list.
 */
function cp_menu_list_term($form, &$formstate) {
  $vid = $formstate['object']['vocabulary'];
  $terms = taxonomy_get_tree($vid, 0);

  $options = array();
  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
  }

  $form['term'] = array(
    '#title' => t('Term'),
    '#type' => 'radios',
    '#options' => $options,
  );

  return $form;
}

/**
* CP menu cache storage
*/
function cp_menu_cache_set($id, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('cp_menu', $id, $object);
}

/**
* CP menu cache retrieval
*/
function cp_menu_cache_get($id) {
  ctools_include('object-cache');
  $object = ctools_object_cache_get('cp_menu', $id);
  return ($object) ? $object : array();
}

/**
* Clear the wizard cache.
*/
function cp_menu_cache_clear($id) {
  ctools_include('object-cache');
  ctools_object_cache_clear('cp_menu', $id);
}

/**
* Advance the cp menu wizard to the next page.  Concatenate cached and submitted values
*/
function cp_menu_wizard_next(&$form_state) {
  $form_state['object'] += $form_state['values'];
  cp_menu_cache_set($form_state['object_id'], $form_state['object']);
}

/**
* CP menu wizard cancelled.
*/
function cp_menu_wizard_cancel(&$form_state) {
  cp_menu_cache_clear($form_state['object_id']);
}

/**
* CP menu wizard has completed.  Add results to a menu.
*/
function cp_menu_wizard_finish(&$form_state) {
  $values = cp_menu_cache_get($form_state['object_id']) + $form_state['values'];

//  cp_menu_cache_clear($form_state['object_id']);

  //new node page
  if ($values['new_or_select'] == 'new') {
    cp_menu_cache_set($form_state['object_id'], $values);
    drupal_goto('node/add/' . $values['new_node_type']);
  }

  //Build the link from the collected data
  switch ($values['type']) {
    case 'url':
      $url = check_url($values['url']);
      break;

    case 'page':
      $nid = (int)array_pop(explode(' ', $values['node']));
      $url = 'node/'.$nid;
      break;

    case 'list':
      break;

    default:
      return;
  }

  $menu_name = 'primary-menu'; //or something

  $new_menu = array(
    'link_path' => $url,
    //'router_path' => 'node/%', // TODO where does this come from?
    'menu_name' => $menu_name,
    'link_title' => $values['title'],
    'module' => 'system',
    'has_children' => '0',
    'expanded' => '0',
    'weight' => '0', // TODO is there a way to add this in the form?  worth it?  maybe a slider?
    'hidden' => '0',
    'options' => array('attributes'=>array()),
  );

  if ($values['new_window']) {
    $new_menu['options']['attributes']['target'] = '_blank';
  }

  if ($values['tooltip']) {
    $new_menu['options']['attributes']['title'] = check_plain($values['tooltip']);
  }

  //then save to vsite or whole site
  ctools_include('menu','os');
  os_menu_link_save($new_menu);
  drupal_goto('cp/menu/js');
}


/**
 * @function cp_form_node_form_alter
 * Implements hook_BASE_ID_form_alter().
 *
 * Prepopulates node/add/* with menu link data when a new node is created for the link.
 */
function cp_form_node_form_alter(&$form, &$form_state, $form_id) {
  $cache = cp_menu_cache_get('cp_menu');
  if (count($cache) && strpos($_SERVER['HTTP_REFERER'], 'cp/menu')) { //make sure you're coming from cp/menu page.  otherwise abandoned but not cleared form could hijack node/add
    $title = check_plain($cache['title']); //primary-menu:0  wtf  value['menu'] => primary-menu
    $form['title']['#default_value'] = $title;

    $form['menu']['enabled']['#default_value'] = 1;
    $form['menu']['link']['parent']['#default_value'];//TODO
    $form['menu']['link']['link_title']['#default_value'] = $title;
    $form['menu']['link']['description']['#default_value'] = check_plain($cache['tooltip']);


  }

  //and clear the cache
}

