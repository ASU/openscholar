<?php
include_once ('os.features.inc');

/**
 * Implementation of hook menu
 */
function os_menu(){
  $items = array();

  $items['home'] = array(
      'type' => MENU_CALLBACK,
      'title' => '',
      'page callback' => 'os_frontpage',
      'file' => 'os.pages.inc',
      'access arguments' => array(
          'access content'
      ),
      'weight' => 0
  );

  // nodeautocomplete callback
  $items['os/node/autocomplete'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'os_node_autocomplete',
      'page callback' => 'os_node_autocomplete',
      'file' => 'os.autocomplete.inc',
      'access arguments' => array(
          'access content'
      ),
      'file path' => drupal_get_path('module', 'os') . '/'
  );
  
  $items['admin/config/openscholar'] = array(
    'title' => 'Openscholar',
    'description' => 'Administer OpenScholar specific settings.',
    'position' => 'left',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer content'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
 * Sets up menu entries for contextual links
 *
 * Requirements for contextual links:
 * - Link is a local task of a parent
 * - Link has the 'inline' context
 */
function os_menu_alter(&$menu){
  $types = os_get_bundles(true);
  foreach ( $types as $type => $title ) {
    $m = &$menu['node/add/' . $type];
    $m['type'] = MENU_LOCAL_TASK;
    $m['context'] = MENU_CONTEXT_INLINE;
  }
}

/**
 * @function os_get_bundles
 *
 * Return the avalible bundles based on the privacy
 * @param $privacy and array (or single value)
 * (0 -> disabled, 2 -> private, 1 -> public)
 * TRUE returns all
 * @param @space_type
 *
 * @return array array('bundle_id' => 'Bundle Name')
 */

function os_get_bundles($privacy = array(1), $space_type = 'og'){

  $ret_all = false;
  if (is_bool($privacy) && $privacy) {
    $ret_all = TRUE;
  }
  else if (! is_array($privacy)) {
    $privacy = array(
        $privacy
    );
  }
  $bundles = array();

  if ($ret_all || in_array(1, $privacy)) {
    $bundles['page'] = 'Page';
  }

  $features = spaces_features($space_type);
  $site_features = variable_get('spaces_features', array());

  foreach ( $features as $name => $feature ) {
    $info = $feature->info['features'];
    if (isset($info['node']) && ($ret_all || (isset($site_features[$name]) && in_array($site_features[$name], $privacy)))) {
      $bundles[$info['node'][0]] = $feature->info['name'];
    }
  }

  return $bundles;
}

/**
 * Implements hook_block_info().
 */
function os_block_info(){
  ctools_include('menu', 'os');

  $blocks['powered-by'] = array(
      'info' => t('Powered by Openscholar'),
      'weight' => '10',
      'cache' => DRUPAL_CACHE_GLOBAL
  );
  // System-defined menu blocks.
  foreach ( os_get_menus() as $menu_name => $title ) {
    $blocks[$menu_name]['info'] = t($title);
    // Menu blocks can't be cached because each menu item can have
    // a custom access callback. menu.inc manages its own caching.
    $blocks[$menu_name]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generate a block with a promotional link to openscholar.harvard.edu and
 * all os menu blocks.
 */
function os_block_view($delta = ''){
  $block = array();
  switch ($delta) {
    case 'powered-by' :
      $block['subject'] = NULL;
      $block['content'] = theme('openscholar_powered_by');
      return $block;

    default:
      // All os menu blocks.
      ctools_include('menu', 'os');
      $os_menus = os_get_menus();
      if (isset($os_menus[$delta])) {
        $block['subject'] = t($os_menus[$delta]);
        $block['content'] = os_menu_tree($delta);
        return $block;
      }
      break;
  }
}

/**
 * Implements hook_block_view_alter
 *
 * Tells OS menu blocks to use nice menus theme.  This would happen in
 * os_block_view, but the region isn't available yet there.
 */
function os_block_view_alter(&$block, &$data) {
  ctools_include('menu', 'os');

  if (array_key_exists($data->delta, os_get_menus()) && count($block['content'])) {
    $block['content'] += array(
    	'#theme' => 'os_nice_menus',
    	'#menu_name' => $data->delta,
      '#region' => $data->region,
    );
  }
}

/**
 * Implements theme_HOOK
 *
 * Applies nice_menus themes to our menus.
 */
function theme_os_nice_menus($variables) {
  ctools_include('menu', 'os');
  ctools_include('layout', 'os');

  $variables += array(
    'direction' => _os_nice_menus_direction($variables['region']), //'down', //get from region
    'depth' => -1, //variable?
    'menu' => os_menu_tree_data($variables['menu_name']), //or just use this?
  );
  $block = theme('nice_menus', $variables); //has to be nice_menus.  the rest won't take a direction
  return $block['content'];
}

/**
 * @function _os_nice_menus_direction
 *
 * Given a menu returns the direction for menu tabs to use
 *
 * @param string $region
 * 	Region containing menu to expand
 *
 * @return string
 * 	'right' or 'down' value for direction parameter of theme_nice_menus
 */
function _os_nice_menus_direction($region) {
  $region_directions = array('sidebar_first' => 'right','sidebar_second' => 'left','footer' => 'up');

  //@TODO check Matt's layout variable to see if sidebar_first or _second is in another location

  return (isset($region_directions[$region])) ? $region_directions[$region] : 'down';
}

/**
 * Implements hook_os_widget
 *
 * Builds cp widgets for the menus
 */
function os_os2s_widget(){
  $blocks = array();
  ctools_include('menu', 'os');

  foreach ( os_get_menus() as $menu_name => $title ) {
    $blocks['menu-' . $menu_name] = array(
        'module' => 'menu',
        'info' => t($title),
        'delta' => $menu_name,
        // Menu blocks can't be cached because each menu item can have
        // a custom access callback. menu.inc manages its own caching.
        'cache' => DRUPAL_NO_CACHE
    );
  }

  return $blocks;
}

function os_os_widget_alter(&$widget){
  if ($widget['module'] == 'os') {
    $widget += array(
        'bid' => 'os-' . $widget['delta'],
        'tags' => array(
            'Other'
        ),
        'class' => array(
            'menu'
        )
    );
  }
  elseif ($widget['module'] == 'node') {
    $widget += array(
        'bid' => 'node-recent',
        'tags' => array(
            'Content'
        )
    );
  }
}

/**
 * Implements hook_theme().
 */
function os_theme(){
  return array(
    'openscholar_powered_by' => array(
      'variables' => array('elements' => array(),),
    ),
    'os_nice_menus' => array(
      'variables' => array('menu_name' => '', 'region' => ''),
    ),
  );
}

/**
 * Adds contextual links to the page's render array
 */
function os_page_build(&$page){
  if (context_isset('context', 'os_public')) {
    if (! isset($page['#contextual_links']) || ! is_array($page['#contextual_links'])) {
      $page['#contextual_links'] = array();
    }

    $page['#contextual_links']['os'] = array(
        'node/add',
        array()
    );
  }
}

/**
 * @function os_custom_theme
 *
 * implements hook_custom_theme
 * returns name of theme to use
 */
function os_custom_theme(){
  _os_purl_init();

  //cp
  if (module_exists('cp') && cp_use_cp_theme()) {
    return variable_get('os_cp_theme', 'cp');
  }

  //global or space
  if ($space = spaces_get_space()) {
    ctools_include('themes', 'os');
    $theme = os_theme_get();
    return $theme;
  }
}

/**
 * @function os_module_implements_alter
 *
 * Implements hook_module_implements_alter
 * Removes purl from hook_init's implementations queue since it was already run during custom_theme
 */
function os_module_implements_alter(&$implementations, $hook){
  if ($hook == 'init') {
    unset($implementations['purl']);
  }
}

/**
 * @function _os_purl_init()
 *
 * Calls purl_init.  This is used during hook_custom_theme, so that we can
 * get the space earlier.
 *
 * Following a cache clear, the spaces presets need rebuilding.  At some
 * point in this process, l() is called to put a link in the description
 * of a field in image.  If l() tries to theme the link it creates,
 * drupal_initialize_theme is run, defeating the purpose of hook_custom_theme.
 *
 * This function prevents l() from initalizing the theme by setting theme_link
 * to false, running purl_init, and then restoring theme_link to its original
 * value.
 *
 * This fixes the theme problem after a cache clear.  May have other unforseen
 * consequences.
 **/
function _os_purl_init() {
  //hack alert!
  global $conf;
  $theme_link = isset($conf['theme_link']) ? $conf['theme_link'] : NULL;
  $conf['theme_link'] = FALSE;

  purl_init();

  if (isset($theme_link)) {
    $conf['theme_link'] = $theme_link;
  } else {
    unset($conf['theme_link']);
  }
}

/**
 * Removes contextual links when we're in a Feature context
 */
function os_menu_contextual_links_alter(&$links, $router_item, $base_path){
  if ($base_path == 'node/add') {
    // unset links for disabled apps
    $types = os_get_bundles(0);

    foreach ( $types as $type => $title ) {
      unset($links['os-' . $type]);
    }

    // get the active contexts
    // if it's one the ones from an app, only display the node/add link for that app
    // e.g. if we're in the Announcements context, only display the link for Add New Announcements
    $active = context_active_contexts();

    $new_links = array();
    foreach ( $active as $a ) {
      if (isset($a->conditions['node']['values']) && $a->conditions['node']['options']['node_form'] == 0) {
        foreach ( $a->conditions['node']['values'] as $val ) {
          if (isset($links['os-' . $val])) {
            $new_links['os-' . $val] = $links['os-' . $val];
          }
        }
      }
    }
    if (! empty($new_links)) {
      $links = $new_links;
    }
  }
}

/**
 * Removes contextual links class from html.
 */
function os_preprocess_html(&$variables){
  $variables['classes_array'] = array_diff($variables['classes_array'], array(
      'contextual-links-region'
  ));
}

/**
 * Implements hook_ctools_plugin_type
 *
 * Inform CTools that the flavor plugin can be loaded from themes and that
 * plugin implementors should use .flav files instead of .info files
 */
function os_ctools_plugin_type(){
  return array(
    'flavor' => array(
      'load themes' => TRUE,
      'info file' => TRUE,
      'extension' => 'flav'
    )
  );
}

/**
 * implemenets hook_preprocess
 *
 * Includes flavor css
 **/
function os_init(){
  ctools_include('themes', 'os');
  if ($flavor = current(os_theme_get_flavor())) {

    if (isset($flavor['css'])) {
      foreach ($flavor['css'] as $css) {
        drupal_add_css($flavor['path'] . '/' . $css, array('type'=>'file', 'preprocess'=>FALSE));
      }
    }

    //conditional css provided by: conditional-stylesheets[if lte IE 7][all][]  = orange-ie.css
    if (isset($flavor['conditional-stylesheets'])) {
      foreach ($flavor['conditional-stylesheets'] as $cond => $media) {
        foreach ($media as $type => $files) {
          foreach ($files as $file) {
            $options = array(
            	'type' => 'file',
            	'preprocess' => FALSE,
              'media' => $type,
              'browsers' => _os_conditional_css_browsers($cond),
            );
            drupal_add_css($flavor['path'] . '/' . $file, $options);
          }
        }
        //will this be supported?
        //http://drupal.org/node/522006
      }
    }
  }

  //Execute the "In a OS Site" context condition
  if ($plugin = context_get_plugin('condition', 'os_site')) {
    $plugin->execute();
  }
}

/**
 * Implementation of hook os_layout_contexts
 *
 * @return array
 * Avalible contexts with thier descriptions
 */
function os_os_layout_contexts(){

  $provided_contexts = &drupal_static(__FUNCTION__);

  if(count($provided_contexts)){
    return $provided_contexts;
  }//Static cache of avalible contexts

  //Contexts provided by this module
  $provided_contexts = array(
      'os_public'=> 'All Sections',
      'os_front' => 'Front Page',
  );

  //Contexts provided by features
  $features = spaces_features('og');
  foreach ( $features as $name => $feature ) {
    $info = $feature->info['features'];
    if (isset($info['context'])) {
      foreach ($info['context'] as $ctx) {
      	$provided_contexts[$ctx] = $feature->info['name'];
      }
    }
  }

  return $provided_contexts;
}

/**
 * Returns HTML for the Powered by Openscholar text.
 *
 * @ingroup themeable
 */
function theme_openscholar_powered_by(){
  return '<span>' . t('Powered by <a href="@poweredby">OpenScholar</a>', array(
      '@poweredby' => 'http://openscholar.harvard.edu'
  )) . '</span>';
}

/**
 * Implementation of hook_context_plugins().
 *
 * This is a ctools plugins hook.
 */
function os_context_plugins(){
  $plugins = array();

  $plugins['os_context_condition_os_site'] = array(
      'handler' => array(
          'path' => drupal_get_path('module', 'os') . '/plugins',
          'file' => 'os_context_condition_os_site.inc',
          'class' => 'os_context_condition_os_site',
          'parent' => 'context_condition'
      )
  );

  $plugins['os_context_reaction_block'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'os') . '/plugins',
      'file' => 'os_context_reaction_block.inc',
      'class' => 'os_context_reaction_block',
      'parent' => 'context_reaction_block',
    ),
  );

  return $plugins;
}

/**
 * Implementation of hook_context_registry().
 */
function os_context_registry(){
  $registry = array();

  $registry['conditions'] = array(
    'os_site' => array(
      'title' => t('OS Site context'),
      'description' => t('Should this context be set in a vsite? If <strong>false</strong>, this context will be active outside a "OS Site".'),
      'plugin' => 'os_context_condition_os_site',
    ),
  );

  return $registry;
}

/**
 * Implementation of hook_context_registry_alter().
 */
function os_context_registry_alter(&$registry){
  //Alter the registry to use OpenScholar's block reaction plugin which extends the standard
  if(isset($registry['reactions']['block'])){
    $registry['reactions']['block']['plugin'] = 'os_context_reaction_block';
  }
}

/**
 * @function _os_conditional_css_browsers($cond)
 *
 * Helper function for adding conditional css.  Takes a browser css condition,
 * returns array to pass to drupal_add_css's $options['browser']
 * http://api.drupal.org/api/drupal/includes%21common.inc/function/drupal_pre_render_conditional_comments/7
 *
 * @param string $cond // if IE lt 6
 * @return array
 */
function _os_conditional_css_browsers($cond) {
  $IE = FALSE;
  $cond = str_replace('if ', '', $cond);
  if (strpos($cond, 'IE')) {
    $IE = $cond;
  }

  return array('IE'=>$cond, '!IE'=>FALSE);
}

/**
 * Adds all our regions to every subtheme of os_basetheme
 */
function os_system_info_alter(&$info, $file, $type) {
  if ($type != 'theme') return;

  if (isset($info['base theme']) && $info['base theme'] == 'os_basetheme') {
    $info['regions'] += array(
      'header_top' => 'Header Top',
      'header_first' => 'Header Main',
      'header_second' => 'Header Left',
      'header_third' => 'Header Right',
      'header_bottom' => 'Header Bottom',
      'content_top' => 'Content Top',
      'content_first' => 'Content Left',
      'content_second' => 'Content Right',
      'content_bottom' => 'Content Bottom',
    );
  }
}