<?php
include_once ('os.features.inc');

/**
 * Implementation of hook menu
 */
function os_menu(){
  $items = array();

  $items['home'] = array(
      'type' => MENU_CALLBACK,
      'title' => '',
      'page callback' => 'os_frontpage',
      'file' => 'os.pages.inc',
      'access arguments' => array(
          'access content'
      ),
      'weight' => 0
  );

  // nodeautocomplete callback
  $items['os/node/autocomplete'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'os_node_autocomplete',
      'page callback' => 'os_node_autocomplete',
      'file' => 'os.autocomplete.inc',
      'access arguments' => array(
          'access content'
      ),
      'file path' => drupal_get_path('module', 'os') . '/'
  );

  return $items;
}

/**
 * Sets up menu entries for contextual links
 *
 * Requirements for contextual links:
 *  - Link is a local task of a parent
 *  - Link has the 'inline' context
 */
function os_menu_alter(&$menu) {
  $types = os_get_bundles(true);
  foreach ($types as $type => $title) {
    $m = &$menu['node/add/'.$type];
    $m['type'] = MENU_LOCAL_TASK;
    $m['context'] = MENU_CONTEXT_INLINE;
  }
}

/**
 * @function os_get_bundles
 *
 * Return the avalible bundles based on the privacy
 * @param $privacy and array (or single value)
 * (0 -> disabled, 2 -> private, 1 -> public)
 * TRUE returns all
 * @param @space_type
 *
 * @return array array('bundle_id' => 'Bundle Name')
 */

function os_get_bundles($privacy = array(1), $space_type = 'og') {
  $bundles = array('page'=>'Page');
  $ret_all = FALSE;

  $ret_all = false;
  if (is_bool($privacy) && $privacy) {
    $ret_all = TRUE;
  }
  else if (! is_array($privacy)) {
    $privacy = array(
        $privacy
    );
  }


  $features = spaces_features($space_type);
  $site_features = variable_get('spaces_features', array());

  foreach ( $features as $name => $feature ) {
    $info = $feature->info['features'];
    if (isset($info['node']) && ($ret_all || (isset($site_features[$name]) && in_array($site_features[$name], $privacy)))) {
      $bundles[ $info['node'][0] ] = $feature->info['name'];
    }
  }

  return $bundles;
}


/**
 * Implements hook_block_info().
 */
function os_block_info(){
  ctools_include('menu', 'os');

  $blocks['powered-by'] = array(
      'info' => t('Powered by Openscholar'),
      'weight' => '10',
      'cache' => DRUPAL_CACHE_GLOBAL
  );
  // System-defined menu blocks.
  foreach ( os_get_menus() as $menu_name => $title ) {
    $blocks[$menu_name]['info'] = t($title);
    // Menu blocks can't be cached because each menu item can have
    // a custom access callback. menu.inc manages its own caching.
    $blocks[$menu_name]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generate a block with a promotional link to openscholar.harvard.edu and
 * all os menu blocks.
 */
function os_block_view($delta = ''){
  $block = array();
  switch ($delta) {
    case 'powered-by' :
      $block['subject'] = NULL;
      $block['content'] = theme('openscholar_powered_by');
      return $block;
    default :
      // All os menu blocks.
      ctools_include('menu', 'os');
      $os_menus = os_get_menus();
      if (isset($os_menus[$delta])) {
        $block['subject'] = t($os_menus[$delta]);
        $block['content'] = os_menu_tree($delta);
        return $block;
      }
      break;
  }
}

/**
 * Implements hook_os_widget
 *
 * Builds cp widgets for the menus
 */
function os_os2s_widget() {
  $blocks = array();
  ctools_include('menu', 'os');

  foreach ( os_get_menus() as $menu_name => $title ) {
    $blocks['menu-'.$menu_name] = array(
      'module' => 'menu',
      'info' => t($title),
      'delta' => $menu_name,
      // Menu blocks can't be cached because each menu item can have
      // a custom access callback. menu.inc manages its own caching.
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

function os_os_widget_alter(&$widget) {
  if ($widget['module'] == 'os') {
    $widget += array(
      'bid' => 'os-'.$widget['delta'],
      'tags' => array('Other'),
      'class' => array('menu'),
    );
  }
  elseif ($widget['module'] == 'node') {
    $widget += array(
      'bid' => 'node-recent',
      'tags' => array('Content'),
    );
  }
}

/**
 * Implements hook_theme().
 */
function os_theme(){
  return array(
      'openscholar_powered_by' => array(
          'variables' => array(),
          'file' => 'includes/themes.inc'
      )
  );
}

/**
 * Adds contextual links to the page's render array
 */
function os_page_build(&$page) {
  $page['#contextual_links'] = array(
    'os' => array(
      'node/add',
      array(),
    )
  );
}

/**
 * Removes contextual links when we're in a Feature context
 */
function os_menu_contextual_links_alter(&$links, $router_item, $base_path) {
  if ($base_path == 'node/add') {
    // unset links for disabled apps
    $types = os_get_bundles(0);

    foreach ($types as $type => $title) {
      unset($links['os-'.$type]);
    }

    // get the active contexts
    // if it's one the ones from an app, only display the node/add link for that app
    // e.g. if we're in the Announcements context, only display the link for Add New Announcements
    $active = context_active_contexts();

    $new_links = array();
    foreach ($active as $a) {
      if (isset($a->conditions['node']['values']) && $a->conditions['node']['options']['node_form'] == 0) {
        $val = current($a->conditions['node']['values']);
        if (isset($links['os-'.$val])) {
          $new_links['os-'.$val] = $links['os-'.$val];
        }
      }
    }
    if (!empty($new_links)) {
      $links = $new_links;
    }
  }
}
