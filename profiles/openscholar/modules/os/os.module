<?php
include_once ('os.features.inc');

/**
 * Implementation of hook menu
 */
function os_menu(){
  $items = array();
  
  $items['home'] = array(
      'type' => MENU_CALLBACK,
      'title' => '',
      'page callback' => 'os_frontpage',
      'file' => 'os.pages.inc',
      'access arguments' => array(
          'access content'
      ),
      'weight' => 0
  );
  
  // nodeautocomplete callback
  $items['os/node/autocomplete'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'os_node_autocomplete',
      'page callback' => 'os_node_autocomplete',
      'file' => 'os.autocomplete.inc',
      'access arguments' => array(
          'access content'
      ),
      'file path' => drupal_get_path('module', 'os') . '/'
  );
  
  return $items;
}

/**
 * @function os_get_bundles
 *
 * Return the avalible bundles based on the privacy
 * @param $privacy and array (or single value)
 * (0 -> disabled, 2 -> private, 1 -> public)
 * TRUE returns all
 * @param @space_type
 *
 * @return array array('bundle_id' => 'Bundle Name')
 */

function os_get_bundles($privacy = array(1), $space_type = 'og') {
  $bundles = array('page'=>'Page');
  
  if (is_bool($privacy) && $privacy) {
    $ret_all = TRUE;
  }
  else if (! is_array($privacy)) {
    $privacy = array(
        $privacy
    );
  }
    
  
  $features = spaces_features($space_type);
  $site_features = variable_get('spaces_features', array());
  
  foreach ( $features as $name => $feature ) {
    $info = $feature->info['features'];
    if (isset($info['node']) && ($ret_all || in_array($site_features[$name], $privacy))) {
      $bundles[ $info['node'][0] ] = $feature->info['name'];
    }
  }
  
  return $bundles;
}

/**
 * Context Plugins
 */
function os_context_plugins(){
  $plugins = array();
  $plugins['os_context_reaction_feature'] = array(
      'handler' => array(
          'path' => drupal_get_path('module', 'os') . '/plugins',
          'file' => 'os_context_reaction_feature',
          'class' => 'os_context_reaction_feature',
          'parent' => 'context_reaction'
      )
  );
  return $plugins;
}

/**
 * Context registry.
 */
function os_context_registry(){
  $registry = array();
  $registry['reactions'] = array(
      'os_feature' => array(
          'title' => t('OpenScholar Feature'),
          'description' => t('Set the current Openscholar feature using context.'),
          'plugin' => 'os_context_reaction_feature'
      )
  );
  return $registry;
}

/**
 * Get current Feature
 * replaces "vsite_active_feature()"
 */
function os_active_feature(){
  if (! module_exists('context'))
    return false;
  
  static $once;
  if (! isset($once)) {
    $once = true;
    if ($plugin = context_get_plugin('reaction', 'os_feature')) {
      $plugin->execute();
    }
  }
  
  return context_get('os', 'feature');
}

////Implement hook_context_block_info_alter to modify the block list.
//function os_context_block_info_alter(&$block_info){
//	ctools_include('menu','os');
//	_os_menu_context_block_info_alter($block_info);
//
//}


/**
 * Implements hook_block_info().
 */
function os_block_info(){
  ctools_include('menu', 'os');
  
  $blocks['powered-by'] = array(
      'info' => t('Powered by Openscholar'),
      'weight' => '10',
      'cache' => DRUPAL_CACHE_GLOBAL
  );
  // System-defined menu blocks.
  foreach ( os_get_menus() as $menu_name => $title ) {
    $blocks[$menu_name]['info'] = t($title);
    // Menu blocks can't be cached because each menu item can have
    // a custom access callback. menu.inc manages its own caching.
    $blocks[$menu_name]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generate a block with a promotional link to openscholar.harvard.edu and
 * all os menu blocks.
 */
function os_block_view($delta = ''){
  $block = array();
  switch ($delta) {
    case 'powered-by' :
      $block['subject'] = NULL;
      $block['content'] = theme('openscholar_powered_by');
      return $block;
    default :
      // All os menu blocks.
      ctools_include('menu', 'os');
      $os_menus = os_get_menus();
      if (isset($os_menus[$delta])) {
        $block['subject'] = t($os_menus[$delta]);
        $block['content'] = os_menu_tree($delta);
        return $block;
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function os_theme(){
  return array(
      'openscholar_powered_by' => array(
          'variables' => array(),
          'file' => 'includes/themes.inc'
      )
  );
}