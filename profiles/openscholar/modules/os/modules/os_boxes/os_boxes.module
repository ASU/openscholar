<?php

include('os_boxes.plugins.inc');

/**
 * Implements hook_ctools_plugin_api().
 */
function os_boxes_ctools_plugin_api($module, $api) {
  if ($module == 'boxes' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_menu().
 */
function os_boxes_menu() {
  $items['os/boxes/%os_boxes'] =
  $items['os/boxes/%os_boxes/edit'] = array(
    'title' => 'Edit Widget',
    'page callback' => 'os_boxes_edit_widget',
    'page arguments' => array(2),
    'access callback' => 'boxes_access_admin',
    'type' => MENU_LOCAL_TASK,
    'file' => 'os_boxes.admin.inc',
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 1,
  );
  $items['os/boxes/%os_boxes/delete'] = array(
    'title' => 'Delete Widget',
    'page callback' => 'os_boxes_delete_widget',
    'page arguments' => array(2),
    'access callback' => 'boxes_access_admin',
    'type' => MENU_CALLBACK,
    'file' => 'os_boxes.admin.inc',
    'weight' => 2,
  );
  $items['os/boxes/%os_boxes/remove'] = array(
    'title' => 'Remove Widget',
    'page callback' => 'os_boxes_remove_widget',
    'page arguments' => array(2),
    'access callback' => 'boxes_access_admin',
    'type' => MENU_LOCAL_TASK,
    'file' => 'os_boxes.admin.inc',
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 3,
  );
  return $items;
}

/**
 * Implements hook_load().
 */
function os_boxes_load($key) {
  if ($box = boxes_box_load($key)) {
    // this is an instance;
    return $box;
  }
  if ($box = boxes_factory($key, array('delta' => os_boxes_create_delta()))) { // TODO: Build a real delta
    // this is a plugin, so create a new box
    return $box;
  }
  return false;
}

/**
 * Creates a delta from clues about the environment
 * It just needs to be unique
 */
function os_boxes_create_delta() {
  return time();  // TODO: Replace with real function
}

/**
 * Get all the boxes plugins or a plugin by name
 * @param $name
 * 		Name of the box
 */
function os_boxes_get_boxes_plugins($name = NULL){
  ctools_include('plugins');
  $boxes = ctools_get_plugins('boxes', 'plugins');
  drupal_alter('boxes_plugins', $boxes);

  if (isset($name)) {
    return isset($boxes[$name]) ? $boxes[$name] : FALSE;
  }

  return $boxes;
}

function os_boxes_os_widget($box = NULL) {
  if (isset($box)) {
    $boxes = array($box->delta => (object)$box);
    $return_single = true;
  }
  else {
    $boxes = boxes_box_load();
  }
  $widgets = array();
  foreach ($boxes as $delta => $box) {
    $bid = 'boxes-'.$delta;
    $widgets[$bid] = array(
      'module' => 'boxes',
      'delta' => $delta,
      'title' => $box->title,
      //'weight' => $box->weight,
      //'region' => $box->region,
      'info' => $box->description,
    );
  }

  if (isset($return_single)) {
    return current($widgets);
  }
  return $widgets;
}

/**
 * Implementation of hook os_widget_alter
 *
 * This function should add any parameters to the passed block that
 * will be needed in the admin user interfaces.  Including access params
 * config paths etc...
 *
 * @param $widget
 */
function os_boxes_os_widget_alter(&$widget) {
  if (isset($widget['module']) && $widget['module'] == 'boxes') {
    $box = boxes_box_load($widget['delta']);
    if (!$box) return;

    $plugin = os_boxes_get_boxes_plugins($box->plugin_key);
    if (!$plugin) return;

    $widget['info'] = $box->description;
    $widget['plugin'] = $box->plugin_key;
    $widget['class'] = $plugin['tags'];

    $widget['can_edit'] = true;  // all boxes should be editable. If they aren't, why are they a box
    $widget['path'] = 'os/boxes/'.$widget['delta'];

    // deletion is easier now.
    // if they can recreate the widget, we let them delete it
    // otherwise, no.
    if (isset($plugin['title'])) {
      $widget['can_delete'] = true;
    }
    else {
      $widget['can_delete'] = false;
    }
  }
}

function os_boxes_get_factories() {
  $plugins = os_boxes_get_boxes_plugins();
  $items = array();

  foreach ($plugins as $p => $info) {
    if (isset($info['title'])) {
      $items["boxes-boxes_add__$p"] = array(
        'module' => 'boxes',
        'delta' => "boxes_add__$p",
        'label' => $info['title'],
        'block_config_path' => "os/boxes/{$p}",
        'factory' => true,
      );

      if (isset($info['factory_path'])) {
        $items["boxes-boxes_add__$p"]['block_config_path'] = $info['factory_path']."/modal/box/$p";
      }
    }
  }

  return $items;
}

function os_boxes_get_tags() {
  $plugins = os_boxes_get_boxes_plugins();
  $items = array();

  foreach ($plugins as $p => $info) {
    if (isset($info['tags']) && is_array($info['tags']) && count($info['tags'])) {
      foreach ($info['tags'] as $t) {
        $items[$t] = $t;
      }
    }
  }

  return $items;
}

/**
 * When a page from these paths are linked to, they open in an overlay
 */
function os_boxes_admin_paths() {
  $paths = array(
    'os/boxes/*' => TRUE,
    '*/os/boxes/*' => TRUE,    // catches spaces
  );

  return $paths;
}

/**
 * Gets rid of the controls that boxes provides.
 * We want to use our own
 */
function os_boxes_preprocess_boxes_box(&$variables) {
  unset($variables['block']['controls']);
}

/**
 * Adds contextual links to our box widgets
 */
function os_boxes_block_view_alter(&$array, $block) {
  if ($block->module == 'boxes') {
    if (!is_array($array['content'])) {
      $array['content'] = array('#markup' => $array['content']);
    }

    $array['content']['#contextual_links']['box'] = array(
      'os/boxes',
      array($block->delta),
    );

    unset($array['controls']);
  }
}

/**
 * Remove core block link from contextual
 */
function os_boxes_menu_contextual_links_alter(&$links, $router_item, $path) {
  unset($links['block-configure']);
}