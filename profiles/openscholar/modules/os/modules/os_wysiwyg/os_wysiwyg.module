<?php
/**
 * @file
 */

/**
 * Scan the body of the post for any media tags
 * If we find any, update those files with the nid of this post
 * Enter description here ...
 * @param unknown_type $node
 */
function os_wysiwyg_update_files($node) {
  // get the list of files already in this node
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'file')
    ->fieldCondition('field_file_nid', 'target_id', $node->nid, 'CONTAINS');
  $d = $q->execute();
  $curr_files = array();
  if (isset($d['file'])) {
    foreach ($d['file'] as $r) {
      $curr_files[] = $r->fid;
    }
  }

  // parse the node body for files the node actually links to
  $body = $node->body['und'][0]['value'];
  $pattern = '|"fid":"(\d*)"|';  // find everything between double braces
  $matches = array();
  $act_files = array();
  preg_match_all($pattern, $body, $matches);
  foreach ($matches[1] as $fid) {
    if (!in_array($fid, $act_files))
      $act_files[] = $fid;
  }

  $altered = array();

  // remove files that the node no longer uses
  // @todo Take into account files that are linked in ways other than via wysiwyg
  $rem_files = array_diff($curr_files, $act_files);
  $diff = array(array('target_id' => $node->nid));
  foreach ($rem_files as $fid) {
    $file = file_load($fid);
    $file->field_file_nid['und'] = array_diff($file->field_file_nid['und'], $diff);
    $altered[] = $file;
  }

  // add files that the node does use.
  $new_files = array_diff($act_files, $curr_files);
  foreach ($new_files as $fid) {
    $file = file_load($fid);
    $file->field_file_nid['und'][] = $node->nid;
    $altered[] = $file;
  }

  // save changed files
  foreach ($altered as $file) {
    file_save($file);
  }
}

function os_wysiwyg_node_insert($node) {
  os_wysiwyg_update_files($node);
}

function os_wysiwyg_node_update($node) {
  os_wysiwyg_update_files($node);
}

function os_wysiwyg_wysiwyg_editor_settings_alter(&$settings, $context) {

  // settings there are no UI options for
  $settings['gecko_spellcheck'] = true;
  drupal_add_css(drupal_get_path('module', 'os_wysiwyg').'/os_wysiwyg.css');

  // reorder buttons
  // TODO: remove when WYSIWYG module can do this for us

  // format select buttons
  $btns = explode(',', $settings['theme_advanced_buttons1']);
  $format_start = array_search('formatselect', $btns);
  $selects = array_splice($btns, $format_start, 4);
  $format_start = array_search('pasteword', $btns);
  array_splice($btns, $format_start, 0, $selects);

  // toggle toolbar button
  $toggle_start = array_search('pdw', $btns);
  $toggle = array_splice($btns, $toggle_start, 1);
  array_splice($btns, $format_start, 0, $toggle);

  $toolbarStart = array_search('pdw', $btns) + 1;
  $settings['theme_advanced_buttons2'] = implode(',', array_splice($btns, $toolbarStart));
  $settings['theme_advanced_buttons1'] = implode(',',$btns);

  // pdw settings
  $settings['pdw_toggle_toolbars'] = '2,3,4';
  $settings['pdw_toggle_on'] = 1;
}

/**
 * Implements hook_media_browser_plugins_alter.
 * Removes the default library from the Media browser. A View has replaced it.
 */
function os_wysiwyg_media_browser_plugins_alter(&$plugins) {
  unset($plugins['library']);
}

/**
 * Adds the pdw plugin to the wysiwyg
 */
function os_wysiwyg_wysiwyg_include_directory($type) {
  if ($type == 'plugins') {
    return $type;
  }
}

/**
 * Adds necessary relationship and filters to Media Browser view to make it work with spaces
 */
function os_wysiwyg_views_default_views_alter(&$views) {
  if (isset($views['media_default'])) {
    $view = $views['media_default'];
    
    $view->add_item('default', 'relationship', 'field_data_field_file_nid', 'field_file_nid_target_id');
    $view->add_item('default', 'filter', 'spaces', 'current', array('relationship' => 'field_file_nid_target_id'));
  }
}