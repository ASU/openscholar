<?php
include_once ('vsite.features.inc');

/**
 * Public Functions
 */

/**
 * Hooks
 */

/**
 * Implements hook_BASE_ID_form_alter().
 *
 * Runs on every node form
 */
function vsite_form_node_form_alter(&$form, &$form_state, $form_id){
  $vsite = spaces_get_space();
  $os_bundles = os_get_bundles();
  
  if($vsite && in_array($form['#bundle'],$os_bundles)){
    //Set the og_group_ref value to automatically be the current active site
    $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['target_id'] = array(
      '#type' => 'value',
      '#default_value' => $vsite->group->nid,
      '#field_name' => OG_AUDIENCE_FIELD,
      '#language' => LANGUAGE_NONE,
      '#entity_type' => 'node',
      '#bundle' => $form['#bundle']
    );
  }
}

/**
 * Alter the space presets to add vsite specific information
 *
 * @param $presets
 */
function vsite_spaces_presets_alter(&$presets){
  ctools_include('path', 'vsite');
  
  //Alter the preset to include the pathauto settings for nodes prefixed with the purl path
  $pathauto_settings = _vsite_get_pathauto_settings();
  foreach ( $presets as $name => &$preset ) {
    if (substr($name, 0, 3) == "os_") {
      $preset->value['variable'] = array_merge($pathauto_settings, $preset->value['variable']);
    }
  }
}

/**
 * Alter information returned from module/theme info files
 */
function vsite_system_info_alter(&$info, $file, $type){
  
  //Only alter the vsite info file
  if ($type != 'module' || $file->name != 'vsite')
    return;
    
  // Add the feature settings for the dynamically managed og reference fields
  if (! is_array($info['features']['field']))
    $info['features']['field'] = array();
  
  include_once ('vsite.features.field.inc');
  foreach ( vsite_get_group_fields() as $field => $definition ) {
    if (! in_array($field, $info['features']['field'])) {
      $info['features']['field'][] = $field;
    }
  }

}

/**
 * Implementation of hook spaces_plugins
 */
function vsite_spaces_plugins(){
  
  $plugins = array();
  $plugins['vsite'] = array(
      'handler' => array(
          'class' => 'vsite',
          'parent' => 'space_og'
      )
  );
  return $plugins;
}

/**
 * Implementation of hook registry_alter
 * Alter the registry to tell spaces_og groups to use the vsite plugin by default
 */
function vsite_spaces_registry_alter(&$registry){
  
  // use the vsite plugin by default
  if (isset($registry['types']['og'])) {
    $registry['types']['og']['plugin'] = 'vsite';
  }
}
