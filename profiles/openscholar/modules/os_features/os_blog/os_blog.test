<?php

/**
 * @file
 * A test case for the OpenScholar Blog (OS Blog) feature module.
 */

/**
 * Provides a functional test case
 *
 * Exercises a particular sequence of actions through the web UI.
 *
 * @see DrupalWebTestCase
 */
class OpenscholarBlogTestCase extends OpenscholarWebTestCase {
  protected $profile = 'openscholar';
  protected $vsite_admin_user;
  protected $vsite_node;
  
  public static function getInfo() {
    return array(
      'name' => 'OpenScholar Blog',
      'description' => 'Ensure that the os_blog components provided function properly.',
      'group' => 'Features',
    );
  }

  // Creates admin user, creates vsite node, and enables blog feature module
  public function setUp() {
    // Enables any modules required for the test
    parent::setUp('spaces', 'og', 'spaces_og', 'vsite', 'os_blog');
    // Creates admin user with proper role.
    ctools_include('user', 'os'); // Includes resources to grant user roles.
    static $vsite_admin_role = 'vsite admin';
    $this->vsite_admin_user = $this->drupalCreateUser(array());
    os_role_grant($this->vsite_admin_user->uid, $vsite_admin_role);
    
    /**
     * @FIXME fails
    $this->drupalLogin($this->vsite_admin_user);
     */
     
    // Creates an OS Site node and sets as og space
    $vsite_node = array(
        'title' => 'My Test Site',
        'type' => 'vsite',
        'purl' => 'mytestsite',
    );
    $this->vsite_node = $this->drupalCreateNode($vsite_node);
    $vsite = spaces_load('og', $this->vsite_node->nid);
    /**
     * @FIXME
    spaces_set_space($vsite);
     */
    $this->drupalGet('node/' . $this->vsite_node->nid);
    debug($this->url);
    $this->verbose($this->url);
    $this->clickLink('Site Building');
    debug($this->url);
    $this->verbose($this->url);
    
    // Enables the OS Blog feature module

    $cp_path      = $vsite_node['purl'] . '/cp/build';
    $enable_value = 'Public'; // Public option value

    $edit = array();
    $edit['spaces_features[os_blog]'] = $enable_value;
    $submit_value = t('Save for ') . $vsite_node['title'];
    /**
     * @FIXME
    $this->drupalPost($cp_path, $edit, $submit_value);
    $this->assertText(t('The configuration options have been saved for @title.', array('@title' => $vsite_node['title']))); 
     */
  }
  
  // Views page, primary menu item, and archive block
  public function testOpenscholarBlogViewComponents() {
    // Visits the Blog view page, activates context
    $blog_page_title = t('Blog');
    $blog_page_path = '/' . $this->vsite_node->purl . '/blog';
    $sitename = t(variable_get('site_name', 'Drupal'));
    $this->drupalGet($blog_page_path);
    /**
     * @FIXME
    // Views the Page Display with title "Blog" at /blog
    $this->assertTitle(t('@title | @sitename', array('@title' => $blog_page_title, '@sitename' => $sitename)));
    
    // Views the primary menu link provided by "Blog" Page Display
    $this->assertLink($blog_page_title);
    $this->assertLinkbyHref($blog_page_path);

    // Views the Archive block in context of "Blog" Page Display
    $this->assertText('Archive');
     */
  }

  // Creates a Blog entry node using the node form
  public function testOpenscholarBlogCreate() {
    // Creates node to edit.
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(16);
    /**
     * @FIXME
    $this->drupalPost('node/add/blog', $edit, t('Save'));
    $this->assertText(t('Blog entry @title has been created.', array('@title' => $edit['title'])));
     */
  }

  // Creates a Blog entry node and loads the node edit form.
  public function testOpenscholarBlogEdit() {
    $settings = array(
      'type' => 'blog',
      'title' => $this->randomName(32),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $node = $this->drupalCreateNode($settings);

    // For debugging, only outputs when testing settings are set as 'verbose'
    $this->verbose('Blog entry node created: ' . var_export($node, TRUE));
    // Runs normal test not on the testbot
    if (!$this->runningOnTestbot()) {
      debug('We are not running on the PIFR testing server, so will go ahead and catch the failure.');
      $this->drupalGet("node/{$node->nid}/edit");

      // Asserts we don't get a 401 unauthorized response
      $this->assertResponse(200, t('User is allowed to edit the content.'));

      // Asserts page contains title text, indicates edit form render success
      $this->assertText(t("@title", array('@title' => $settings['title'])), "Found title in edit form");
    }
  }

  // Create a Blog entry node and views it displayed on page and archive block.
  public function testOpenscholarViewContent() {
    $settings = array(
      'type' => 'blog',
      'title' => $this->randomName(32),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $node = $this->drupalCreateNode($settings);

    // For debugging, only outputs when testing settings are set as 'verbose'
    $this->verbose('Blog entry node created: ' . var_export($node, TRUE));

    // Runs normal test not on the testbot
    if (!$this->runningOnTestbot()) {
      debug('We are not running on the PIFR testing server, so will go ahead and catch the failure.');
      $this->drupalGet("node/{$node->nid}/edit");

      // Asserts we don't get a 401 unauthorized response
      $this->assertResponse(200, t('User is allowed to edit the content.'));

      // Asserts page contains title text, indicates edit form render success
      $this->assertText(t("@title", array('@title' => $settings['title'])), "Found title in edit form");
    }
  }

  /**
   * Detect if we're running on PIFR testbot
   *
   * @return boolean
   *   TRUE if running on testbot.
   */
  public function runningOnTestbot() {
    return (file_exists("../checkout") || file_exists("../site_under_test"));
  }
}
