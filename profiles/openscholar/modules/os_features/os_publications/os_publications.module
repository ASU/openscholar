<?php
/**
 * @file
 * Code for the os_publications feature.
 */

include_once 'os_publications.features.inc';

/**
 * Defines the overview menu entry
 */
function os_publications_menu_alter(&$items) {
  $items['publications'] = array(
    'title' => 'Publications',
    'page callback' => 'os_publications_overview',
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'os_publications'),
    'file' => drupal_get_path('module', 'os_publications').'/os_publications.pages.inc',
    'menu_name' => 'primary',
  );

  $items['publications/export'] = array(
    'title'             => '',
    'page callback'     => 'os_publications_export',
    'access callback'   => 'user_access',
    'access arguments'  => array('show export links'),
    'file'              => drupal_get_path('module', 'os_publications').'/os_publications.pages.inc',
    'type'              => MENU_CALLBACK
  );
}

/**
 * Alters biblio queries to take spaces into account
 *
 * Joins to the og_membership table, which is where these relationships are stored
 */
function os_publications_query_biblio_alter(QueryAlterableInterface $query) {
  if (module_exists('spaces') && $space = spaces_get_space()) {
    // this has to be separate because of scoping.
    if ($space->type == 'og') {
      $query->innerJoin('og_membership', 'ogm', 'n.nid = ogm.etid');
      $query->condition('ogm.entity_type', 'node');
      $query->condition('ogm.gid', $space->id);
    }
  }
}

/**
 * Replaces biblio theme functions with our own.
 */
function os_publications_theme_registry_alter(&$reg) {
  $reg['biblio_tabular'] = array_merge($reg['biblio_tabular'], array(
    'file' => 'os_publications.theme.inc',
    'theme path' => drupal_get_path('module', 'os_publications'),
    'function' => 'theme_os_publications_tabular'
  ));
  $reg['biblio_tabular']['includes'][] = drupal_get_path('module', 'os_publications').'/os_publications.theme.inc';

  $reg['biblio_export_links'] = array_merge($reg['biblio_export_links'], array(
    'file' => 'os_publications.theme.inc',
    'theme path' => drupal_get_path('module', 'os_publications'),
    'function' => 'theme_os_publications_export_links',
  ));
  $reg['biblio_export_links']['includes'][] = drupal_get_path('module', 'os_publications').'/os_publications.theme.inc';

  $reg['biblio_contributors'] = array_merge($reg['biblio_contributors'], array(
    'file' => 'os_publications.theme.inc',
    'theme path' => drupal_get_path('module', 'os_publications'),
    'function' => 'theme_os_publications_contributors',
  ));
  $reg['biblio_contributors']['includes'][] = drupal_get_path('module', 'os_publications').'/os_publications.theme.inc';

  $reg['biblio_download_links'] = array_merge($reg['biblio_download_links'], array(
    'file' => 'os_publications.theme.inc',
    'theme path' => drupal_get_path('module', 'os_publications'),
    'function' => 'theme_os_publications_download_links',
  ));
  $reg['biblio_download_links']['includes'][] = drupal_get_path('module', 'os_publications').'/os_publications.theme.inc';
}

/**
 * Alters the biblio form to do a lot of things
 */
function os_publications_form_biblio_node_form_alter(&$form, $form_state) {

  $tid = !empty($form_state['biblio_type']) ? $form_state['biblio_type'] :
          ( isset($form_state['node']->biblio_type) ? $form_state['node']->biblio_type : 0);

  // hide the biblio_image field
  $form['field_biblio_image']['#access'] = false;

  // do things based on what pub type we have selected
  switch ($tid) {
    case 0:
      // no pub type
      // we're on the first step of a biblio form. bail out.
      $form['biblio_type']['#weight'] = -1000;

      return;
    case 100:
      // book type
      $form['field_biblio_image']['#access'] = true;
  }

  // move fields out of the vertical tabs
  // I like how the form looks with the tabs in. Much cleaner.
  // So I'm keeping them.
  $form['biblio_authors'] = $form['biblio_tabs']['biblio_authors'];
  unset($form['biblio_authors']['#group']);
  $form['biblio_authors']['add_more']['#value'] = t('Add Another Field');
  $form['biblio_authors']['#collapsible'] = FALSE;
  $form['biblio_authors']['#attached']['js'] = array(drupal_get_path('module', 'os_publications').'/misc/os_publications.js');
  foreach ($form['biblio_authors']['biblio_contributors'] as $k => $f) {
    if (is_array($f) && strpos($k, '#') !== 0) {
      $form['biblio_authors']['biblio_contributors'][$k]['auth_category']['#type'] = 'hidden';
    }
  }


  // We're coming from biblio's ajax callback. It requires the form structure for authors be unchanged.
  if (isset($form_state['values']['op']) && $form_state['values']['op'] == t('Add Another Field')) {
    return;
  }
  unset($form['biblio_tabs']['biblio_authors']);

  $form['biblio_tabs']['biblio_full_text']['body'] = $form['body'];
  unset($form['body']);

  // vtabs 2, 3 and 8 always contain fields we either want outside of vtabs or don't want at all
  // fields we don't want are taken out through biblio's field system
  // so we just have to pull everything left outside of the vtabs
  foreach (array(2,3,8) as $tab) {
    if (!isset($form['biblio_tabs'][$tab]) || !is_array($form['biblio_tabs'][$tab])) continue;
    $children = element_children($form['biblio_tabs'][$tab]);
    foreach ($children as $elem) {
      $form[$elem] = $form['biblio_tabs'][$tab][$elem];
      unset($form['biblio_tabs'][$tab][$elem]);
    }
    if (count(element_children($form['biblio_tabs'][$tab])) == 0) {
      unset($form['biblio_tabs'][$tab]);
    }
  }

  // Add our related URL title field to the form
  // Place it next to the URL title field, which is in a vtab.
  // Put them in a container so we can put a header on the both of them
  // and conserve verbage.
  $form['biblio_tabs'][5]['url'] = array(
    '#type' => 'container',
    '#prefix' => '<h4>'.t('Related External Link').'</h4>',
    'biblio_url' => $form['biblio_tabs'][5]['biblio_url'],
    'biblio_url_title' => array(
      '#default_value' => isset($node->biblio_url_title)?$node->biblio_url_title:'',
      '#type' => 'textfield',
      '#title' => 'Title',
      '#description' => t('Text to show when linking to external URL.'),
    )
  );

  $form['biblio_tabs'][5]['url']['biblio_url']['#title'] = t('URL');
  unset($form['biblio_tabs'][5]['biblio_url']);

  // generate the year description
  $years = variable_get('biblio_years_text', array(9999 => t('Submitted'), 9998 => t('In Press')));
  $form['biblio_year']['#description'] = implode(', ', $years).', or YYYY';

  // hide the rest of the vtabs behind a collapsible fieldset
  $form['publication_extras'] = array(
    '#type' => 'fieldset',
    '#title' => 'Publication Extras',
    '#weight' => 20,
    'biblio_tabs' => $form['biblio_tabs'],
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  unset($form['biblio_tabs']);
}

/**
 * Is given a render array representing the biblio node ready for rendering in the list view
 * @param unknown_type $entry
 */
function os_publications_biblio_entry_alter(&$entry, $node) {
  unset($entry['export_links']);

  field_attach_prepare_view('node', array($node->nid => $node), 'teaser');
  $entry += field_attach_view('node', $node, 'teaser');
}

/**
 * Removes the export links from the full view of the node
 */
function os_publications_node_view_alter(&$build, $type) {
  if ($type == 'node' && $build['#bundle'] == 'biblio') {
    $links = &$build['links'];
    foreach ($links as $k => $l) {
      if (is_array($l) && isset($l['#links'])) {
        foreach ($l['#links'] as $id => $arr) {
          if (strpos($arr['href'], 'export') !== FALSE) {
            unset($links[$k]['#links'][$id]);
          }
        }
      }
    }
  }
}

function os_publications_contextual_links_view_alter(&$element, $items) {
  if (isset($items['os-biblio'])) {
    $element['#links']['os-biblio-import'] = array(
      'title' => t('Import Publications'),
      'href' => 'publications/import',
      'html' => TRUE,
      'query' => $element['#links']['os-biblio']['query'],
    );

    $element['#links']['os-biblio']['title'] = t('Add Publication');
  }
}

function os_publications_form_biblio_import_form_alter(&$form, $form_state) {

  // always use batch processing
  // 99% of our users won't kno what this is anyway
  $form['batch_process']['#type'] = 'value';

  // set the user id to the current user
  // and make it unchangable
  $form['userid']['#type'] = 'value';
  $form['userid']['#type'] = $GLOBALS['user']->uid;

  // unset taxonomy settings
  unset($form['import_taxonomy']);
}

function os_publications_node_insert($node) {
  if ($node->type == 'biblio') {
    _os_publications_clear_cache($node);
  }
}

function os_publications_node_update($node) {
  if ($node->type == 'biblio') {
    _os_publications_clear_cache($node);
  }
}

function os_publications_node_delete($node) {
  if ($node->type == 'biblio') {
    _os_publications_clear_cache($node);
  }
}

/**
 * Puts together a list of all the cids that a given node would affect
 * And then clears them from the cache table
 * @param unknown_type $node
 */
function _os_publications_clear_cache($node) {
  $frags = array();
  $frags[] = 'type:'.$node->biblio_type;
  $frags[] = 'year:'.$node->biblio_year;
  foreach ($node->biblio_contributors as $c) {
    $frags[] = 'author:'.$c['cid'];
  }

  $sel = db_select('cache_biblio_lists', 'bl')->fields('bl', array('cid'));
  if (module_exists('spaces') && $space = spaces_get_space()) {
    $sel->condition('cid', '%space:'.$space->id.'%', 'LIKE');
  }
  $rows = $sel->execute();

  foreach ($rows as $r) {
    $check = str_replace($frags, '|', $r->cid);
    if (strpos($check, '|') !== FALSE) {
      cache_clear_all($r->cid, 'cache_biblio_lists');
    }
  }
}